\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/autoenumerator.pamphlet}
\author{The Magnus Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include.h>>=
#include "Supervisor.h"
#include "SMEnumerator.h"
#include "RandomAutoInFree.h"
#include "File.h"
#include "Word.h"
#include "SMFPGroup.h"
#include "fastProblems.h"
#include "OutMessages.h"
#include "SMListIterator.h"

@
<<include.c>>=
#include "AutoEnumerator.h"
#include "SMEnumerator.h"
#include "OutMessages.h"
#include "SMFPGroup.h"
#include "viewStructure.h"
#include "SMMap.h"
#include <signal.h>

@
\section{class IsMapInListARCer}
\subsection{IsMapInListARCer Constructor}
<<IsMapInListARCer Constructor.h>>=
  IsMapInListARCer( ComputationManager& boss ) 
  : ARCer( boss ), result(0) { } 
@
\subsection{IsMapInListARCer Destructor}
<<IsMapInListARCer Destructor.h>>=
  ~IsMapInListARCer( ) { 
    if (theIterator)
      delete theIterator;
  }
@
\subsection{IsMapInListARCer::setArguments}
<<IsMapInListARCer::setArguments.h>>=
  void setArguments( const SMList<Map>&, const Map&);
@
<<IsMapInListARCer::setArguments.c>>=
void IsMapInListARCer::setArguments( const SMList<Map>& l, const Map& m)
{
  theIterator = new SMListIterator<Map>(l);
  theMap = m;
}

@
\subsection{IsMapInListARCer::isInList}
<<IsMapInListARCer::isInList.h>>=
  bool isInList();
@
<<IsMapInListARCer::isInList.c>>=
bool IsMapInListARCer::isInList() 
{
#if SAFETY > 0
  if( !theIterator )
    error( "bool IsWordInListARCer::isInList() : "
	   "fileIterator must be initialized first");
#endif
  return result;
}

@
\subsection{IsMapInListARCer::runComputation}
<<IsMapInListARCer::runComputation.h>>=
  void runComputation( );
@
<<IsMapInListARCer::runComputation.c>>=
void IsMapInListARCer::runComputation( )
{
#if SAFETY > 0
  if( !theIterator )
    error( "void IsMapInListARCer::runComputation( ) : "
	   "fileIterator must be initialized first");
#endif
  for (theIterator->reset();!theIterator->EOL();theIterator->nextCell()){
    
    if ( theMap == theIterator->getData() ){
      result = true;
      return;
    }
  }
  result = false;
}

@
\subsection{IsMapInListARCer::writeResults}
<<IsMapInListARCer::writeResults.h>>=
  void writeResults( ostream& );
@
<<IsMapInListARCer::writeResults.c>>=
void IsMapInListARCer::writeResults( ostream& out ) 
{
  out < result;
}

@
\subsection{IsMapInListARCer::readResults}
<<IsMapInListARCer::readResults.h>>=
  void readResults( istream& );
@
<<IsMapInListARCer::readResults.c>>=
void IsMapInListARCer::readResults( istream& in )
{
  in > result;
}

@
\subsection{class IsMapInListARCer}
<<class IsMapInListARCer>>=
class IsMapInListARCer : public ARCer
{
public:
<<IsMapInListARCer Constructor.h>>
<<IsMapInListARCer Destructor.h>>
<<IsMapInListARCer::setArguments.h>>
<<IsMapInListARCer::isInList.h>>
<<IsMapInListARCer::runComputation.h>>
<<IsMapInListARCer::writeResults.h>>
<<IsMapInListARCer::readResults.h>>
private:
  SMListIterator<Map>* theIterator;
  Map theMap;
  bool result;
};

@
\section{class IsMapInList}
\subsection{IsMapInList Constructor}
<<IsMapInList Constructor.h>>=
  IsMapInList( SMList<Map>&, const class SMMap& );
@
<<IsMapInList Constructor.c>>=
IsMapInList::IsMapInList(SMList<Map>& sml,const SMMap& map)
  : Supervisor( true ),
    theList( sml ),
    theMap( map ),
    arcer(*this)
{ 
  arcer.setArguments(sml, map.getMap());
}

@
\subsection{IsMapInList::viewStructure}
<<IsMapInList::viewStructure.h>>=
  void viewStructure(ostream& ostr) const;  // overrides SMObject
@
<<IsMapInList::viewStructure.c>>=
void IsMapInList::viewStructure(ostream& ostr) const
{
  ProblemView pv( ostr, oid(),Text("Containment problem"),
		  Text("Determine whether") + Name(theMap)
		  + Text("lies in") + Name(theList),
		  helpID("IsMapInList", theList.getGroup()),
		  Text(Name(theMap)) + Text("is in") +
		  Name(theList) + Text("?") );
  pv.startItemGroup();
  pv.add( Text("For the use of this problem"), ThisARCSlotID(), 50 );
  pv.done();
}

@
\subsection{IsMapInList::takeControl}
<<IsMapInList::takeControl.h>>=
  void takeControl( );         // overrides ComputationManager
@
<<IsMapInList::takeControl.c>>=
void IsMapInList::takeControl( )
{
  if (freeARCs() > 0) {
    if (arcer.takeControl()) {
      LogMessage msg( *this, theMap );
      msg << Name( theList );
      if (arcer.isInList()) msg << " contains ";
      else msg << " does not contain ";
      msg << Name( theMap ) << ".";
      msg.send();
      adminTerminate();
      return;
    }
    usedOneARC();
  }
}

@
\subsection{IsMapInList::start}
<<IsMapInList::start.h>>=
  void start( ) { }            // overrides ComputationManager
@
\subsection{IsMapInList::terminate}
<<IsMapInList::terminate.h>>=
  void terminate( ) { }        // overrides ComputationManager
@
\subsection{class IsMapInList}
<<class IsMapInList>>=
class IsMapInList  : public Supervisor
{
public:
<<IsMapInList Constructor.h>>
<<IsMapInList::viewStructure.h>>
<<IsMapInList::takeControl.h>>
<<IsMapInList::start.h>>
<<IsMapInList::terminate.h>>
private:
  const class SMMap& theMap;
  SMList<Map>& theList;
  IsMapInListARCer arcer;
};

@
\section{class AutEnumeratorARCer2}
\subsection{AutEnumeratorARCer2 Constructor}
<<AutEnumeratorARCer2 Constructor.h>>=
  AutEnumeratorARCer2( ComputationManager& boss, SMListData& d ) 
    : EnumeratorARCer( boss, d ), 
    randAuto( 0 ), 
    current( 0 ) { }

@
\subsection{AutEnumeratorARCer2 Destructor}
<<AutEnumeratorARCer2 Destructor.h>>=
  ~AutEnumeratorARCer2( ) { delete randAuto;} 
@
\subsection{AutEnumeratorARCer2::setArguments}
<<AutEnumeratorARCer2::setArguments.h>>=
  void setArguments( FreeGroup group, int avgNumbers, int n);

@
<<AutEnumeratorARCer2::setArguments.c>>=
void AutEnumeratorARCer2::setArguments( FreeGroup group, int avgNumbers, int n)
{
  if (randAuto) delete randAuto;
  randAuto = new RandomAutoInFree( group, avgNumbers );
  number = n;
}

@
\subsection{AutEnumeratorARCer2::enumerate}
<<AutEnumeratorARCer2::enumerate.h>>=
  void enumerate( );
@
<<AutEnumeratorARCer2::enumerate.c>>=
void AutEnumeratorARCer2::enumerate( )
{
#if SAFETY > 0
  if( randAuto == 0 ) return;
  //    error( "void AutEnumeratorARCer::runComputation( ) : "
  //	   "The enumerator has not been initialized yet");
#endif
  Map m;
  int order;
  while (current < number) {
    if (submitSignalRecieved()) return;
    current++;
    if (!isFinite) m = randAuto->getAutomorphism();
    else m = randAuto->getFiniteAutomorphism(order);
    if (isAbelian) {
      VectorOf<Word> v = m.generatingImages();
      for(int i=0; i<v.length(); i++) 
	v[i] = AbelianWord(m.range().numberOfGenerators(), v[i]).getWord();
      m.setGeneratingImages(v);
    }
    theData << EnumWriteMap( m ) << "\n";
    if (isFinite) theData << Chars("The order: ") + Chars(order) << "\n";
    theData << "\n";
  }
}

@
\subsection{AutEnumeratorARCer2::writeResults}
<<AutEnumeratorARCer2::writeResults.h>>=
  void writeResults( ostream& );
@
<<AutEnumeratorARCer2::writeResults.c>>=
void AutEnumeratorARCer2::writeResults( ostream& out ) 
{
  out < current < theData;
}

@
\subsection{AutEnumeratorARCer2::readResults}
<<AutEnumeratorARCer2::readResults.h>>=
  void readResults( istream& );
@
<<AutEnumeratorARCer2::readResults.c>>=
void AutEnumeratorARCer2::readResults( istream& in )
{
  in > current > theData;
}

@
\subsection{AutEnumeratorARCer2::getFileName}
<<AutEnumeratorARCer2::getFileName.h>>=
  Chars getFileName() const;
@
<<AutEnumeratorARCer2::getFileName.c>>=
Chars AutEnumeratorARCer2::getFileName() const
{
  return file.getFileName();
}

@
\subsection{class AutEnumeratorARCer2}
<<class AutEnumeratorARCer2>>=
class AutEnumeratorARCer2 : public EnumeratorARCer
{
public:
<<AutEnumeratorARCer2 Constructor.h>>
<<AutEnumeratorARCer2 Destructor.h>>
<<AutEnumeratorARCer2::setArguments.h>>
<<AutEnumeratorARCer2::enumerate.h>>
<<AutEnumeratorARCer2::writeResults.h>>
<<AutEnumeratorARCer2::readResults.h>>
<<AutEnumeratorARCer2::getFileName.h>>
  bool isFinite;
  bool isAbelian;
private:
  int  current;
  RandomAutoInFree* randAuto;
  int number;
  File file;
};

@
\section{class AutoEnumeratorProblem}
\subsection{AutoEnumeratorProblem Constructor}
<<AutoEnumeratorProblem Constructor.h>>=
  AutoEnumeratorProblem(SMFPGroup& );
@
<<AutoEnumeratorProblem Constructor.c>>=
AutoEnumeratorProblem::AutoEnumeratorProblem(SMFPGroup& b)
  : EnumeratorProblem< Map >( b ),
    theGroup(b),
    arcer( *this, theData )
{
  arcer.isFinite = false;
  arcer.isAbelian = theGroup.gic.isAbelian()==yes;
}

@
\subsection{AutoEnumeratorProblem::takeControl}
<<AutoEnumeratorProblem::takeControl.h>>=
  void takeControl( );         // overrides ComputationManager
@
<<AutoEnumeratorProblem::takeControl.c>>=
void AutoEnumeratorProblem::takeControl( )
{
  if (freeARCs() > 0) {
    if (arcer.takeControl()){
      adminSuspend();
      return;	
    }
    usedOneARC();
  }
}

@
\subsection{AutoEnumeratorProblem::viewStructure}
<<AutoEnumeratorProblem::viewStructure.h>>=
  void viewStructure(ostream& ostr) const;  // overrides SMObject
@
<<AutoEnumeratorProblem::viewStructure.c>>=
void AutoEnumeratorProblem::viewStructure(ostream& ostr) const
{
   EnumertatorProblemView pv(oid(),"Automorphism enumerator",
			     Text("Randomly enumerate automorphisms of") +
			     Name( theGroup ),
			     helpID("AutoEnumeratorProblem",theGroup),
			     Text("Aut en") );
   pv.addParameter(EditInteger("P1","Number of automorphisms",1,10,0,10000));
   pv.addParameter(
      EditInteger("P2","Average number of Nielsen generators",0,10,0,50));
   pv.addProblem( Subproblem("Sp1",ThisARCSlotID(),
			     Text("For the use of enumerator"),40));
   submit(ostr, pv);
}

@
\subsection{AutoEnumeratorProblem::getDataFileName}
<<AutoEnumeratorProblem::getDataFileName.h>>=
  Chars getDataFileName() const { return theData.getDataFileName(); }
@
\subsection{AutoEnumeratorProblem::start}
<<AutoEnumeratorProblem::start.h>>=
  void start( ) {
    LogMessage msg(*this,theGroup);
    if (theGroup.gic.isAbelian()==yes && 
	theGroup.getFPGroup().getRelators().cardinality() > 0){
      msg << " This abelian group is not free, it is difficult to built automorphisms.";
      msg.send();
//      resultIsFast();
    } 
    else if (theGroup.getFreePreimage().numberOfGenerators() < 2) {
      if (theGroup.getFreePreimage().numberOfGenerators()==0)
	msg <<  Name(theGroup) << 
               " is trivial, so it has only one automorphism: 1->1.";
      else {
	Chars nameOfGen = theGroup.getFreePreimage().nameOfGenerator(0);
	msg <<  Name(theGroup) 
	    << " with one generator, so it has only two automorphisms: " 
	    << nameOfGen << "->"<< nameOfGen << " and " << nameOfGen 
	    << "->" <<nameOfGen << "^-1.";
      }
      msg.send();
//      resultIsFast();
    }
    else {
      int num = getParameters().getValue("P1");
      int avgNumGens = getParameters().getValue("P2");
      arcer.setArguments(theGroup.getFreePreimage(), avgNumGens, num);
      msg << Link(Chars( "Click here to see the random automorphisms  of ")+
		  Text( Name(theGroup) ), "RandomAutomorphisms",
		  theData.getDataFileName(),true );
      msg.send();        
    }
  }

@
\subsection{AutoEnumeratorProblem::terminate}
<<AutoEnumeratorProblem::terminate.h>>=
  void terminate( ) {  }          // overrides ComputationManager
@
\subsection{AutoEnumeratorProblem::resume}
<<AutoEnumeratorProblem::resume.h>>=
  void resume( ) {              // overrides ComputationManager
    arcer.submitSignal();
    int num = getParameters().getValue("P1");
    int avgNumGens = getParameters().getValue("P2");
    arcer.setArguments(theGroup.getFreePreimage(),avgNumGens,num);
  }
   
@   
\subsection{class AutoEnumeratorProblem}
<<class AutoEnumeratorProblem>>=
class AutoEnumeratorProblem : public EnumeratorProblem< Map >
{
public:
<<AutoEnumeratorProblem Constructor.h>>
<<AutoEnumeratorProblem::takeControl.h>>
<<AutoEnumeratorProblem::viewStructure.h>>
<<AutoEnumeratorProblem::getDataFileName.h>>
<<AutoEnumeratorProblem::start.h>>
<<AutoEnumeratorProblem::terminate.h>>
<<AutoEnumeratorProblem::resume.h>>
private:
  SMFPGroup& theGroup;
  AutEnumeratorARCer2 arcer;
};

@
\section{class FiniteAutoEnumeratorProblem}
\subsection{FiniteAutoEnumeratorProblem Constructor}
<<FiniteAutoEnumeratorProblem Constructor.h>>=
  FiniteAutoEnumeratorProblem(SMFPGroup& );
@
<<FiniteAutoEnumeratorProblem Constructor.c>>=
FiniteAutoEnumeratorProblem::FiniteAutoEnumeratorProblem(SMFPGroup& b)
  : EnumeratorProblem< Map >( b ),
    theGroup(b),
    arcer( *this, theData )
{
  arcer.isFinite = true;
  arcer.isAbelian = theGroup.gic.isAbelian()==yes;
}

@
\subsection{FiniteAutoEnumeratorProblem::takeControl}
<<FiniteAutoEnumeratorProblem::takeControl.h>>=
  void takeControl( );         // overrides ComputationManager
@
<<FiniteAutoEnumeratorProblem::takeControl.c>>=
void FiniteAutoEnumeratorProblem::takeControl( )
{
  if (freeARCs() > 0){
    if (arcer.takeControl()) {
      adminSuspend();
      return;	
    }
    usedOneARC();
  }
}

@
\subsection{FiniteAutoEnumeratorProblem::viewStructure}
<<FiniteAutoEnumeratorProblem::viewStructure.h>>=
  void viewStructure(ostream& ostr) const;  // overrides SMObject
@
<<FiniteAutoEnumeratorProblem::viewStructure.c>>=
void FiniteAutoEnumeratorProblem::viewStructure(ostream& ostr) const
{
  EnumertatorProblemView pv(oid(),"Automorphism enumerator",
			    Text("Randomly enumerate automorphisms of")
			    + Name(theGroup) + Text("of finite order"),
			    helpID("FiniteAutoEnumeratorProblem", theGroup),
			    Text("Fin aut en") );
   pv.addParameter(EditInteger("P1","Number of automorphisms",1,10,0,1000000));
   pv.addParameter(
     EditInteger("P2","Average number of Nielsen generators",0,10,0,50));
   pv.addProblem( Subproblem("Sp1",ThisARCSlotID(),
			     Text("For the use of enumerator"),40));
   submit(ostr, pv);
}

@
\subsection{FiniteAutoEnumeratorProblem::getDataFileName}
<<FiniteAutoEnumeratorProblem::getDataFileName.h>>=
  Chars getDataFileName() const { return theData.getDataFileName(); }
@
\subsection{FiniteAutoEnumeratorProblem::start}
<<FiniteAutoEnumeratorProblem::start.h>>=
  void start( ) {   
    int num = getParameters().getValue("P1");
    int avgNumGens = getParameters().getValue("P2");
    arcer.setArguments(theGroup.getFreePreimage(),avgNumGens,num);
    LogMessage msg(*this,theGroup);
    if (theGroup.gic.isAbelian()==yes && 
	theGroup.getFPGroup().getRelators().cardinality() > 0){
      msg << " This abelian group is not free, "
          << "it is difficult to built automorphisms.";
      msg.send();
//      resultIsFast();
    }
    else if (theGroup.getFreePreimage().numberOfGenerators() < 2){
      if (theGroup.getFreePreimage().numberOfGenerators()==0)
	msg <<  Name(theGroup) << 
                " is trivial, so it has only one automorphism: 1->1.";
      else {
	Chars nameOfGen = theGroup.getFreePreimage().nameOfGenerator(0);
	msg <<  Name(theGroup) 
	    << " with one generator, so it has only two automorphisms: " 
	    << nameOfGen << "->" << nameOfGen << " and " << nameOfGen 
	    << "->" << nameOfGen << "^-1.";
      }
      msg.send();
//      resultIsFast();
    }
    else {
      msg << Link(Chars( "Click here to see the random automorphisms  of ")+
		  Text( Name(theGroup) ) + Chars(" of finite order."),
		  "RandomAutomorphisms", theData.getDataFileName(),true );
      msg.send();        
    }
  }

@
\subsection{FiniteAutoEnumeratorProblem::terminate}
<<FiniteAutoEnumeratorProblem::terminate.h>>=
  void terminate( ) {  }          // overrides ComputationManager
@
\subsection{FiniteAutoEnumeratorProblem::resume}
<<FiniteAutoEnumeratorProblem::resume.h>>=
  void resume( ) {              // overrides ComputationManager
    arcer.submitSignal();
    int num = getParameters().getValue("P1");
    int avgNumGens = getParameters().getValue("P2");
    arcer.setArguments(theGroup.getFreePreimage(),avgNumGens,num);
  }
   
@
\subsection{class FiniteAutoEnumeratorProblem}
<<class FiniteAutoEnumeratorProblem>>=
class FiniteAutoEnumeratorProblem : public EnumeratorProblem< Map >
{
public:
<<FiniteAutoEnumeratorProblem Constructor.h>>
<<FiniteAutoEnumeratorProblem::takeControl.h>>
<<FiniteAutoEnumeratorProblem::viewStructure.h>>
<<FiniteAutoEnumeratorProblem::getDataFileName.h>>
<<FiniteAutoEnumeratorProblem::start.h>>
<<FiniteAutoEnumeratorProblem::terminate.h>>
<<FiniteAutoEnumeratorProblem::resume.h>>
private:
  SMFPGroup& theGroup;
  AutEnumeratorARCer2 arcer;
};

@
\section{license}
Copyright (C) 1994 The New York Group Theory Cooperative
See magnus/doc/COPYRIGHT for the full notice.
\section{AutoEnumerator.h}
<<AutoEnumerator.h>>=
// src/autoenumerator.pamphlet
#ifndef _AutoEnumerator_H_
#define _AutoEnumerator_H_

<<include.h>>
<<class IsMapInListARCer>>
<<class IsMapInList>>
<<class AutEnumeratorARCer2>>
<<class AutoEnumeratorProblem>>
<<class FiniteAutoEnumeratorProblem>>
#endif
@
\section{autoenumerator.c}
<<*>>=

<<include.c>>

<<IsMapInListARCer::setArguments.c>>
<<IsMapInListARCer::runComputation.c>>
<<IsMapInListARCer::writeResults.c>>
<<IsMapInListARCer::readResults.c>>
<<IsMapInListARCer::isInList.c>>

<<IsMapInList Constructor.c>>
<<IsMapInList::takeControl.c>>
<<IsMapInList::viewStructure.c>>

<<AutEnumeratorARCer2::setArguments.c>>
<<AutEnumeratorARCer2::enumerate.c>>
<<AutEnumeratorARCer2::writeResults.c>>
<<AutEnumeratorARCer2::readResults.c>>
<<AutEnumeratorARCer2::getFileName.c>>

<<AutoEnumeratorProblem Constructor.c>>
<<AutoEnumeratorProblem::takeControl.c>>
<<AutoEnumeratorProblem::viewStructure.c>>

<<FiniteAutoEnumeratorProblem Constructor.c>>
<<FiniteAutoEnumeratorProblem::takeControl.c>>
<<FiniteAutoEnumeratorProblem::viewStructure.c>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
