\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/Packages/include/PackagesData.h}
\author{The Magnus Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include.h>>=
#include <fstream.h>
#include "Chars.h"
#include "Menu.h"
#include "SMFPGroup.h"
#include "PackagesObject.h"
#include "Type.h" 

@
<<include.c>>=
#include "PackagesData.h"
#include "MagnusHome.h"
#include "List.h"
#include "SMFPGroup.h"
#include "FEData.h"

@
\section{class Record}
\subsection{Record Constructor}
<<Record Constructor.h>>=
  Record(): id(0) { }
@
\subsection{Record::readFrom}
<<Record::readFrom.h>>=
  virtual void readFrom( istream& in) = 0;
@
\subsection{Record::writeTo}
<<Record::writeTo.h>>=
  virtual void writeTo ( ostream& out ) const = 0;
@
\subsection{Record::getID}
this is done from DatabaseOf only where record is usually const. parameter
that why need pseudo const. function
<<Record::getID.h>>=
  int getID() const { 
    if (id) return id;
    else error("PackageRecord::getID() : ID hasn't been initialized yet.");
  }
@
\subsection{Record::setID}
<<Record::setID.h>>=
  void setID(int i) const;
@
<<Record::setID.c>>=
void Record::setID(int i) const
{
  Record* This = (Record*)this;
  This->id = i;
}

@
\subsection{class Record}
<<class Record>>=
class Record
{
public:
<<Record Constructor.h>>
<<Record::readFrom.h>>
<<Record::writeTo.h>>
<<Record::getID.h>>
<<Record::setID.h>>
private:
  int id;
};

@
\section{struct PackageRecord}
\subsection{PackageRecord Constructor}
<<PackageRecord Constructor.h.1>>=
  PackageRecord(): Record(), cs( 0 ), os(0) { }
@
\subsection{PackageRecord Constructor}
<<PackageRecord Constructor.h.2>>=
  PackageRecord(const Chars& n, const Chars& c, int csel, int osel ): 
   Record(), cs(csel), os(osel){
      strncpy(name,n,20);  name[20] = '\0';
      strncpy(comm,c,128);  comm[128] = '\0';
    }
@
\subsection{PackageRecord::readFrom}
<<PackageRecord::readFrom.h>>=
  void readFrom( istream& in);
@
Due to type considerations we can no longer read the bytes of an
integer from a stream of characters. We need to cast the value.
We need to do this 3 times here.
This code used to read:
\begin{verbatim}
  in.read(&cs, sizeof(int) );
\end{verbatim}
but now reads:
<<readcs>>=
    in.read((char *)&cs, sizeof(int));  
@
<<reados>>=
    in.read((char *)&os, sizeof(int));  
@
<<readID>>=
  int ID;
  in.read((char *)&ID, sizeof(int) );
  setID( ID );
@
<<PackageRecord::readFrom.c>>=
void PackageRecord::readFrom( istream& in)
{
  if (in.eof())
    return;
  in.read(name,21);
  name[20] = '\0';
  in.read(comm, 129);
  comm[128] = '\0';
<<readcs>>
<<reados>>
<<readID>>
}

@
\subsection{PackageRecord::writeTo}
<<PackageRecord::writeTo.h>>=
  void writeTo ( ostream& out ) const;
@
Due to type considerations we can no longer write the bytes of an
integer from a stream of characters. We need to cast the value.
We need to do this 3 times here.
This code used to read:
\begin{verbatim}
  out.write(&cs, sizeof(int) );
\end{verbatim}
but now reads:
<<writecs>>=
  out.write((char *)&cs, sizeof(int) );
@
<<writeos>>=
  out.write((char *)&os, sizeof(int) );
@
<<writeID>>=
  int ID = getID();
  out.write((char *)&ID, sizeof(int) );
  out.flush();
@
<<PackageRecord::writeTo.c>>=
void PackageRecord::writeTo ( ostream& out ) const
{
  out.write(name,21);
  out.write(comm,129);
<<writecs>>
<<writeos>>
<<writeID>>
}

@
\subsection{PackageRecord::getName}
<<PackageRecord::getName.h>>=
  Chars getName() const { return Chars(name); }
@
\subsection{PackageRecord::getCommand}
<<PackageRecord::getCommand.h>>=
  Chars getCommand() const { return Chars(comm); }
@
\subsection{PackageRecord::getObjectSelection}
<<PackageRecord::getObjectSelection.h>>=
  int getObjectSelection() const { return os; }
@
\subsection{PackageRecord::getCheckinSelection}
<<PackageRecord::getCheckinSelection.h>>=
  int getCheckinSelection() const { return cs; }
@
\subsection{struct PackageRecord}
<<struct PackageRecord>>=
struct PackageRecord : public Record{
<<PackageRecord Constructor.h.1>>
<<PackageRecord Constructor.h.2>>
<<PackageRecord::readFrom.h>>
<<PackageRecord::writeTo.h>>
<<PackageRecord::getName.h>>
<<PackageRecord::getCommand.h>>
<<PackageRecord::getCheckinSelection.h>>
<<PackageRecord::getObjectSelection.h>>
   static int size()  { return 162; } // 3*4 - 3 integers + 21 + 129 
private:
  char name[21];
  char comm[129];
  int cs;
  int os;
};

@
\section{struct ParamRecord}
\subsection{ParamRecord Constructor}
<<ParamRecord Constructor.h.1>>=
  ParamRecord(): Record(), packID( 0 ) { }
@
\subsection{ParamRecord Constructor}
<<ParamRecord Constructor.h.2>>=
  ParamRecord(const Chars& n, PARAM_TYPE pt ): 
   Record(), packID(-1), pType(pt){
     strncpy(name,n,80);  name[80] = '\0';
   }
@
\subsection{ParamRecord::PARAM\_TYPE}
<<ParamRecord::PARAM_TYPE.h>>=
  enum PARAM_TYPE { INT, BOOL, STRING };
@
\subsection{ParamRecord::readFrom}
<<ParamRecord::readFrom.h>>=
  void readFrom( istream& in);
@
Due to type considerations we can no longer read the bytes of an
integer from a stream of characters. We need to cast first.
This code used to read:
\begin{verbatim}
  in.read(&t, sizeof(int) );
\end{verbatim}
but now reads:
<<readpID>>=
    in.read((char *)&packID, sizeof(int));  
@
<<readt>>=
    in.read((char *)&t, sizeof(int));  
@
<<ParamRecord::readFrom.c>>=
void ParamRecord::readFrom( istream& in)
{
  if (in.eof())
    return;
  in.read(name,81);
  name[80] = '\0';
<<readpID>>
  int t;
<<readt>>
  if (t == int(INT))
    pType = INT;
  else if(t == int(BOOL))
    pType = BOOL;
  else if(t == int(STRING))
    pType = STRING;
  else
    error(" ParamRecord::readFrom( istream& in) : can't recognize parameter type");
}

@
\subsection{ParamRecord::writeTo}
<<ParamRecord::writeTo.h>>=
  void writeTo ( ostream& out ) const;
@
<<ParamRecord::writeTo.c>>=
void ParamRecord::writeTo ( ostream& out ) const
{
  out.write(name,81);
  if (packID < 0 )
    error("Invalid package ID");
  out.write(&packID, sizeof(int) );
  int t = int(pType);
  out.write(&t, sizeof(int) );
  out.flush();
}

@
\subsection{ParamRecord::getName}
<<ParamRecord::getName.h>>=
  Chars getName() const { return Chars(name); }
@
\subsection{ParamRecord::getPackageID}
<<ParamRecord::getPackageID.h>>=
  int getPackageID() const { return packID; }
@
\subsection{ParamRecord::getType}
<<ParamRecord::getType.h>>=
  ParamRecord::PARAM_TYPE getType() const { return pType; }
@
\subsection{ParamRecord::setPID}
<<ParamRecord::setPID.h>>=
  void setPID(int i) { packID = i; }
@
\subsection{ParamRecord::size}
$$2*4 - 2 {\rm \ integers\ } + 81$$
<<ParamRecord::size.h>>=
  static int size()  { return 89; } 
@
\subsection{struct ParamRecord}
<<struct ParamRecord>>=
struct ParamRecord : public Record{
<<ParamRecord::PARAM_TYPE.h>>
<<ParamRecord Constructor.h.1>>
<<ParamRecord Constructor.h.2>>
<<ParamRecord::readFrom.h>>
<<ParamRecord::writeTo.h>>
<<ParamRecord::getName.h>>
<<ParamRecord::getPackageID.h>>
<<ParamRecord::getType.h>>
<<ParamRecord::setPID.h>>
<<ParamRecord::size.h>>
private:
  char name[81];
  PARAM_TYPE pType;
  int packID;
};

@
\section{class DatabaseOf}
\subsection{DatabaseOf Constructor}
<<DatabaseOf Constructor.h>>=
  DatabaseOf(const Chars& );
@
<<DatabaseOf Constructor.c>>=
template <class T>
DatabaseOf<T>::DatabaseOf(const Chars& f_name) : fileName(f_name), 
                          lastIDNumber( 1 )
{
  //  Chars dbPath = Chars(MagnusHome::magnusHome()) + Chars("/packages.dat");
  int l = fileName.length();
  // check extention 
  if ( fileName[l-1] == 't' &&  fileName[l-2] == 'a' && 
       fileName[l-3] == 'd'  && fileName[l-4] == '.') {
    Chars cfgFileName( fileName);
    cfgFileName[l-3]='c';cfgFileName[l-2]='f';cfgFileName[l-1]='g';
    cfgFile.open(cfgFileName,  ios::in | ios::out);
    if (!cfgFile)
      error("Can't open the database configureation file");
    if (!cfgFile.eof())
      cfgFile.read(&lastIDNumber, sizeof(int) );
  } else
    error("Doesnot look like a database file.");
  dataFile.open(f_name, ios::in | ios::out);
  if (!dataFile)
    error("Can't open the database");
}

@
\subsection{DatabaseOf Destructor}
<<DatabaseOf Destructor.h>>=
  ~DatabaseOf();
@
<<DatabaseOf Destructor.c>>=
template <class T>
DatabaseOf<T>::~DatabaseOf() 
{
  cfgFile.close();
  dataFile.close();
}

@
\subsection{DatabaseOf::goFirst}
<<DatabaseOf::goFirst.h>>=
  void goFirst();
@
<<DatabaseOf::goFirst.c>>=
template <class T>
void DatabaseOf<T>::goFirst() 
{
  dataFile.clear();
  dataFile.seekg(0);
}

@
\subsection{DatabaseOf::goTo}
moves to ith position
<<DatabaseOf::goTo.h>>=
  bool goTo( int i);
@  
<<DatabaseOf::goTo.c>>=
template <class T>
bool DatabaseOf<T>::goTo( int i)
{
  if ( i < 0)
    return false;
  dataFile.clear();
  int ofset = i*T::size(); 
  dataFile.seekg(ofset, ios::beg);
}

@
\subsection{DatabaseOf::skip}
moves current position one record ahead
<<DatabaseOf::skip.h>>=
  void skip();
@
<<DatabaseOf::skip.c>>=
template <class T>
void DatabaseOf<T>::skip() 
{
  if (!dataFile.eof())
    dataFile.seekg(T::size(),ios::cur);
}

@
\subsection{DatabaseOf::done}
<<DatabaseOf::done.h>>=
  bool done() const;
@
<<DatabaseOf::done.c>>=
template <class T>
bool DatabaseOf<T>::done() const 
{
  DatabaseOf<T>* This = (DatabaseOf<T>* )this;
  This->dataFile.peek();
  return This->dataFile.eof();
}

@
\subsection{DatabaseOf::getRecord}
reads and returns record from current position (position is moved to
the end of the record)
<<DatabaseOf::getRecord.h>>=
  T getRecord();
@
<<DatabaseOf::getRecord.c>>=
template <class T>
T DatabaseOf<T>::getRecord() 
{
  T r;
  if (!dataFile.eof())
    r.readFrom(dataFile);
  return r;
}  

@
\subsection{DatabaseOf::append}
<<DatabaseOf::append.h>>=
  void append( const T& );
@
<<DatabaseOf::append.c>>=
template <class T>
void  DatabaseOf<T>::append( const T& r )
{
  dataFile.clear();
  dataFile.seekp(0,ios::end);
  lastIDNumber++;
  r.setID(lastIDNumber);
  r.writeTo(dataFile);
  cfgFile.clear();
  cfgFile.seekg(0);
  cfgFile.write(&lastIDNumber, sizeof(int) );
  cfgFile.flush();
}

@
\subsection{DatabaseOf::del}
<<DatabaseOf::del.h>>=
  void del( int i );
@
<<DatabaseOf::del.c>>=
template <class T>
void  DatabaseOf<T>::del( int i )
{
  int n =  nOfRecords()-1;
  T sr[n];
  goFirst();
  int c = 0;
  while (!done()){
    if ( c!=i ){
      if ( c >= i )
	sr[c-1] = getRecord();
      else
	sr[c] = getRecord();
    } else
      T r = getRecord();
    c++;
  }
  dataFile.close();
  ofstream tmp_out(fileName);
  for (int k=0;k<n;k++){
    sr[k].writeTo(tmp_out);
  }
  tmp_out.close();
  dataFile.open(fileName, ios::in | ios::out);
  if (!dataFile)
    error("Can't open the database");
}

@
\subsection{DatabaseOf::change}
<<DatabaseOf::change.h>>=
  void change( int i,const T& r );
@
<<DatabaseOf::change.c>>=
template <class T>
void  DatabaseOf<T>::change( int i,const T& r )
{
  dataFile.clear();
  dataFile.seekp(i*T::size(),ios::beg);
  r.writeTo(dataFile);
}

@
\subsection{DatabaseOf::nOfRecords}
<<DatabaseOf::nOfRecords.h>>=
  int nOfRecords() const;
@
<<DatabaseOf::nOfRecords.c>>=
template <class T>
int  DatabaseOf<T>::nOfRecords() const
{
  DatabaseOf<T>* pd = (DatabaseOf<T>*)this;
  streampos p = pd->dataFile.tellp();
  pd->dataFile.clear();
  pd->dataFile.seekp(0,ios::end);
  int n = pd->dataFile.tellp() / T::size();
  pd->dataFile.seekp(p,ios::beg);
  return n;
}

@
\subsection{class DatabaseOf}
<<class DatabaseOf>>=
template <class T> class DatabaseOf
{
 public:
<<DatabaseOf Constructor.h>>
<<DatabaseOf Destructor.h>>
<<DatabaseOf::goFirst.h>>
<<DatabaseOf::goTo.h>>
<<DatabaseOf::skip.h>>
<<DatabaseOf::done.h>>
<<DatabaseOf::getRecord.h>>
<<DatabaseOf::append.h>>
<<DatabaseOf::del.h>>
<<DatabaseOf::change.h>>
<<DatabaseOf::nOfRecords.h>>
 private:
  Chars fileName;
  fstream dataFile;
  fstream cfgFile;
  int lastIDNumber;
};

@
\section{class Packages}
\subsection{Packages Constructor}
<<Packages Constructor.h>>=
  Packages() { }
@
\subsection{Packages::PObjects}
<<Packages::PObjects.h>>=
   enum PObjects { GROUP, WORD, SUBGROUP, MAP, HOMO, SUBGROUP_SUBGROUP, 
 		  WORD_WORD, SUBGROUP_WORD };
@
\subsection{Packages::addPackage}
<<Packages::addPackage.h>>=
  void addPackage( const Chars& theName, const Chars& theCommand, Type o, 
		   int t, const ListOf<ParamRecord>& params);
@
<<Packages::addPackage.c>>=
void Packages::addPackage( const Chars& theName, const Chars& theCommand,
			   Type o, int t, const ListOf<ParamRecord>& params)
{
  PObject* po = getPObjectFromType( o );
  Chars dbPath = getPackagePath(po);
  DatabaseOf<PackageRecord> db(dbPath);
  iostream tmp;
  int io;
  tmp << o;
  tmp >> io;
  PackageRecord r( theName, theCommand, t, io);
  db.append(r);
  DatabaseOf<ParamRecord> p_db(getParamPath(po));
  ListIterator<ListOf<ParamRecord> > I(params);
  for ( I.reset();!I.done();I.next() ){
    ParamRecord param = I.value();
    param.setPID(r.getID());
    p_db.append(param);
  }
  delete po;
}

@
\subsection{Packages::deletePackage}
<<Packages::deletePackage.h>>=
  void deletePackage( PObject* o, int i);
@
<<Packages::deletePackage.c>>=
void Packages::deletePackage(  PObject* o,int i)
{
  Chars dbPath = getPackagePath(o);
  DatabaseOf<PackageRecord> db(dbPath);
  db.goTo(i);
  PackageRecord pr = db.getRecord();
  DatabaseOf<ParamRecord> p_db(getParamPath(o));
  ParamRecord param;
  ListOf<int> delList;
  int ii=0;
  for ( p_db.goFirst();!p_db.done(); ii++){
    ParamRecord paramr = p_db.getRecord();
    if (paramr.getPackageID() == pr.getID()){
      delList.append(ii);
      ii--;
    }
  }
  ListIterator<ListOf<int> > I(delList);
  for (I.reset();!I.done();I.next())
    p_db.del(I.value());
  db.del(i);
}

@
\subsection{Packages::getPackage}
<<Packages::getPackage.h>>=
  PackageRecord getPackage( PObject*,int, ListOf<ParamRecord>&);
@
<<Packages::getPackage.c>>=
PackageRecord Packages::getPackage( PObject* o,int id, ListOf<ParamRecord>& params)
{
  Chars dbPath = getPackagePath(o);
  DatabaseOf<PackageRecord> db(dbPath);
  db.goTo(id);
  PackageRecord pr =  db.getRecord();
  DatabaseOf<ParamRecord> p_db(getParamPath(o));
  ParamRecord param;
  for ( p_db.goFirst();!p_db.done(); ){
    ParamRecord paramr = p_db.getRecord();
    if (paramr.getPackageID() == pr.getID())
      params.append(paramr);
  }
  return pr;
}

@
\subsection{Packages::getNOfPackage}
<<Packages::getNOfPackage.h>>=
  int getNOfPackage( PObject* o);
@
<<Packages::getNOfPackage.c>>=
int Packages::getNOfPackage( PObject* o)
{
  Chars dbPath = getPackagePath(o);
  DatabaseOf<PackageRecord> db(dbPath);
  return  db.nOfRecords();
}

@
\subsection{Packages::getPackagePath}
<<Packages::getPackagePath.h>>=
  static Chars getPackagePath(PObject* o);
@
<<Packages::getPackagePath.c>>=
Chars Packages::getPackagePath(PObject* o)
{  
  Chars uniqPart = o->getDBName();
  Chars dbPath = Chars(MagnusHome::magnusHome()) + 
    Chars("/packages/") + uniqPart + Chars(".dat");
  return dbPath;
}

@
\subsection{Packages::getParamPath}
<<Packages::getParamPath.h>>=
  static Chars getParamPath(PObject* o);
@
<<Packages::getParamPath.c>>=
Chars Packages::getParamPath(PObject* o)
{  
  Chars uniqPart = o->getDBName();
  Chars dbPath = Chars(MagnusHome::magnusHome()) + 
    Chars("/packages/") + uniqPart + Chars("_param.dat");
  return dbPath;
}

@
\subsection{Packages::addPackagesToMenu}
<<Packages::addPackagesToMenu.h>>=
  void addPackagesToMenu(  );
@
<<Packages::addPackagesToMenu.c>>=
void Packages::addPackagesToMenu(  )
{
  PGroup().addPackagesToMenu();
  PWord().addPackagesToMenu();
  PSubgroup().addPackagesToMenu();
  PMap().addPackagesToMenu();
  PHomo().addPackagesToMenu();
  PWordWord().addPackagesToMenu();
  PSubgroupSubgroup().addPackagesToMenu();
  PSubgroupWord().addPackagesToMenu();
}

@
\subsection{Packages::printObjectNames}
<<Packages::printObjectNames.h>>=
  static void printObjectNames( ostream& );
@
<<Packages::printObjectNames.c>>=
void Packages::printObjectNames( ostream& out )
{
  out << "{ ";
  PGroup().printObjectName( out );
  PWord().printObjectName( out );
  PSubgroup().printObjectName( out );
  PMap().printObjectName( out );
  PHomo().printObjectName( out );
  PWordWord().printObjectName( out );
  PSubgroupSubgroup().printObjectName( out );
  PSubgroupWord().printObjectName( out );
  out  << "} ";
}

@
\subsection{Packages::printObjectFileNames}
<<Packages::printObjectFileNames.h>>=
  static void printObjectFileNames( ostream& out );
@
<<Packages::printObjectFileNames.c>>=
void Packages::printObjectFileNames( ostream& out )
{
  out << "{ "
      << "{ " << PGroup().ipcFileName( ) << "} "
      << "{ " << PWord().ipcFileName(  )<< "} "
      << "{ " << PSubgroup().ipcFileName(  )<< "} "
      << "{ " << PMap().ipcFileName( )<< "} "
      << "{ " << PHomo().ipcFileName( )<< "} "
      << "{ " << PWordWord().ipcFileName(  )<< "} "
      << "{ " << PSubgroupSubgroup().ipcFileName(  )<< "} "
      << "{ " << PSubgroupWord().ipcFileName(  )<< "} "
      << "} ";
}

@
\subsection{Packages::printCheckinTypes}
<<Packages::printCheckinTypes.h>>=
  static void printCheckinTypes( ostream& );
@
<<Packages::printCheckinTypes.c>>=
void Packages::printCheckinTypes( ostream& out )
{
  out << "{ "
   << "{ {Abelian} " << (int)SMFPGroup::ABELIAN << " } "
   << "{ {Finitely Presented} " <<  (int)SMFPGroup::FP << " } "
   << "{ {Free} " <<  (int)SMFPGroup::FREE << " } "
   << "{ {Nilpotent} " <<  (int)SMFPGroup::NILPOTENT << " } "
   << "{ {Free Nilpotent} " <<  (int)SMFPGroup::FREE_NILPOTENT << " } "
   << "{ {One Relator} " <<  (int)SMFPGroup::ONE_RELATOR << " } "
   << "{ {Small Cancellation} " <<  (int)SMFPGroup::SMALL_CANCELLATION << " } "
   << "} ";
}

@
\subsection{Packages::getCheckinType}
<<Packages::getCheckinType.h>>=
  static SMFPGroup::Checkin_Type getCheckinType( int n );
@
<<Packages::getCheckinType.c>>=
SMFPGroup::Checkin_Type Packages::getCheckinType( int n )
{
 if ((int)SMFPGroup::ABELIAN == n)
    return SMFPGroup::ABELIAN;
  else if((int)SMFPGroup::FP == n)
    return SMFPGroup::FP;
  else if((int)SMFPGroup::FREE == n)
    return SMFPGroup::FREE;
  else if((int)SMFPGroup::NILPOTENT == n)
    return SMFPGroup::NILPOTENT;
  else if((int)SMFPGroup::FREE_NILPOTENT == n)
    return SMFPGroup::FREE_NILPOTENT;
  else if((int)SMFPGroup::ONE_RELATOR == n)
    return SMFPGroup::ONE_RELATOR;
  else if((int)SMFPGroup::SMALL_CANCELLATION == n)
    return SMFPGroup::SMALL_CANCELLATION;
  else
    error("SMFPGroup::Checkin_Type Packages::getCheckinType( int n ) :" 
	  " can't recognize checkin type");
}

@
\subsection{Packages::getCheckinTypeName}
<<Packages::getCheckinTypeName.h>>=
  static Chars getCheckinTypeName( int n );
@
<<Packages::getCheckinTypeName.c>>=
Chars Packages::getCheckinTypeName( int n )
{
 if ((int)SMFPGroup::ABELIAN == n)
    return Chars("Abelian");
  else if((int)SMFPGroup::FP == n)
    return Chars("Finitely presented");
  else if((int)SMFPGroup::FREE == n)
    return Chars("Free");
  else if((int)SMFPGroup::NILPOTENT == n)
    return Chars("Nilpotent");
  else if((int)SMFPGroup::FREE_NILPOTENT == n)
    return Chars("Free nilpotent");
  else if((int)SMFPGroup::ONE_RELATOR == n)
    return Chars("One relator");
  else if((int)SMFPGroup::SMALL_CANCELLATION == n)
    return Chars("Small cancellation");
  else
    error("SMFPGroup::Checkin_Type Packages::getCheckinType( int n ) :" 
	  " can't recognize checkin type");
}

@
\subsection{class Packages}
<<class Packages>>=
class Packages : protected FEData
{
public:
<<Packages::PObjects.h>>
<<Packages Constructor.h>>
<<Packages::addPackage.h>>
<<Packages::deletePackage.h>>
<<Packages::getPackage.h>>
<<Packages::getNOfPackage.h>>
<<Packages::getPackagePath.h>>
<<Packages::getParamPath.h>>
<<Packages::addPackagesToMenu.h>>
<<Packages::printObjectNames.h>>
<<Packages::printObjectFileNames.h>>
<<Packages::printCheckinTypes.h>>
<<Packages::getCheckinType.h>>
<<Packages::getCheckinTypeName.h>>
};

@
\section{license}
Copyright (C) 1994 The New York Group Theory Cooperative
See magnus/doc/COPYRIGHT for the full notice.
@
<<PackagesData.h>>=
// src/packagesdata.pamphlet
<<include.h>>

#ifndef _PackagesData_h_
#define _PackagesData_h_

<<class Record>>
<<struct PackageRecord>>
<<struct ParamRecord>>
<<class DatabaseOf>>
// @am some declaration problem !
template <class A1> class Menu1;

<<class Packages>>
#endif
@
\section{packagesdata.C}
<<*>>=

<<include.c>>
<<Record::setID.c>>

<<PackageRecord::readFrom.c>>
<<PackageRecord::writeTo.c>>

<<ParamRecord::readFrom.c>>
<<ParamRecord::writeTo.c>>

<<DatabaseOf Constructor.c>>
<<DatabaseOf Destructor.c>>
<<DatabaseOf::goFirst.c>>
<<DatabaseOf::goTo.c>>
<<DatabaseOf::skip.c>>
<<DatabaseOf::done.c>>
<<DatabaseOf::getRecord.c>>
<<DatabaseOf::append.c>>
<<DatabaseOf::change.c>>
<<DatabaseOf::del.c>>
<<DatabaseOf::nOfRecords.c>>

<<Packages::getPackagePath.c>>
<<Packages::getParamPath.c>>
<<Packages::addPackage.c>>
<<Packages::getPackage.c>>
<<Packages::deletePackage.c>>
<<Packages::getNOfPackage.c>>
<<Packages::addPackagesToMenu.c>>
<<Packages::printCheckinTypes.c>>
<<Packages::printObjectNames.c>>
<<Packages::printObjectFileNames.c>>
<<Packages::getCheckinType.c>>
<<Packages::getCheckinTypeName.c>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}

