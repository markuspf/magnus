\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/listproblems.pamphlet}
\author{Alexei Myasnikov}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include.h>>=
#include "Supervisor.h"
#include "fastProblems.h"
#include "SMList.h"
#include "SMListIterator.h"
@
<<include.c>>=
#include "ListProblems.h"
#include "OutMessages.h"
#include "SMListIterator.h"

@
\section{class SMListSupervisor}
\subsection{SMListSupervisor Constructor}
<<SMListSupervisor Constructor.h>>=
  SMListSupervisor( SMList<Word>& l )
    : Supervisor( true ),
    theList( l ) { }
@
\subsection{SMListSupervisor::getList}
<<SMListSupervisor::getList.h>>=
  SMList<Word>& getList() { return theList; }
@
\subsection{class SMListSupervisor}
Parent class for supervisors which use general computation managers
like SMListExtractTrivialWords. They need to pass SMList to computation 
manager
<<class SMListSupervisor>>=
class SMListSupervisor :  public Supervisor
{
 public:
<<SMListSupervisor Constructor.h>>
<<SMListSupervisor::getList.h>>
 protected:
  SMList<Word>& theList;
};

@
\section{template class SMListJoinARCer}
\subsection{SMListJoinARCer Constructor}
<<SMListJoinARCer Constructor.h>>=
  SMListJoinARCer( ComputationManager& boss ) 
    : ARCer( boss ),
    l2Data( NULL ), l1Data( NULL ) { } 
@
\subsection{SMListJoinARCer Destructor}
<<SMListJoinARCer Destructor.h>>=
  ~SMListJoinARCer( ) { 
   if (l1Data)
      delete l1Data;
    if (l2Data)
      delete l2Data;
  }
@
\subsection{SMListJoinARCer::setArguments}
<<SMListJoinARCer::setArguments.h>>=
  void setArguments( const SMList<T>&, const SMList<T>& );
@
<<SMListJoinARCer::setArguments.c>>=
template <class T>
void SMListJoinARCer<T>::setArguments( const SMList<T>& l1,
				       const SMList<T>& l2)
{
  l1Data = new SMListData( l1.getData() );
  l2Data = new SMListData( l2.getData() );
}

@
\subsection{SMListJoinARCer::getJoinData}
<<SMListJoinARCer::getJoinData.h>>=
  const SMListData getJoinData() const { return joinData; }
@
\subsection{SMListJoinARCer::runComputation}
<<SMListJoinARCer::runComputation.h>>=
  void runComputation( );
@
<<SMListJoinARCer::runComputation.c>>=
template <class T>
void SMListJoinARCer<T>::runComputation( )
{
#if SAFETY > 0
  if( ! l2Data )
    error( "void WordsOfLengthARCer::runComputation( ) : "
	   "data must be initialized first");
#endif
  l1Data->setReadMode();
  l2Data->setReadMode();
  joinData.setWriteMode();
  for ( int i=0;i < l1Data->numberOfElements(); i++ )
    joinData << EnumWriteChars( l1Data->getElementOf( i ) ) << "\n\n";
  for ( int i=0;i < l2Data->numberOfElements(); i++ )
    joinData << EnumWriteChars( l2Data->getElementOf( i ) ) << "\n\n" ;
  l1Data->closeCurrentMode();
  l2Data->closeCurrentMode();
  joinData.closeCurrentMode();
}

@
\subsection{SMListJoinARCer::writeResults}
<<SMListJoinARCer::writeResults.h>>=
  void writeResults( ostream& );
@
<<SMListJoinARCer::writeResults.c>>=
template <class T>
void SMListJoinARCer<T>::writeResults( ostream& out ) 
{
  out < joinData;
}

@
\subsection{SMListJoinARCer::readResults}
<<SMListJoinARCer::readResults.h>>=
  void readResults( istream& );
@
<<SMListJoinARCer::readResults.c>>=
template <class T>
void SMListJoinARCer<T>::readResults( istream& in )
{
  in > joinData;
}

@
\subsection{template class SMListJoinARCer}
<<template class SMListJoinARCer>>=
template <class T>
class SMListJoinARCer : public ARCer
{
public:
<<SMListJoinARCer Constructor.h>>
<<SMListJoinARCer Destructor.h>>
<<SMListJoinARCer::setArguments.h>>
<<SMListJoinARCer::getJoinData.h>>
<<SMListJoinARCer::runComputation.h>>
<<SMListJoinARCer::writeResults.h>>
<<SMListJoinARCer::readResults.h>>
private:
  // FPGroup theGroup;
  SMListData* l1Data;
  SMListData* l2Data;
  SMListData joinData;
};

@
\section{template class SMListJoin}
\subsection{SMListJoin Constructor}
<<SMListJoin Constructor.h>>=
  SMListJoin( SMList<T>&, SMList<T>& );
@
<<SMListJoin Constructor.c>>=
template <class T>
SMListJoin<T>::SMListJoin( SMList<T>& sml1,SMList<T>& sml2 )
  : Supervisor( true ),
    list1( sml1 ),
    list2( sml2 ),
    arcer(*this),
    started( false )
{ 
  arcer.setArguments(sml1,sml2);
}

@
\subsection{SMListJoin::viewStructure}
<<SMListJoin::viewStructure.h>>=
  void viewStructure(ostream& ostr) const;  // overrides SMObject
@
<<SMListJoin::viewStructure.c>>=
template <class T>
void SMListJoin<T>::viewStructure(ostream& ostr) const
{
  ProblemView pv( ostr, oid(),Text("Compute the join of two lists"),
		  Text("Compute the join of") + Name(list1) +Text("and")+
		  Name(list2),
		  helpID("SMListJoin",
			 list1.getGroup()),
		  Text("join of lists")
		  );
  pv.startItemGroup();
  pv.add( Text("For the use of this problem"), ThisARCSlotID(), 50 );
  pv.done();
}

@
\subsection{SMListJoin::takeControl}
<<SMListJoin::takeControl.h>>=
  void takeControl( );         // overrides ComputationManager
@
<<SMListJoin::takeControl.c>>=
template <class T>
void SMListJoin<T>::takeControl( )
{
  if (freeARCs() > 0){
    if (arcer.takeControl()){
      Chars view_window_name;
      if ( T::type() == Word::type() ){
	view_window_name = "WEnumerator";
      } else if ( T::type() == Map::type() ){
	view_window_name = "RandomAutomorphisms";
      } else if ( T::type() == Subgroup::type() ){
	view_window_name = "SGEnumerator";
      } 
      SMList<T>* smo = 
	new  SMList<T>(list1.getGroup(),
		       arcer.getJoinData(),
		       Text("Join of") + Name(list1) +
		       Text("and") + Name(list2)
		       ); 
      ListOf<OID> dependencies( smo->getGroup() );
      CheckinMessage( *smo, "", dependencies ).send();
      LogMessage msg( *smo );
      msg << Link( Chars("Click here to see the contents of ") + 
		   Text( Name( *smo) ),
		   view_window_name,
		   smo->getData().getDataFileName() 
		   );
      msg << ".";
      msg.send();
      adminTerminate();
      return;
    } else
      usedOneARC();
  }
}

@
\subsection{SMListJoin::start}
<<SMListJoin::start.h>>=
  void start( ) { }
@
\subsection{SMListJoin::terminate}
<<SMListJoin::terminate.h>>=
  void terminate( ) { }        // overrides ComputationManager
@
\subsection{template class SMListJoin}
<<template class SMListJoin>>=
template <class T> class SMListJoin  : public Supervisor
{
public:
<<SMListJoin Constructor.h>>
<<SMListJoin::viewStructure.h>>
<<SMListJoin::takeControl.h>>
<<SMListJoin::start.h>>
<<SMListJoin::terminate.h>>
private:
  SMList<T>& list1;
  SMList<T>& list2;
  bool started;
  SMListJoinARCer<T> arcer;

};

@
\section{template class MakeSMListOf}
\subsection{MakeSMListOf Constructor}
<<MakeSMListOf Constructor.h>>=
  MakeSMListOf( EnumeratorProblem<T>& e): enumerator( e ) { }
@
\subsection{MakeSMListOf::takeControl}
<<MakeSMListOf::takeControl.h>>=
  void takeControl( );              // overrides ComputationManager
@
<<MakeSMListOf::takeControl.c>>=
template <class T>
void MakeSMListOf<T>::takeControl()
{
  // Some specific type attributes
  Chars elements;
  Chars view_window_name;
  if ( T::type() == Word::type() ){
    elements = "words";
    view_window_name = "WEnumerator";
  } else if ( T::type() == Map::type() ){
    elements = "maps";
    view_window_name = "RandomAutomorphisms";
  } else if ( T::type() == Subgroup::type() ){
    elements = "subgroups";
    view_window_name = "SGEnumerator";
  }
  SMList<T>* smo = 
    new   SMList<T>(enumerator,
		       Chars("List of ")+elements+Chars(" from \\\"") + 
		       Chars(Text(Name(enumerator)))+Chars("\\\"")
		       ); 
  ListOf<OID> dependencies( smo->getGroup() );
  CheckinMessage( *smo, "", dependencies ).send();
  // enumerator.getParentObject().addDependent( smo->oid() );
  LogMessage msg( *smo );
  msg << Link( Chars("Click here to see the contents of ") + 
	       Text( Name( *smo) ),
	       view_window_name,
	       smo->getData().getDataFileName() 
	       );
  msg << ".";
  msg.send();
  LogMessage msg1( *smo );
  msg1 << "There are " << smo->getData().numberOfElements() 
       << " items in " << Name( *smo ) << ".";
  msg1.send();
}

@
\subsection{template class MakeSMListOf}
<<template class MakeSMListOf>>=
template <class T> class MakeSMListOf : public FastComputation
{
public:
<<MakeSMListOf Constructor.h>>
<<MakeSMListOf::takeControl.h>>
protected:
  EnumeratorProblem<T>& enumerator;
};

@
\section{class SMListCheckerARCer}
\subsection{SMListCheckerARCer Constructor}
<<SMListCheckerARCer Constructor.h>>=
  SMListCheckerARCer( ComputationManager& boss, char* sb, int l ) 
    : ARCer( boss ), theBuffer( sb ),bufferLength( l ) { } 
@
\subsection{SMListCheckerARCer::getElementInBuffer}
<<SMListCheckerARCer::getElementInBuffer.h>>=
  char getElementInBuffer( int ) const;
@
<<SMListCheckerARCer::getElementInBuffer.c>>=
/*
char SMListCheckerARCer::getElementInBuffer( int i ) const
{
#if ( SAFETY > 0 )
  if ( i < 0 || i >= bufferLength ) 
    error("char SMListCheckerARCer::getElementInBuffer( int i ) const:"
	  " index out of bounds");
#endif
  return theBuffer[i];
}
*/

@
\subsection{SMListCheckerARCer::setElementInBuffer}
<<SMListCheckerARCer::setElementInBuffer.h>>=
  void setElementInBuffer( int, char );
@
<<SMListCheckerARCer::setElementInBuffer.c>>=
/*  
void SMListCheckerARCer::setElementInBuffer( int i, char ch )
{
#if ( SAFETY > 0 )
  if ( i < 0 || i >= bufferLength ) 
    error("char SMListCheckerARCer::getElementInBuffer( int i ) const:"
	  " index out of bounds");
#endif
  theBuffer[i] = ch;  
}

*/

@
\subsection{SMListCheckerARCer::bLength}
<<SMListCheckerARCer::bLength.h>>=
  int bLength() const { return bufferLength; }
@
\subsection{class SMListCheckerARCer}
<<class SMListCheckerARCer>>=
/*
class SMListCheckerARCer : public ARCer
{
public:
<<SMListCheckerARCer Constructor.h>>
<<SMListCheckerARCer::getElementInBuffer.h>>
<<SMListCheckerARCer::setElementInBuffer.h>>
<<SMListCheckerARCer::bLength.h>>
private:
  char* theBuffer;
  int bufferLength;
};

*/
@
\section{ListProblems.h}
<<ListProblems.h>>=
#ifndef _LIST_PROBLEMS_H_
#define _LIST_PROBLEMS_H_

<<include.h>>
<<class SMListSupervisor>>
<<template class SMListJoinARCer>>
<<template class SMListJoin>>
<<template class MakeSMListOf>>
#endif
@
\section{listproblems.c}
<<*>>=
 
<<include.c>>
<<SMListJoinARCer::setArguments.c>>
<<SMListJoinARCer::runComputation.c>>
<<SMListJoinARCer::writeResults.c>>
<<SMListJoinARCer::readResults.c>>

<<SMListJoin Constructor.c>>
<<SMListJoin::takeControl.c>>
<<SMListJoin::viewStructure.c>>

<<MakeSMListOf::takeControl.c>>

template class SMListJoin<Word>;
template class SMListJoin<Subgroup>;
template class SMListJoin<Map>;
template class SMListJoinARCer<Word>;
template class SMListJoinARCer<Subgroup>;
template class SMListJoinARCer<Map>;

template class MakeSMListOf<Word>;
template class MakeSMListOf<Subgroup>;
template class MakeSMListOf<Map>;
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
