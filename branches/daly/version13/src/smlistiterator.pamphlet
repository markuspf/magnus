\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/smlistiterator.pamphlet}
\author{Alexei Myasnikov}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include.h>>=
#include "SMList.h"
#include "Word.h"
#include "SMEnumerator.h"

@
<<include.c>>=
#include "SMEnumerator.h"
#include "SMList.h"
#include "SMListIterator.h"
#include "Subgroup.h"
#include "Timer.h"
#include "MagnusHome.h"
#include "Map.h"
#include "conversions.h"

@
\section{template class SMListIterator}
\subsection{SMListIterator Constructor}
<<SMListIterator Constructor.h>>=
  SMListIterator(const SMList<T>& );
@
<<SMListIterator Constructor.c>>=
template <class T>
SMListIterator<T>::SMListIterator(const SMList<T>& l)
: theData( l.getData() ) ,
  theGroup( l.getGroup().getFPGroup() ),
  currentData( NULL ),
  eol_reached( false ),
  numberOfCurrent( 0 )
{
  theData.setReadMode();
  nextCell();  
}

@
\subsection{SMListIterator Destructor}
<<SMListIterator Destructor.h>>=
  ~SMListIterator() { 
    theData.closeCurrentMode();
    if ( currentData )
      delete currentData;
  }
@
\subsection{SMListIterator::EOL}
<<SMListIterator::EOL.h>>=
  bool EOL() const { return eol_reached; }
@
\subsection{SMListIterator::reset}
<<SMListIterator::reset.h>>=
  void reset(); 
@
<<SMListIterator::reset.c>>=
template <class T>
void SMListIterator<T>::reset(){ 
  theData.setReadMode();
  numberOfCurrent = 0;
  eol_reached = false;
  nextCell();  
}

@
\subsection{SMListIterator::nextCell}
<<SMListIterator::nextCell.h>>=
  bool nextCell();
@
<<SMListIterator::nextCell.c>>=
template <class T>
bool SMListIterator<T>::nextCell()
{
  if ( eol_reached )
    return false;
  if ( numberOfCurrent >= getNumberOfElements() ){
    eol_reached = true;
    return false;
  }
  numberOfCurrent++;
  deleteCurrentData();
  return true;   
}

@
\subsection{SMListIterator::getData}
<<SMListIterator::getData.h>>=
  const T& getData(); 
@
<<SMListIterator::getData.c>>=
template <class T>
const T& SMListIterator<T>::getData() 
{ 
  if ( !currentData )
    parseData();
  
  return *currentData; 
}

@
\subsection{SMListIterator::getNumberOfElements}
<<SMListIterator::getNumberOfElements.h>>=
  int getNumberOfElements()const { return theData.numberOfElements(); }
@
\subsection{SMListIterator::deleteCurrentData}
<<SMListIterator::deleteCurrentData.h>>=
  void deleteCurrentData();
@
<<SMListIterator::deleteCurrentData.c>>=
template <class T>
void SMListIterator<T>::deleteCurrentData()
{
  if ( currentData ) {
    delete currentData;  
    currentData = NULL;
  }
  currentLine = "";
}

@
\subsection{SMListIterator::parseData}
<<SMListIterator::parseData.h>>=
  void parseData();
@
<<SMListIterator::parseData.c.1>>=
void SMListIterator<Word>::parseData()
{
  if (currentLine.length() == 0 ){
    currentLine = theData.getElementOf( numberOfCurrent-1 );
  }
  if (currentLine.length() > 0 ) {
    istrstream is( currentLine );
    Chars errM;
    Word w = theGroup.readWord( is,errM );
    if (errM.length() > 0) 
      error("void SMListFileIterator<Word>::parseData() :"
	    "couldn't read a word from the list.");
    deleteCurrentData();
    currentData = new Word(w.freelyReduce());
  } else 
    error("void SMListFileIterator<Word>::parseData() :"
	  "can't parse a word from the empty string.");   
}

@
<<SMListIterator::parseData.c.2>>=
void SMListIterator<Map>::parseData()
{
  if (currentLine.length() == 0 ){
    currentLine = theData.getElementOf( numberOfCurrent-1 );
  }
  if (currentLine.length() > 0 ) {
    Map m( theGroup,theGroup );
    istrstream is( currentLine );
    Chars errM = is >> m;  
    if (errM.length() > 0) 
      error(Chars("void SMListFileIterator<Map>::parseData() :"
		  "couldn't read a map from the list.")+errM ); 
    deleteCurrentData();
    currentData = new Map( m );
  } else 
    error("void SMListFileIterator<Map>::parseData() :" 
	  "can't parse a word from the empty string.");     
}
 
@
<<SMListIterator::parseData.c.3>>=
void SMListIterator<Subgroup>::parseData()
{
  if (currentLine.length() == 0 ){
    currentLine = theData.getElementOf( numberOfCurrent-1 );
  }
  if (currentLine.length() > 0 ) {
    // @am Chars' operators were written by some ...
    //    Chars tmpChars = Chars('{') + currentLine + Chars('}');
    istrstream is( currentLine );
    Chars errM;  
    SetOf<Word> s = theGroup.readSetOfWords(is, errM);
    if (errM.length() > 0) 
      error(Chars("void SMListFileIterator<Subgroup>::parseData() :"
		  "couldn't read a set of words from the list.")+errM ); 
    deleteCurrentData();
    currentData = new Subgroup( theGroup, s );
  } else 
    error("void SMListFileIterator<Subgroup>::parseData() :" 
	  "can't parse a word from the empty string.");     
}

@
\subsection{template class SMListIterator}
<<template class SMListIterator>>=
template <class T> class SMListIterator {
public:
<<SMListIterator Constructor.h>>
<<SMListIterator Destructor.h>>
<<SMListIterator::EOL.h>>
<<SMListIterator::reset.h>>
<<SMListIterator::nextCell.h>>
<<SMListIterator::getData.h>>
<<SMListIterator::getNumberOfElements.h>>
private:
<<SMListIterator::deleteCurrentData.h>>
<<SMListIterator::parseData.h>>
  Chars currentLine;
  T* currentData;
  FPGroup theGroup;
  int numberOfCurrent;
  SMListData theData;
  bool eol_reached;
};

@
\section{class WriteEnumeratorElement}
\subsection{WriteEnumeratorElement Constructor}
<<WriteEnumeratorElement Constructor.h>>=
  WriteEnumeratorElement() {}
@
\subsection{WriteEnumeratorElement::print}
<<WriteEnumeratorElement::print.h>>=
  virtual void print(ostream& ostr) const = 0;
@
\subsection{WriteEnumeratorElement operator}
<<WriteEnumeratorElement operator output>>=
  inline friend ostream& operator << ( ostream& o, 
				       const WriteEnumeratorElement& we ) {
//    o << we.position << ":" << "$D" << " " ;
    we.print( o );
    return o;
  }
@
\subsection{WriteEnumeratorElement::WriteEnumeratorElement}
<<WriteEnumeratorElement::WriteEnumeratorElement>>=
  WriteEnumeratorElement(const WriteEnumeratorElement&);
@
\subsection{class WriteEnumeratorElement}
<<class WriteEnumeratorElement>>=
class WriteEnumeratorElement
{
public:
<<WriteEnumeratorElement Constructor.h>>
<<WriteEnumeratorElement::print.h>>
<<WriteEnumeratorElement operator output>>
private:
<<WriteEnumeratorElement::WriteEnumeratorElement>>
};

@
\section{class EnumWriteWord}
\subsection{EnumWriteWord Constructor}
<<EnumWriteWord Constructor.h>>=
  EnumWriteWord( const Word& w, const FPGroup& g) 
    :  theW( w ), theG( g ) { }
@
\subsection{EnumWriteWord::print}
<<EnumWriteWord::print.h>>=
  void print( ostream& o ) const;
@
<<EnumWriteWord::print.c>>=
void EnumWriteWord::print( ostream& o ) const
{
  theG.printWord( o,theW );
  //  o << endl << endl;
}

@
\subsection{class EnumWriteWord}
<<class EnumWriteWord>>=
class EnumWriteWord : public WriteEnumeratorElement
{
public:
<<EnumWriteWord Constructor.h>>
<<EnumWriteWord::print.h>>
private:
  Word theW;
  FPGroup theG;
};

@
\section{class EnumWriteMap}
\subsection{EnumWriteMap Constructor}
<<EnumWriteMap Constructor.h>>=
  EnumWriteMap( const Map& m ) 
    : theM( m ) { }
@
\subsection{EnumWriteMap::print}
<<EnumWriteMap::print.h>>=
  void print( ostream& o ) const;
@
<<EnumWriteMap::print.c>>=
void EnumWriteMap::print( ostream& o ) const
{
  o <<"{" << endl;
  theM.printOn(o);
  o << endl << "}";
}

@
\subsection{class EnumWriteMap}
<<class EnumWriteMap>>=
class EnumWriteMap : public WriteEnumeratorElement
{
public:
<<EnumWriteMap Constructor.h>>
<<EnumWriteMap::print.h>>
private:
  Map theM;
};

@
\section{class EnumWriteVectorOfWords}
\subsection{EnumWriteVectorOfWords Constructor}
<<EnumWriteVectorOfWords Constructor.h>>=
  EnumWriteVectorOfWords( const VectorOf<Word>& v, const FPGroup& g ) 
    : theV( v ),
    theG( g )
    { }
@
\subsection{EnumWriteVectorOfWords::print}
<<EnumWriteVectorOfWords::print.h>>=
  void print( ostream& o ) const;
@
<<EnumWriteVectorOfWords::print.c>>=
void EnumWriteVectorOfWords::print( ostream& o ) const
{
  int numberOfGens = theV.length();
  int i;
  o << '{' << endl;
  for (i = 0; i< numberOfGens; i++){
    if ( theV[i].length() > 0 ){
      theG.printWord( o, theV[i] );
      if ( i <  numberOfGens -1 )
	o <<  ',' << endl << endl;
    }
  }
  o << endl << '}';
}

@
\subsection{class EnumWriteVectorOfWords}
<<class EnumWriteVectorOfWords>>=
class EnumWriteVectorOfWords : public WriteEnumeratorElement
{
public:
<<EnumWriteVectorOfWords Constructor.h>>
<<EnumWriteVectorOfWords::print.h>>
private:
  VectorOf<Word> theV;
  FPGroup theG;
};

@
\section{class EnumWriteSetOfWords}
\subsection{EnumWriteSetOfWords Constructor}
<<EnumWriteSetOfWords Constructor.h>>=
  EnumWriteSetOfWords( const SetOf<Word>& s, const FPGroup& g ) 
    : theS( s ),
    theG( g )
    { }
@
\subsection{EnumWriteSetOfWords::print}
<<EnumWriteSetOfWords::print.h>>=
  void print( ostream& o ) const;
@
<<EnumWriteSetOfWords::print.c>>=
void EnumWriteSetOfWords::print( ostream& o ) const
{
  SetIterator<Word> I( theS );
  int numberOfGens = theS.cardinality();
  int i;

  if ( numberOfGens == 0 )
    error("EnumWriteSetOfWords::print( ostream& o ) const : "
	  " cannot write empty set.");

  o << '{' << endl;
  for (i = 0,I.reset();!I.done(); I.next(),i++){
    if ( I.value().length() > 0 ){
      theG.printWord(o, I.value());
      if ( i <  numberOfGens -1 )
	o <<  ',' << endl << endl;
    }
  }
  o << endl << '}' << endl;
}

@
\subsection{class EnumWriteSetOfWords}
<<class EnumWriteSetOfWords>>=
class EnumWriteSetOfWords : public WriteEnumeratorElement
{
public:
<<EnumWriteSetOfWords Constructor.h>>
<<EnumWriteSetOfWords::print.h>>
private:
  SetOf<Word> theS;
  FPGroup theG;
};

@
\section{class EnumWriteChars}
\subsection{EnumWriteChars Constructor}
<<EnumWriteChars Constructor.h>>=
  EnumWriteChars( const Chars& c ) 
    : theC( c )
    { }
@
\subsection{EnumWriteChars::print}
<<EnumWriteChars::print.h>>=
  void print( ostream& o ) const;
@
<<EnumWriteChars::print.c>>=
void EnumWriteChars::print( ostream& o ) const
{
  o << theC;
}

@
\subsection{class EnumWriteChars}
<<class EnumWriteChars>>=
class EnumWriteChars : public WriteEnumeratorElement
{
public:
<<EnumWriteChars Constructor.h>>
<<EnumWriteChars::print.h>>
private:
  Chars theC;
};

@
\section{SMListIterator.h}
<<SMListIterator.h>>=
#ifndef _SMLIST_ITERATOR_H_
#define _SMLIST_ITERATOR_H_

<<include.h>>
<<template class SMListIterator>>
<<class WriteEnumeratorElement>>
<<class EnumWriteWord>>
<<class EnumWriteMap>>
<<class EnumWriteVectorOfWords>>
<<class EnumWriteSetOfWords>>
<<class EnumWriteChars>>
#endif
@
\section{smlistiterator.c}
<<*>>=

<<include.c>>
<<SMListIterator Constructor.c>>
<<SMListIterator::getData.c>>
<<SMListIterator::deleteCurrentData.c>>
<<SMListIterator::reset.c>>
<<SMListIterator::nextCell.c>>
<<SMListIterator::parseData.c.1>>
<<SMListIterator::parseData.c.2>>
<<SMListIterator::parseData.c.3>>
template class SMListIterator<Word>;
template class SMListIterator<Subgroup>;
template class SMListIterator<Map>;

<<EnumWriteWord::print.c>>
<<EnumWriteMap::print.c>>
<<EnumWriteVectorOfWords::print.c>>
<<EnumWriteSetOfWords::print.c>>
<<EnumWriteChars::print.c>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
