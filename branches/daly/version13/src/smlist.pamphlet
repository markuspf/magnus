\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SessionManager/include/SMList.h}
\author{Alexei Myasnikov}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include.h>>=
#include "AlgebraicObject.h"
#include "SMFPGroup.h"
#include "Word.h"
#include "Associations.h"
#include "SMEnumerator.h"

@
<<include.c>>=
#include "SMEnumerator.h"
#include "SMSubgroup.h"
#include "Subgroup.h"
#include "Timer.h"
#include "AutoEnumerator.h"
#include "SMList.h"
#include "SMListIterator.h"
#include "MagnusHome.h"
#include <sys/mman.h>
#include <fcntl.h>

@
\section{template class SMListType}
\subsection{SMListType Constructor}
<<SMListType Constructor.h>>=
  SMListType() {
    ostrstream ostr;
    ostr << "SMList" << T::type() << '\0' << flush;
    strcpy(s, ostr.str());
  }
@
\subsection{template class SMListType}
<<template class SMListType>>=
template <class T>  class SMListType {
public:
<<SMListType Constructor.h>>
private:
  friend class SMList<T>;
  char s[100];
};

@
\section{class LIC}
\subsection{LIC Constructor}
<<LIC Constructor.h>>=
  LIC( OID, int );
@
<<LIC Constructor.c>>=
LIC::LIC(OID list_oid, int num) :
  listOID( list_oid ),
  number_of_elements( num ),
  wpStatus( NULL ),
  abStatus( NULL ),
  centStatus( NULL )
{
  wpStatus = new status_type( num );
  abStatus = new status_type( num );
  centStatus = new status_type( num );
}

@
\subsection{LIC Destructor}
<<LIC Destructor.h>>=
  ~LIC( );
@
<<LIC Destructor.c>>=
LIC::~LIC( )
{
  if ( wpStatus != NULL )
    delete wpStatus;
  if ( abStatus != NULL )
    delete abStatus;
  if ( centStatus != NULL )
    delete centStatus;
}

@
\subsection{LIC::getTrivialStatus}
<<LIC::getTrivialStatus.h.1>>=
  Trichotomy getTrivialStatus( int, GIC::AlgorithmID&, Chars& ) const;
@
pseudo constant function
<<LIC::getTrivialStatus.c.1>>=
Trichotomy LIC::getTrivialStatus( int i, GIC::AlgorithmID& al, Chars& e) const
{
  Trichotomy ret = wpStatus->getStatus( i, al );
  if ( ret != dontknow )
    e = explanation( al );
  return ret;
}

@
<<LIC::getTrivialStatus.h.2>>=
  Trichotomy getTrivialStatus( int i ) const {
    GIC::AlgorithmID al;
    Chars s;
    return getTrivialStatus( i, al, s );
  }
@
\subsection{LIC::setTrivialStatus}
<<LIC::setTrivialStatus.h>>=
  void setTrivialStatus( int i, Trichotomy is_trivial, 
			 GIC::AlgorithmID al = GIC::NONE  );
@
<<LIC::setTrivialStatus.c>>=
void LIC::setTrivialStatus( int i, Trichotomy is_trivial,GIC::AlgorithmID al )
{
  wpStatus->setStatus( i, is_trivial, al );
}

@
\subsection{LIC::IsTrivialChecked}
<<LIC::IsTrivialChecked.h>>=
  bool IsTrivialChecked() const;
@
<<LIC::IsTrivialChecked.c>>=
bool LIC::IsTrivialChecked() const
{
  return wpStatus->isChecked();
}

@
\subsection{LIC::hasTrivialStatusBuffer}
<<LIC::hasTrivialStatusBuffer.h>>=
  bool hasTrivialStatusBuffer() const;
@
<<LIC::hasTrivialStatusBuffer.c>>=
bool LIC::hasTrivialStatusBuffer( ) const
{
    if ( wpStatus != NULL )
         return true;
    else
         return false;
}

@
\subsection{LIC::putIsTrivialFiles}
<<LIC::putIsTrivialFiles.h>>=
  void putIsTrivialFiles( const Chars& is_trivial,
			const Chars& is_not_trivial ){
    isTrivialFName = is_trivial;
    isNonTrivialFName = is_not_trivial;
  }
@
\subsection{LIC::getListOfTrivial}
<<LIC::getListOfTrivial.h>>=
  Chars getListOfTrivial() const { return isTrivialFName; }
@
\subsection{LIC::getListOfNonTrivial}
<<LIC::getListOfNonTrivial.h>>=
  Chars getListOfNonTrivial() const { return isNonTrivialFName; }
@
\subsection{LIC::getAbelianStatus}
<<LIC::getAbelianStatus.h.1>>=
  Trichotomy getAbelianStatus( int, GIC::AlgorithmID&, Chars& ) const;
@
<<LIC::getAbelianStatus.c.1>>=
Trichotomy LIC::getAbelianStatus( int i, GIC::AlgorithmID& al, Chars& e) const
{
  Trichotomy ret = abStatus->getStatus( i, al );
  if ( ret != dontknow )
    e = explanation( al );
  return ret;
}

@
<<LIC::getAbelianStatus.h.2>>=
  Trichotomy getAbelianStatus( int i ) const {
    GIC::AlgorithmID al;
    Chars s;
    return getAbelianStatus( i, al, s );
  }
@
\subsection{LIC::setAbelianStatus}
<<LIC::setAbelianStatus.h>>=
  void setAbelianStatus( int i, Trichotomy is_abelian, 
			 GIC::AlgorithmID al = GIC::NONE  );
@
<<LIC::setAbelianStatus.c>>=
void LIC::setAbelianStatus( int i, Trichotomy is_abelian,GIC::AlgorithmID al )
{
  abStatus->setStatus( i, is_abelian, al );
}

@
\subsection{LIC::IsAbelianChecked}
<<LIC::IsAbelianChecked.h>>=
  bool IsAbelianChecked() const;
@
<<LIC::IsAbelianChecked.c>>=
bool LIC::IsAbelianChecked() const
{
  return abStatus->isChecked();
}

@
\subsection{LIC::hasAbelianStatusBuffer}
<<LIC::hasAbelianStatusBuffer.h>>=
  bool hasAbelianStatusBuffer( ) const;
@
<<LIC::hasAbelianStatusBuffer.c>>=
bool LIC::hasAbelianStatusBuffer( ) const
{
    if ( abStatus != NULL )
      return true;
    else
      return false;
}

@
\subsection{LIC::putAbelianFiles}
<<LIC::putAbelianFiles.h>>=
  void putAbelianFiles( const Chars& is_abelian,
			const Chars& is_not_abelian ){
    isAbelianFName = is_abelian;
    isNonAbelianFName = is_not_abelian;
  }
@
\subsection{LIC::getListOfAbelian}
<<LIC::getListOfAbelian.h>>=
  Chars getListOfAbelian() const { return isAbelianFName; }
@
\subsection{LIC::getListOfNonAbelian}
<<LIC::getListOfNonAbelian.h>>=
  Chars getListOfNonAbelian() const { return isNonAbelianFName; }
@
\subsection{LIC::getIsCentralStatus}
<<LIC::getIsCentralStatus.h.1>>=
  Trichotomy getIsCentralStatus( int, GIC::AlgorithmID&, Chars& ) const;
@
<<LIC::getIsCentralStatus.c.1>>=
Trichotomy LIC::getIsCentralStatus( int i, GIC::AlgorithmID& al, Chars& e) const
{
  Trichotomy ret = centStatus->getStatus( i, al );
  if ( ret != dontknow )
    e = explanation( al );
  return ret;
}

@
\subsection{LIC::getIsCentralStatus}
<<LIC::getIsCentralStatus.h.2>>=
  Trichotomy getIsCentralStatus( int i ) const {
    GIC::AlgorithmID al;
    Chars s;
    return getIsCentralStatus( i, al, s );
  }
@
\subsection{LIC::setIsCentralStatus}
<<LIC::setIsCentralStatus.h>>=
  void setIsCentralStatus( int i, Trichotomy is_abelian, 
			 GIC::AlgorithmID al = GIC::NONE  );
@
<<LIC::setIsCentralStatus.c>>=
void LIC::setIsCentralStatus(int i, Trichotomy is_central,GIC::AlgorithmID al)
{
  centStatus->setStatus( i, is_central, al );
}

@
\subsection{LIC::IsCentralChecked}
<<LIC::IsCentralChecked.h>>=
  bool IsCentralChecked() const;
@
<<LIC::IsCentralChecked.c>>=
bool LIC::IsCentralChecked() const
{
  return centStatus->isChecked();
}

@
\subsection{LIC::hasIsCentralStatusBuffer}
<<LIC::hasIsCentralStatusBuffer.h>>=
  bool hasIsCentralStatusBuffer( ) const;
@
<<LIC::hasIsCentralStatusBuffer.c>>=
bool LIC::hasIsCentralStatusBuffer( ) const
{
    if ( centStatus != NULL )
      return true;
    else
      return false;
}

@
\subsection{LIC::putIsCentralFiles}
<<LIC::putIsCentralFiles.h>>=
  void putIsCentralFiles( const Chars& is_central,
			  const Chars& is_not_central ){
    isCentralFName = is_central;
    isNonCentralFName = is_not_central;
  }
@
\subsection{LIC::getListOfCentral}
<<LIC::getListOfCentral.h>>=
  Chars getListOfCentral() const { return isCentralFName; }
@
\subsection{LIC::getListOfNonCentral}
<<LIC::getListOfNonCentral.h>>=
  Chars getListOfNonCentral() const { return isNonCentralFName; }
@
\subsection{LIC::numberOfElements}
<<LIC::numberOfElements.h>>=
  int numberOfElements() const { return number_of_elements; }
@
\subsection{LIC::explanation}
<<LIC::explanation.h>>=
  Chars explanation( GIC::AlgorithmID ) const;
@  
<<LIC::explanation.c>>=
Chars LIC::explanation( GIC::AlgorithmID a) const
{
  Chars ret = "";
  if ( a == GIC::NORM_CLOSURE ) {
    ret =  "labels loop in normal closure approximation";
    
  } else if ( a == GIC::AB_INV ) {
    //    if ( theList->getGroup().gic.isAbelian() == yes ) 
    //  ret =  "this follows from the canonical decomposition";
    // else
      ret =  "this follows from an inspection of the "
	"abelianization of the group";   

  } else if ( a == GIC::REWR_SYSTEM ) {
    ret =  "according to the confluent rewriting system";

  } else if ( a == GIC::AUT_STRUCTURE ) {
    ret = "according to the difference machine";
    
 } else if ( a == GIC::GENETIC ) {
    ret =  "according to the genetic algorithm";

 } else if ( a == GIC::FREE ) {
    ret = "";
    
 } else {
   error("Chars SMListWPPrinResultArcer::explanation( GIC::AlgorithmID a) :"
	 " improper algorithm ID.");
 }
  if ( ret.length() > 0 )
    ret +=".";
  return ret;
}

@
\subsection{struct status}
\subsubsection{LIC::status_type Constructor}
<<LIC::status_type Constructor.h>>=
    status_type( int );
@
<<LIC::status_type Constructor.c>>=
LIC::status_type::status_type( int s ):
  size( s ),
  status_buffer( NULL )
{
#if ( SAFETY > 0 )
  if ( status_buffer != NULL )
    error("LIC::status_type::status_type( int s ):"
	  " buffer has been initialized already");
#endif
  /* 20031017000 tpd change tmpnam to mkstemp */
  static char lic[] = "licXXXXXX";
  char *licname;
  licname = (char *)(malloc(10));
  strncpy(licname,lic,10);
  FILE *f = NULL;
  if ((f=(FILE *)mkstemp(licname))==0){
    fprintf(stderr,"Error: cannot open file %s\n",licname);
    exit(1);
  }
  else fclose(f);
  status_file = open(licname,O_RDWR | O_CREAT, S_IWUSR | S_IRUSR  );
  if ( status_file < 0 )
    error("LIC::status_type::status_type( int s ):"
	  "error couldn't open a file.");
  int c = 0;
  // 20030630000 TPD rename s to ss so we don't cover the parameter name
  char ss[1];
  ss[0] = '\0';
  for ( int i = 0;i<size ;i++)
    c += write(status_file,ss,1);
  free(licname);
  status_buffer = (char*)mmap(0, size, 
			      PROT_READ | PROT_WRITE, MAP_SHARED, 
			      status_file, 0); 
  if ( status_buffer < 0 )
    error("LIC::status_type::status_type( int s ) :"
	  "error couldn't map the file.");
}

@
\subsubsection{LIC::status_type Destructor}
<<LIC::status_type Destructor.h>>=
    ~status_type();
@
<<LIC::status_type Destructor.c>>=
LIC::status_type::~status_type()
{
  if ( status_buffer != NULL ) {
    munmap(status_buffer, size );
    close( status_file );
  }
}

@
\subsubsection{LIC::status_type::getStatus}
<<LIC::status_type::getStatus.h>>=
    Trichotomy getStatus( int, GIC::AlgorithmID& ) const;
@
<<LIC::status_type::getStatus.c>>=
Trichotomy LIC::status_type::getStatus( int i, GIC::AlgorithmID& al ) const
{
#if ( SAFETY > 0 )
  if ( i < 0 || i >= size ) 
    error(" LIC::status_type::getStatus( int, GIC::AlgorithmID&, Chars& ) :"
	  " index out of bounds");
#endif
  if ( status_buffer[i] == '\0' )
    return dontknow;
  if ( status_buffer[i] > 0 ){
    al = GIC::AlgorithmID( status_buffer[i] );
    return yes;
  } else {
    al = GIC::AlgorithmID( -status_buffer[i] );
    return no;
  }  
}

@
\subsubsection{LIC::status_type::setStatus}
<<LIC::status_type::setStatus.h>>=
    void setStatus( int i, Trichotomy is_abelian, 
		    GIC::AlgorithmID al = GIC::NONE  );
@
<<LIC::status_type::setStatus.c>>=
void LIC::status_type::setStatus( int i, Trichotomy t, 
				  GIC::AlgorithmID al  )
{
  if ( t == dontknow )
    return;
#if ( SAFETY > 0 )
  if ( i < 0 || i >= size ) 
    error("LIC::status_type::setStatus( ... ):"
	  " index out of bounds");
#endif
  if ( status_buffer[i] == '\0' ){
    char flag = (char )al;
    if ( t == no )
      flag = -flag;
    status_buffer[i] = flag;  
  }  
}
  
@
\subsubsection{LIC::status_type::isChecked}
<<LIC::status_type::isChecked.h>>=
    bool isChecked() const;
@
<<LIC::status_type::isChecked.c>>=
bool LIC::status_type::isChecked() const
{
  for (int i = 0; i< size; i++)
    if (status_buffer[i] == '\0' )
      return false;

  return true; 
}

@
\subsubsection{struct status}
<<struct status_type>>=
  struct status_type {
<<LIC::status_type Constructor.h>>
<<LIC::status_type Destructor.h>>
<<LIC::status_type::getStatus.h>>
<<LIC::status_type::setStatus.h>>
<<LIC::status_type::isChecked.h>>
  private:
    char* status_buffer;
    int status_file;    
    int size;
  };
@
\subsection{class LIC}
<<class LIC>>=
class LIC : protected FEData
{  
public:
<<LIC Constructor.h>>
<<LIC Destructor.h>>
<<LIC::getTrivialStatus.h.1>>
<<LIC::getTrivialStatus.h.2>>
<<LIC::setTrivialStatus.h>>
<<LIC::IsTrivialChecked.h>>
<<LIC::hasTrivialStatusBuffer.h>>
<<LIC::putIsTrivialFiles.h>>
<<LIC::getListOfTrivial.h>>
<<LIC::getListOfNonTrivial.h>>
<<LIC::getAbelianStatus.h.1>>
<<LIC::getAbelianStatus.h.2>>
<<LIC::setAbelianStatus.h>>
<<LIC::IsAbelianChecked.h>>
<<LIC::hasAbelianStatusBuffer.h>>
<<LIC::putAbelianFiles.h>>
<<LIC::getListOfAbelian.h>>
<<LIC::getListOfNonAbelian.h>>
<<LIC::getIsCentralStatus.h.1>>
<<LIC::getIsCentralStatus.h.2>>
<<LIC::setIsCentralStatus.h>>
<<LIC::IsCentralChecked.h>>
<<LIC::hasIsCentralStatusBuffer.h>>
<<LIC::putIsCentralFiles.h>>
<<LIC::getListOfCentral.h>>
<<LIC::getListOfNonCentral.h>>
<<LIC::numberOfElements.h>>
private:
<<struct status_type>>
<<LIC::explanation.h>>
  OID listOID; // Need this for composing messages about what has been found.
  int number_of_elements;
  status_type* abStatus;
  status_type* wpStatus;
  status_type* centStatus;
  Chars isAbelianFName;
  Chars isNonAbelianFName;
  Chars isTrivialFName;
  Chars isNonTrivialFName;
  Chars isCentralFName;
  Chars isNonCentralFName;
};

@
\section{template class SMList}
\subsection{SMList Constructor}
<<SMList Constructor.h.1>>=
  SMList( class EnumeratorProblem< T >& P, const Chars heritage);
@
<<SMList Constructor.c.1>>=
template <class T>
SMList<T>::SMList( EnumeratorProblem<T>& P, const Chars heritage )
  : AlgebraicObject( heritage ),
    theParent( P.getParentObject() ),
    theData( P.getData() )
{
  Chars theParentType(  theParent.typeID() );
  if ( theParentType != Chars(SMFPGroup::type()) && 
       theParentType != Chars(SMSubgroup::type()) )
    error("SMList::SMList(SMFPGroup& , const Chars, Chars , bool ) :"
	  "wrong type of the parent object.");
  theLic = new LIC( oid(), theData.numberOfElements() );
}

@
<<SMList Constructor.h.2>>=
  SMList( const SMFPGroup& ao, const SMListData& d, const Chars heritage );
@
<<SMList Constructor.c.2>>=
template <class T>
SMList<T>::SMList( const SMFPGroup& ao, const SMListData& d, const Chars heritage )
  : AlgebraicObject( heritage ),
    theParent( ao ),
    theData( d )
{
  Chars theParentType(  theParent.typeID() );
  if ( theParentType != Chars(SMFPGroup::type()) && 
       theParentType != Chars(SMSubgroup::type()) )
    error(
   "SMList::SMList(AlgebraicObject& ao, const Chars& f, const Chars heritage):"
	  "wrong type of the parent object.");  
  theLic = new LIC( oid(), theData.numberOfElements() );
}

@   
\subsection{SMList Destructor}
<<SMList Destructor.h>>=
  ~SMList();
@
<<SMList Destructor.c>>=
template <class T>
SMList<T>::~SMList() 
{
    delete theLic;
}

@
\subsection{SMList::getData}
<<SMList::getData.h>>=
  const SMListData& getData() const { return theData; }
@
\subsection{SMList::getGroup}
<<SMList::getGroup.h>>=
  const SMFPGroup& getGroup() const;
@
<<SMList::getGroup.c>>=
template <class T>
const SMFPGroup& SMList<T>::getGroup() const
{
  if (Chars(  theParent.typeID() ) == Chars(SMFPGroup::type()) )
    return (SMFPGroup& )theParent;
  else
    return (SMFPGroup& )((SMSubgroup& )theParent).getParent();
}

@
\subsection{SMList::getParent}
<<SMList::getParent.h>>=
  const AlgebraicObject& getParent()const { return theParent; }
@
\subsection{SMList::lic}
<<SMList::lic.h>>=
  LIC& lic() { return *theLic; }
@
\subsection{SMList::type}
<<SMList::type.h>>=
  static const char* type( )  { return theType.s; } 
@
\subsection{SMList::typeID}
<<SMList::typeID.h>>=
  const char* typeID( ) const { return type(); };
@
\subsection{SMList::iconID}
<<SMList::iconID.h>>=
  const IconID iconID( ) const { return IconID::list_object; };
@
\subsection{SMList::printProperties}
<<SMList::printProperties.h>>=
  void printProperties(ostream& ostr) const;
@
<<SMList::printProperties.c>>=
template <class T>
void SMList<T>::printProperties(ostream& ostr) const
{
  ostr << DataPair( Parent( oid() ), Object( theParent ) );
}

@
\subsection{SMList::viewStructure}
<<SMList::viewStructure.h>>=
  void viewStructure(ostream& ostr) const;
@
<<SMList::viewStructure.c>>=
template <class T>
void SMList<T>::viewStructure(ostream& ostr) const
{
  ostr
    << "viewBuilder objectView viewParameters {viewID "
    << oid()
    << " heritage {"
    << heritage()
    << "}}";
}

@
\subsection{SMList::printDefinition}
<<SMList::printDefinition.h>>=
  void printDefinition(ostream& ostr) const;
@
<<SMList::printDefinition.c>>=
template <class T>
void SMList<T>::printDefinition(ostream& ostr) const {}

@
\subsection{SMList::readMessage}
<<SMList::readMessage.h>>=
  void readMessage(istream&) { };
@
\subsection{SMList::getFileName}
This function is required by the [[WordsOfLength]] constructor
but does not exist. Since there is no associated file we return
a zero-length string.
<<SMList::getFileName.h>>=
 Chars getFileName() const {return ""; };
@
\subsection{template class SMList}
<<template class SMList>>=
template <class T> class SMList : public AlgebraicObject
{
public:
<<SMList Constructor.h.1>>
<<SMList Constructor.h.2>>
//  SMList( EnumeratorProblem< T >& P) : AlgebraicObject(""), 
//    theParent(P.getBoss().getParentObject())
//    theGroup(){ }
<<SMList Destructor.h>>
<<SMList::getData.h>>
<<SMList::getGroup.h>>
<<SMList::getParent.h>>
<<SMList::lic.h>>
<<SMList::type.h>>
<<SMList::typeID.h>>
<<SMList::iconID.h>>
<<SMList::printProperties.h>>
<<SMList::viewStructure.h>>
<<SMList::printDefinition.h>>
<<SMList::getFileName.h>>
protected:
<<SMList::readMessage.h>>
  const AlgebraicObject& theParent;	
  static SMListType<T> theType;
  SMListData theData;
  LIC* theLic;
};

@
\section{license}
Copyright (C) 1994-2004 The New York Group Theory Cooperative
See license/NYGTC for the full notice
\section{SMList.h}
<<SMList.h>>=
// src/smlist.pamphlet
#ifndef _SMLIST_H_
#define _SMLIST_H_

<<include.h>>

template <class T> class SMList;

<<template class SMListType>>
<<class LIC>>
<<template class SMList>>
#endif
@
\section{smlist.c}
<<*>>=
<<include.c>>
<<SMList Constructor.c.1>>
<<SMList Constructor.c.2>>
<<SMList::printProperties.c>>
<<SMList Destructor.c>>
<<SMList::viewStructure.c>>
<<SMList::printDefinition.c>>
<<SMList::getGroup.c>>

<<LIC Constructor.c>>
<<LIC Destructor.c>>
<<LIC::hasTrivialStatusBuffer.c>>
<<LIC::getTrivialStatus.c.1>>
<<LIC::setTrivialStatus.c>>
<<LIC::IsTrivialChecked.c>>
<<LIC::hasAbelianStatusBuffer.c>>
<<LIC::getAbelianStatus.c.1>>
<<LIC::setAbelianStatus.c>>
<<LIC::IsAbelianChecked.c>>
<<LIC::hasIsCentralStatusBuffer.c>>
<<LIC::getIsCentralStatus.c.1>>
<<LIC::setIsCentralStatus.c>>
<<LIC::IsCentralChecked.c>>
<<LIC::explanation.c>>

<<LIC::status_type Constructor.c>>
<<LIC::status_type Destructor.c>>
<<LIC::status_type::getStatus.c>>
<<LIC::status_type::setStatus.c>>

template class SMList<Word>;
template class SMList<Subgroup>;
template class SMList<Map>;

SMListType<Word> SMList<Word>::theType;
SMListType<Map> SMList<Map>::theType;
SMListType<Subgroup> SMList<Subgroup>::theType;

EnProbType<Word> EnumeratorProblem<Word>::theType;
EnProbType<Map> EnumeratorProblem<Map>::theType;
EnProbType<Subgroup> EnumeratorProblem<Subgroup>::theType;
EnProbType<NoType> EnumeratorProblem<NoType>::theType;

@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
