\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/set.pamphlet}
\author{Roger Needham}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{Set.h}
Special Notes:
\begin{list}{}
\item To instantiate SetOf<T>, class T must have
\begin{list}{}
\item 1) An assignment operator
\item 2) A copy constructor
\item 3) An == operator
\item 4) A destructor
\item 5) A method int hash() const  (need not return positive ints)
\end{list}
\item The iterator template is parameterized by element type rather than
container class type, so g++ 2.5.8 will buy it. We'll switch to the
latter someday. Code which uses iterators will then break, but will be
easy to fix.

\item The set-theoretic operators are not global, because I'm paranoid about
the following: since there is a conversion T -> SetOf<T>, T would aquire
a host of confusing new operators. For example, if
\begin{verbatim}
  inline SetOf<T> operator & (const SetOf<T>& S1, const SetOf<T>& S2) {
    return setIntersection(S1, S2);
  }
\end{verbatim}
then
\begin{verbatim}
  T t1, t2; T t = t1 & t2;
\end{verbatim}
would be caught by the compiler, but
\begin{verbatim}
  T t1, t2, t3; if ( (t1 & t2) == t3 ) {...}
\end{verbatim}
would not (assuming T has a default constructor).
Keeping the operators as members is not much of a burden; because of
the symmetry of the operators, one can recast any desired expression
so that a genuine SetOf<T> is the left operand.
Also, this decision is reversible without breaking existing code.
\end{list}

Things to Deal With:
\begin{list}{}
\item Adopt a consistent policy on the return type of assignment-like
operators (val vs. ref). This affects other classes as well.
To bear in mind / investigate is the effect the choice has on
generating supplementary constructor calls, and the fact that the
decision cascades through to assignment-like operators and
functions which call other ones.
\end{list}

Implementation Notes:
\begin{list}
\item SetOfs are implemented as open hash tables. They are rehashed (doubling
or halving number of buckets) when the number of elements exceeds
FULLNESS_FACTOR * (number of buckets) or falls below
(number of buckets) / FULLNESS_FACTOR.
The (cheap) decision whether to rehash is made during each insert and
delete, except that if the user specifies an initial size, the new size
will not go below the specified size until the user calls `rehash()'.

\item We could choose the number of buckets more cleverly, and keep track
of whether any bucket is getting too big. In that case, we'd resize
$+/-$ a small number to spread things out.
\end{list}
\section{include}
<<include.h>>=
#include "global.h"
#include "RefCounter.h"
#include "PureRep.h"
#include "ObjectOf.h"
#include "Cell.h"

@
<<include.c>>=
#include "Set.h"
#include "Chars.h"
#include "Word.h"
#include "StatePair.h"
#include "DiffHistory.h"
#include "OID.h"
#include "Integer.h"
#include "Rational.h"
#include "Map.h"
#include "RSWord.h"

@
\section{define}
<<define>>=
//add this to not permit duplicated elements
//#define NODUPICATEDSET
#define FULLNESS_FACTOR 2
// Must be >= 2.

@
\section{forward}
<<forward>>=
template <class T> class SetIterator; 

template <class T> class SetIteratorData;
// Forward declaration for friend declarations.

@
\section{class SetData}
\subsection{SetData Constructor}
<<SetData Constructor.h.1>>=
  SetData(int size)
  // size is suggestion (possibly very bad) of eventual set cardinality.
  // The result represents an empty set.
  {
	 // Make sure size has form 2^n - 1.
	 if ( size < 0 ) size = 0;
	 userSize = ( size > 1 ) ? size : 0;
	 unsigned int realSize = 1;
	 while ( size >>= 1 ) realSize = (realSize << 1) + 1;
	 
	 numberOfBuckets = realSize;
	 hashTable = new CellType*[realSize];
	 
	 for( int i = 0; i < realSize; i++ )
		hashTable[i] = NULL;
	 
	 numberOfElements = 0;
  }

@
\subsection{SetData Constructor}
<<SetData Constructor.h.2>>=
  SetData( const T& t )
  {
	 userSize = 0;
	 numberOfBuckets = 1;
	 hashTable = new CellType*[1];
	 hashTable[0] = new CellType(t);
	 numberOfElements = 1;
  }

@
\subsection{SetData Constructor}
<<SetData Constructor.h.3>>=
  SetData(const SetData& sd)
  // Copy constructor does deep copy.
  {
	 userSize = sd.userSize;
	 numberOfElements = sd.numberOfElements;
	 numberOfBuckets = sd.numberOfBuckets;
	 hashTable = new CellType*[numberOfBuckets];
	 CellType *bucket;
	 CellType **newBucket;
	 
	 for( int i = 0; i < numberOfBuckets; i++ ) {
		hashTable[i] = NULL;
		newBucket = &hashTable[i];
		bucket = sd.hashTable[i];
		while ( bucket != NULL ) {
		  *newBucket = new CellType(*bucket);
		  newBucket = &((*newBucket)->nextCell);
		  bucket = bucket->nextCell;
		}
	 }
  }

@
\subsection{SetData Destructor}
<<SetData Destructor.h>>=
  ~SetData()
  // Delete everything associated with this SetData. Reference counting
  // spares the T's if necessary.
  {
	 if ( hashTable ) {
		removeAllElements();
		delete [] hashTable;
		hashTable = NULL;
	 }
  }

@
\subsection{SetData::clone}
<<SetData::clone.h>>=
  SetData* clone( ) const { return new SetData(*this); }

@
\subsection{SetData operator equalequal}
<<SetData operator equalequal.h>>=
  Bool operator == ( const SetData& sd ) const
  {
	 if ( numberOfElements != sd.numberOfElements ) return FALSE;
	 for ( int i = 0; i < numberOfBuckets; i++ ) {
		CellType* scan = hashTable[i];
		while ( scan != NULL ) {
		  if ( !sd.contains(scan->getContents()) ) return FALSE;
		  scan = scan->nextCell;
		}
	 }
	 return TRUE;
  }

@
\subsection{SetData::hashElement}
<<SetData::hashElement.h>>=
  int hashElement(const T & t) const;
@
<<SetData::hashElement.c>>=
template <class T>
int SetData<T>::hashElement(const T & t) const { return t.hash();}

@
\subsection{SetData::rehash}
<<SetData::rehash.h>>=
  void rehash( Bool calledByUser = FALSE )
  {
	 if ( calledByUser ) userSize = 0;

	 int newNumberOfBuckets;

	 if ( numberOfElements > FULLNESS_FACTOR * numberOfBuckets )
		newNumberOfBuckets = (numberOfBuckets << 1) + 1;
	 else if ( numberOfElements < numberOfBuckets / FULLNESS_FACTOR ) {
		// Assumes FULLNESS_FACTOR >= 2, so won't resize to 0.
		if ( !userSize || (numberOfBuckets >> 1) >= userSize )
		  newNumberOfBuckets = numberOfBuckets >> 1;
		else return;
	 }
	 else return;

	 int i;

	 CellType **newHashTable = new CellType*[newNumberOfBuckets];
	 for ( i = 0; i < newNumberOfBuckets; i++ )
		newHashTable[i] = NULL;
	 
	 // Now cycle through the old set, rehash its elements, detach them and
	 // reinsert them in newHashTable.
	 
	 CellType *curCell, *tmp;
	 int index;
	 for( i = 0; i < numberOfBuckets; i++ ) {
		curCell = hashTable[i];
		while ( curCell != NULL ) {
		  tmp = curCell->nextCell;
		  
		  // Rehash and insert entire cell into newHashTable
		  index = 
                abs(hashElement(curCell->getContents())) % newNumberOfBuckets;
		  curCell->nextCell = newHashTable[index];
		  newHashTable[index] = curCell;
		  
		  curCell = tmp;
		}
		hashTable[i] = NULL;
	 }
	 
	 // Put all private variables back together and clean up.
	 numberOfBuckets = newNumberOfBuckets;
	 delete [] hashTable;
	 hashTable = newHashTable;
  }

@
\subsection{SetData::removeAllElements}
<<SetData::removeAllElements.h>>=
  void removeAllElements()
  // Make *this represent an empty set, possibly keeping, e.g., a large
  // but empty bucket table.
  {
	 for( int i = 0; i < numberOfBuckets; i++ ) {
		CellType *bucket = hashTable[i];
		while ( bucket != NULL ) {
		  CellType *tmp = bucket;
		  bucket = bucket->nextCell;
		  delete tmp;
		}
		hashTable[i] = NULL;
	 }
	 numberOfElements = 0;
  }

@
\subsection{SetData::cardinality}
<<SetData::cardinality.h>>=
  int cardinality() const { return numberOfElements; }
@
\subsection{SetData::contains}
<<SetData::contains.h>>=
  Bool contains(const T& e) const
  {
	 int index = abs(hashElement(e)) % numberOfBuckets;
	 CellType* search = hashTable[index];
	 while ( search != NULL ) {
		if ( e == search->getContents() ) return TRUE;
		search = search->nextCell;
	 }
	 return FALSE;
  }

@
\subsection{SetData::adjoinElement}
<<SetData::adjoinElement.h>>=
  void adjoinElement(const T& e)
  {
	 rehash();
	 int index = abs(hashElement(e)) % numberOfBuckets;
	 CellType* search = hashTable[index];
	 while ( search != NULL ) {
            #ifdef NODUPICATEDSET
		if ( e == search->getContents() ) return;
            #endif
		search = search->nextCell;
	 }
	 search = new CellType(e);
	 search->nextCell = hashTable[index];
	 hashTable[index] = search;
	 ++numberOfElements;
  }

@
\subsection{SetData::removeElement}
<<SetData::removeElement.h>>=
  void removeElement(const T& e)
  {
	 int index = abs(hashElement(e)) % numberOfBuckets;
	 CellType* search = hashTable[index];
	 if ( search != NULL )
		if ( e == search->getContents() )
		  hashTable[index] = search->nextCell;
		else {
		  CellType* prev = search;
		  while ( (search = search->nextCell) != NULL ) {
			 if ( e == search->getContents() ) {
				prev->nextCell = search->nextCell;
				break;
			 }
			 prev = search;
		  }
		}
	 if ( search != NULL ) {
		delete search;
		--numberOfElements;
		rehash();
	 }
  }

@
\subsection{SetData::printOn}
<<SetData::printOn.h>>=
  void printOn(ostream& ostr) const {
	 ostr << "\nSet of cardinality: " << numberOfElements << "\n{" << endl;
	 for ( int i = 0; i < numberOfBuckets; i++ ) {
		CellType* scan = hashTable[i];
		while ( scan != NULL ) {
		  ostr << scan->getContents() << endl;
		  scan = scan->nextCell;
		}
	 }
	 ostr << "\n}" << endl;
  }

@
\subsection{SetData::write}
<<SetData::write.h>>=
  void write( ostream& ostr ) const;
@
<<SetData::write.c>>=
template <class T>
void SetData<T>::write( ostream& ostr ) const
{
#ifdef DEBUG
    ostr < Chars("Set<") < ' ';
#endif    
  ostr < numberOfElements < numberOfBuckets;
  for ( int i = 0; i < numberOfBuckets; i++ ) {
    CellType* scan = hashTable[i];
    if( scan == NULL )
      ostr < 0;
    else
      ostr < 1;
    while ( scan != NULL ) {
      ostr < *scan;
      scan = scan->nextCell;
      if( scan == NULL )
	ostr < 0;
      else
	ostr < 1;
    }
  }
#ifdef DEBUG
    ostr < ' ' < Chars(">Set");
#endif    
}

@
\subsection{SetData::read}
<<SetData::read.h>>=
  void read( istream& istr );
@
<<SetData::read.c>>=
template <class T>
void SetData<T>::read( istream& istr )
{
  if ( hashTable ) {
    removeAllElements();
    delete [] hashTable;
    hashTable = NULL;
  }
#ifdef DEBUG
  {
    Chars header;
    istr > header;
    if( header != Chars("Set<") ) {
      error("Cannot load Set<T>: bad header of the data section.");
    }
  }
#endif
  istr > numberOfElements > numberOfBuckets;
  hashTable = new CellType*[numberOfBuckets];
  for( int i = 0; i < numberOfBuckets; i++ ) {
    int n;
    istr > n;
    if( n == 0)
      hashTable[i] = NULL;
    else {
      bool bFirst = true;
      CellType *scan, *old;
      while( true ) {
	scan = new CellType();
        istr > *scan;
	if( bFirst ) {
	  hashTable[i] = scan;
	  bFirst = false;
	}
	else
	  old->nextCell = scan;
	istr > n;
	if( n == 0 ) {
	  scan->nextCell == NULL;
	  break;
	}
	old = scan;
      }
    }
  }
#ifdef DEBUG
  {
    Chars footer;
    istr > footer;
    if( footer != Chars(">Set") ) {
      error("Cannot load Set<T>: bad footer of the data section.");
    }
  }
#endif
}

@
\subsection{SetData::printStats}
<<SetData::printStats.h>>=
  void printStats() const
  // Print statistics for hash table (for testing efficiency).
  {
	 cout << "\n\nHash table statistics:\n\n";
	 cout << "User specified size = ";
	 if ( userSize ) cout << userSize << endl;
	 else cout << "(cleared by call to `rehash()')" << endl;
	 cout << "Number of entries = " << numberOfElements << endl;
	 cout << "Number of buckets = " << numberOfBuckets << endl;
	 
	 double sum = 0;
	 double sumSquares = 0;
	 long maxLen = 0;
	 long minLen = 1000000;
	 long numEmpties = 0;
	 long len;
	 CellType *cPtr;
	 for( int i = 0; i < numberOfBuckets; i++ ) {
		cPtr = hashTable[i];
		if ( !cPtr ) ++numEmpties;
		len = 0;
		while ( cPtr ) { len++; cPtr = cPtr->nextCell; }
		maxLen = max( len, maxLen );
		minLen = min( len, minLen );
		sum += len;
		sumSquares += len*len;
	 }
	 long numNonEmpty = numberOfBuckets-numEmpties;
	 double mean = sum / numNonEmpty;
	 cout << "Largest bucket size = " << maxLen << endl;
	 cout << "Smallest bucket size = " << minLen << endl;
	 cout << "Average non-empty bucket size = " << mean << endl;
	 cout << "Number of empty buckets = " << numEmpties;
	 cout << ", or " << 100*numEmpties/numberOfBuckets << "%" << endl;
	 cout << "Sample standard deviation in non-empty bucket size = sqrt(";
	 cout << ((sumSquares - 2*mean*sum + numNonEmpty*mean*mean)/
                    (numNonEmpty-1)) << ")\n" << endl;
  }

@
\subsection{SetData::printRep}
<<SetData::printRep.h>>=
  void printRep() const
  // Print a legible representation of the hash table.
  {
	 cout << "\n\nHash table:\n-----------\n\n";
	 CellType *cPtr;
	 for( int i = 0; i < numberOfBuckets; i++ ) {
		cout << i << ": ";
		cPtr = hashTable[i];
		while ( cPtr ) {
		  cout << ". ";
		  cPtr = cPtr->nextCell;
		}
		cout << endl;
	 }
  }

@
\subsection{class SetData}
<<class SetData>>=
template<class T> class SetData : public RefCounter {
public:
<<SetData Constructor.h.1>>
<<SetData Constructor.h.2>>
<<SetData Constructor.h.3>>
<<SetData Destructor.h>>
<<SetData::clone.h>>
<<SetData operator equalequal.h>>
<<SetData::hashElement.h>>
<<SetData::rehash.h>>
<<SetData::removeAllElements.h>>
<<SetData::cardinality.h>>
<<SetData::contains.h>>
<<SetData::adjoinElement.h>>
<<SetData::removeElement.h>>
<<SetData::printOn.h>>
<<SetData::write.h>>
<<SetData::read.h>>
#ifdef DEBUG
<<SetData::printStats.h>>
<<SetData::printRep.h>>
#endif
  
//@db private: 
protected:
  typedef Cell<T> CellType;
  friend struct SetIteratorData<T>;
  int         userSize;         // Initial size > 1 given by the user,
                                // or 0 if none specified. Reset to 0
                                // only by rehash(TRUE).
  int         numberOfElements;
  int         numberOfBuckets;  // Equal to 2^n - 1 for some n.
  CellType**  hashTable;

};

@
\section{class SetOf}
\subsection{SetOf Constructor}
Give rough advice about eventual cardinality. The result is an empty set.
If you specify size > 1, the underlying hash table never shrinks
below that size until you call `rehash()'.
Note that because of hash table doubling, it costs only O(n) to build
up a set of cardinality n from the default.
<<SetOf Constructor.h.1>>=
  SetOf( int size = 1 ) : ObjectOf<Rep>( new Rep(size) ) { }
@

\subsection{SetOf Constructor}
Cast constructor wraps element in a set.
<<SetOf Constructor.h.2>>=
  SetOf( const T& t ) : ObjectOf<Rep>( new Rep(t) ) { }
@
\subsection{SetOf operator equalequal}
<<SetOf operator equalequal.h>>=
  Bool operator == ( const SetOf& S ) const {
	 return equalTo(S);
  }

@
\subsection{SetOf operator notequal}
<<SetOf operator notequal.h>>=
  Bool operator != ( const SetOf& S ) const {
	 return !equalTo(S);
  }

@
\subsection{SetOf operator lessthan}
<<SetOf operator lessthan.h>>=
  Bool operator < ( const SetOf& S ) const {
	 return S.properlyContains(*this);
  }

@
\subsection{SetOf operator lessthanorequal}
<<SetOf operator lessthanorequal.h>>=
  Bool operator <= ( const SetOf& S ) const {
	 return S.contains(*this);
  }

@
\subsection{SetOf operator greaterthan}
<<SetOf operator greaterthan.h>>=
  Bool operator > ( const SetOf& S ) const {
	 return properlyContains(S);
  }

@
\subsection{SetOf operator greaterthanorequalto}
<<SetOf operator greaterthanorequalto.h.1>>=
  Bool operator >= ( const SetOf& S ) const {
	 return contains(S);
  }

@
<<SetOf operator greaterthanorequalto.h.2>>=
  Bool operator >= ( const T& e ) const {
	 return contains(e);
  }

@
\subsection{SetOf operator reference}
<<SetOf operator reference.h>>=
  SetOf operator & ( const SetOf& S ) const {
	 return setIntersection(*this, S);
  }

@
\subsection{SetOf operator referenceequal}
<<SetOf operator referenceequal.h>>=
  SetOf operator &= ( const SetOf& S ) {
	 shrinkToIntersectionWith(S);
	 return *this;
  }

@
\subsection{SetOf operator or}
<<SetOf operator or.h>>=
  SetOf operator | ( const SetOf& S ) const {
	 return setUnion(*this, S);
  }

@
\subsection{SetOf operator orequal}
<<SetOf operator orequal.h.1>>=
  SetOf operator |= ( const SetOf& S ) {
	 adjoinElements(S);
	 return *this;
  }

@
<<SetOf operator orequal.h.2>>=
  SetOf operator |= ( const T& e ) {
	 adjoinElement(e);
	 return *this;
  }

@
\subsection{SetOf operator minus}
<<SetOf operator minus.h>>=
  SetOf operator - ( const SetOf& S ) const {
	 return setMinus(*this, S);
  }

@
\subsection{SetOf operator}
<<SetOf operator minusequal.h.1>>=
  SetOf operator -= ( const SetOf& S ) {
	 removeElements(S);
	 return *this;
  }

@
<<SetOf operator minusequal.h.2>>=
  SetOf operator -= ( const T& e ) {
	 removeElement(e);
	 return *this;
  }

@
\subsection{SetOf operator not}
<<SetOf operator not.h>>=
  SetOf operator ^ ( const SetOf& S ) const {
	 return setSymmetricDifference(*this, S);
  }

@
\subsection{SetOf::cardinality}
<<SetOf::cardinality.h>>=
  int cardinality() const { return look()->cardinality(); }

@
\subsection{SetOf::equalTo}
TRUE iff S is equal as a set to *this.
<<SetOf::equalTo.h>>=
  Bool equalTo(const SetOf& S) const {
	 return ((look() == S.look()) || (*look() == *S.look()));
  }

@
\subsection{SetOf::contains}
TRUE iff *this contains a T == to e.
<<SetOf::contains.h.1>>=
  Bool contains(const T& e) const { return look()->contains(e); }

@
<<SetOf::contains.c.1>>=
template <class T>
Bool SetOf<T>::contains(const SetOf<T>& S) const
{
//@@rn  SetIterator< SetOf<T> > I(S);
  SetIterator<T> I(S);
  while ( !I.done() ) {
	 if ( !contains( I.value() ) ) return 0;
	 I.next();
  }
  return 1;
}

@
TRUE iff S is a subset of *this.
<<SetOf::contains.h.2>>=
  Bool contains(const SetOf& S) const;

@
\subsection{SetOf::properlyContains}
TRUE iff S is a proper subset of *this.
<<SetOf::properlyContains.h>>=
  Bool properlyContains(const SetOf& S) const {
	 return ( cardinality() > S.cardinality() && contains(S) );
  }

@
\subsection{SetOf::adjoinElement}
Add e to *this. It is not an error if *this already contains e.
<<SetOf::adjoinElement.h>>=
  void adjoinElement(const T& e) { change()->adjoinElement(e); }

@
\subsection{SetOf::removeElement}
Remove e from *this.
It is not an error if this set does not contain e.
<<SetOf::removeElement.h>>=
  void removeElement(const T& e) { change()->removeElement(e); }

@
\subsection{SetOf::shrinkToIntersectionWith}
Make *this the intersection of *this and S.
<<SetOf::shrinkToIntersectionWith.h>>=
  void shrinkToIntersectionWith(const SetOf& S);

@
<<SetOf::shrinkToIntersectionWith.c>>=
template <class T>
void SetOf<T>::shrinkToIntersectionWith(const SetOf<T>& S)
{
//@@rn  SetIterator< SetOf<T> > I(*this);
  SetIterator<T> I(*this);
  while ( !I.done() ) {
	 if ( !S.contains( I.value() ) ) removeElement( I.value() );
	 I.next();
  }
}

@
\subsection{SetOf::adjoinElements}
Adjoin each element of S to *this.
<<SetOf::adjoinElements.h>>=
  void adjoinElements(const SetOf& S);

@
<<SetOf::adjoinElements.c>>=
template <class T>
void SetOf<T>::adjoinElements(const SetOf<T>& S)
{
//@@rn  SetIterator< SetOf<T> > I(S);
  SetIterator<T> I(S);
  while ( !I.done() ) {
	 adjoinElement( I.value() );
	 I.next();
  }
}

@
\subsection{SetOf::removeElements}
Remove each element of S from *this.
<<SetOf::removeElements.h>>=
  void removeElements(const SetOf& S);

@
<<SetOf::removeElements.c>>=
template <class T>
void SetOf<T>::removeElements(const SetOf<T>& S)
{
//@@rn  SetIterator< SetOf<T> > I(S);
  SetIterator<T> I(S);
  while ( !I.done() ) {
	 removeElement( I.value() );
	 I.next();
  }
}

@
\subsection{SetOf::removeAllElements}
Makes *this into an empty set.
<<SetOf::removeAllElements.h>>=
  void removeAllElements() { change()->removeAllElements(); }

@
\subsection{SetOf::rehash}
For tweaking performance. Calling this is never sematically wrong, and
in the worst case degrades performance by increasing the constant in O(n);
If you specify size > 1, the underlying hash table never shrinks
below that size until you call `rehash()'.
<<SetOf::rehash.h>>=
  void rehash( ) { enhance()->rehash(TRUE); }

@
\subsection{SetOf::printStats}
<<SetOf::printStats.h>>=
    void printStats() const { look()->printStats(); }
@
\subsection{SetOf::printRep}
<<SetOf::printRep.h>>=
    void printRep() const { look()->printRep(); }
@
\subsection{class SetOf}
<<class SetOf>>=
template<class T>
class SetOf : public ObjectOf< SetData<T> > {
public:
  typedef T SetElementType; // Export this
<<SetOf Constructor.h.1>>
<<SetOf Constructor.h.2>>
<<SetOf operator equalequal.h>>
<<SetOf operator notequal.h>>
<<SetOf operator lessthan.h>>
<<SetOf operator lessthanorequal.h>>
<<SetOf operator greaterthan.h>>
<<SetOf operator greaterthanorequalto.h.1>>
<<SetOf operator greaterthanorequalto.h.2>>
<<SetOf operator reference.h>>
<<SetOf operator referenceequal.h>>
<<SetOf operator or.h>>
<<SetOf operator orequal.h.1>>
<<SetOf operator orequal.h.2>>
<<SetOf operator minus.h>>
<<SetOf operator minusequal.h.1>>
<<SetOf operator minusequal.h.2>>
<<SetOf operator not.h>>
<<SetOf::cardinality.h>>
<<SetOf::equalTo.h>>
<<SetOf::contains.h.1>>
<<SetOf::contains.h.2>>
<<SetOf::properlyContains.h>>
<<SetOf::adjoinElement.h>>
<<SetOf::removeElement.h>>
<<SetOf::shrinkToIntersectionWith.h>>
<<SetOf::adjoinElements.h>>
<<SetOf::removeElements.h>>
<<SetOf::removeAllElements.h>>
<<SetOf::rehash.h>>
  #ifdef DEBUG
<<SetOf::printStats.h>>
<<SetOf::printRep.h>>
  #endif

  friend ostream& operator << ( ostream& ostr, const SetOf& S ) {
	 S.look()->printOn(ostr);
	 return ostr;
  }

  friend ostream& operator < ( ostream& ostr, const SetOf& S )
  {
    S.look()->write(ostr);
    return ostr;
  }
  
  friend istream& operator > ( istream& istr, SetOf& S )
  {
    S.change()->read(istr);
    return istr;
  }
protected:
  typedef SetData<T> Rep;
  friend class SetIteratorData<T>;
//@rn  SetOf( Rep* p ) : ObjectOf<Rep>(p) { }
};

@
\section{Prototypes, commented out}
<<comment out>>=
// /*@rn g++ 2.5.8 gets confused when you prototype these

template <class T>
SetOf<T> setUnion(const SetOf<T>&, const SetOf<T>&);

template <class T>
SetOf<T> setIntersection(const SetOf<T>&, const SetOf<T>&);

template <class T>
SetOf<T> setMinus(const SetOf<T>&, const SetOf<T>&);

template <class T>
SetOf<T> setSymmetricDifference(const SetOf<T>&, const SetOf<T>&);

// */
/*
template <class T>
SetOf<T> setUnion(const SetOf<T>& S1, const SetOf<T>& S2)
{
  if ( S1.cardinality() < S2.cardinality() ) {
	 SetOf<T> result = S2;
//@@rn	 SetIterator< SetOf<T> > I(S1);
	 SetIterator<T> I(S1);
	 while ( !I.done() ) {
		result.adjoinElement( I.value() );
		I.next();
	 }
	 return result;
  } else {
	 SetOf<T> result = S1;
//@@rn	 SetIterator< SetOf<T> > I(S2);
	 SetIterator<T> I(S2);
	 while ( !I.done() ) {
		result.adjoinElement( I.value() );
		I.next();
	 }
	 return result;
  }
}


template <class T>
SetOf<T> setIntersection(const SetOf<T>& S1, const SetOf<T>& S2)
{
  SetOf<T> result;
  if ( S1.cardinality() < S2.cardinality() ) {
//@@rn	 SetIterator< SetOf<T> > I(S1);
	 SetIterator<T> I(S1);
	 while ( !I.done() ) {
		if ( S2.contains( I.value() ) )
		  result.adjoinElement( I.value() );
		I.next();
	 }
  } else {
//@@rn	 SetIterator< SetOf<T> > I(S2);
	 SetIterator<T> I(S2);
	 while ( !I.done() ) {
		if ( S1.contains( I.value() ) )
		  result.adjoinElement( I.value() );
		I.next();
	 }
  }
  return result;
}


template <class T>
SetOf<T> setMinus(const SetOf<T>& S1, const SetOf<T>& S2)
{
  SetOf<T> result;
//@@rn  SetIterator< SetOf<T> > I(S1);
  SetIterator<T> I(S1);
  while ( !I.done() ) {
	 if ( !S2.contains( I.value() ) )
		  result.adjoinElement( I.value() );
	 I.next();
  }
  return result;
}


template <class T>
SetOf<T> setSymmetricDifference(const SetOf<T>& S1, const SetOf<T>& S2)
{
  SetOf<T> result;
//@@rn  SetIterator< SetOf<T> > I1(S1);
  SetIterator<T> I1(S1);
  while ( !I1.done() ) {
	 if ( !S2.contains( I1.value() ) )
		  result.adjoinElement( I1.value() );
	 I1.next();
  }
//@@rn  SetIterator< SetOf<T> > I2(S2);
  SetIterator<T> I2(S2);
  while ( !I2.done() ) {
	 if ( !S1.contains( I2.value() ) )
		  result.adjoinElement( I2.value() );
	 I2.next();
  }
  return result;
}
*/


/*
template <class T>
void SetOf<T>::shrinkToIntersectionWith(const SetOf<T>& S)
{
//@@rn  SetIterator< SetOf<T> > I(*this);
  SetIterator<T> I(*this);
  while ( !I.done() ) {
	 if ( !S.contains( I.value() ) ) removeElement( I.value() );
	 I.next();
  }
}


template <class T>
void SetOf<T>::adjoinElements(const SetOf<T>& S)
{
//@@rn  SetIterator< SetOf<T> > I(S);
  SetIterator<T> I(S);
  while ( !I.done() ) {
	 adjoinElement( I.value() );
	 I.next();
  }
}


template <class T>
void SetOf<T>::removeElements(const SetOf<T>& S)
{
//@@rn  SetIterator< SetOf<T> > I(S);
  SetIterator<T> I(S);
  while ( !I.done() ) {
	 removeElement( I.value() );
	 I.next();
  }
}


template <class T>
Bool SetOf<T>::contains(const SetOf<T>& S) const
{
//@@rn  SetIterator< SetOf<T> > I(S);
  SetIterator<T> I(S);
  while ( !I.done() ) {
	 if ( !contains( I.value() ) ) return 0;
	 I.next();
  }
  return 1;
}
*/

@
\section{templates}
\subsection{template setUnion}
<<template setUnion>>=
template <class T>
SetOf<T> setUnion(const SetOf<T>& S1, const SetOf<T>& S2)
{
  if ( S1.cardinality() < S2.cardinality() ) {
	 SetOf<T> result = S2;
//@@rn	 SetIterator< SetOf<T> > I(S1);
	 SetIterator<T> I(S1);
	 while ( !I.done() ) {
		result.adjoinElement( I.value() );
		I.next();
	 }
	 return result;
  } else {
	 SetOf<T> result = S1;
//@@rn	 SetIterator< SetOf<T> > I(S2);
	 SetIterator<T> I(S2);
	 while ( !I.done() ) {
		result.adjoinElement( I.value() );
		I.next();
	 }
	 return result;
  }
}

@
\subsection{template setIntersection}
<<template setIntersection>>=
template <class T>
SetOf<T> setIntersection(const SetOf<T>& S1, const SetOf<T>& S2)
{
  SetOf<T> result;
  if ( S1.cardinality() < S2.cardinality() ) {
//@@rn	 SetIterator< SetOf<T> > I(S1);
	 SetIterator<T> I(S1);
	 while ( !I.done() ) {
		if ( S2.contains( I.value() ) )
		  result.adjoinElement( I.value() );
		I.next();
	 }
  } else {
//@@rn	 SetIterator< SetOf<T> > I(S2);
	 SetIterator<T> I(S2);
	 while ( !I.done() ) {
		if ( S1.contains( I.value() ) )
		  result.adjoinElement( I.value() );
		I.next();
	 }
  }
  return result;
}

@
\subsection{template setMinus}
<<template setMinus>>=
template <class T>
SetOf<T> setMinus(const SetOf<T>& S1, const SetOf<T>& S2)
{
  SetOf<T> result;
//@@rn  SetIterator< SetOf<T> > I(S1);
  SetIterator<T> I(S1);
  while ( !I.done() ) {
	 if ( !S2.contains( I.value() ) )
		  result.adjoinElement( I.value() );
	 I.next();
  }
  return result;
}

@
\subsection{template setSymmetricDifference}
<<template setSymmetricDifference>>=
template <class T>
SetOf<T> setSymmetricDifference(const SetOf<T>& S1, const SetOf<T>& S2)
{
  SetOf<T> result;
//@@rn  SetIterator< SetOf<T> > I1(S1);
  SetIterator<T> I1(S1);
  while ( !I1.done() ) {
	 if ( !S2.contains( I1.value() ) )
		  result.adjoinElement( I1.value() );
	 I1.next();
  }
//@@rn  SetIterator< SetOf<T> > I2(S2);
  SetIterator<T> I2(S2);
  while ( !I2.done() ) {
	 if ( !S1.contains( I2.value() ) )
		  result.adjoinElement( I2.value() );
	 I2.next();
  }
  return result;
}

@
\section{class SetContainer}
\subsection{SetContainer Contructor}
<<SetContainer Contructor.h>>=
  SetContainer( const SetOf<T>& S ) : ObjectOf< SetData<T> >(S) { }
@
\subsection{class SetContainer}
<<class SetContainer>>=
template<class T>
class SetContainer : public ObjectOf< SetData<T> > {
public:
  friend class SetIteratorData<T>;
<<SetContainer Contructor.h>>
};

@
\section{class SetIteratorData}
\subsection{SetIteratorData Constructor}
<<SetIteratorData Constructor.h>>=
  SetIteratorData(const SetOf<T>& S) : theSet(S) { reset(); }
@
\subsection{SetIteratorData::clone}
<<SetIteratorData::clone.h>>=
  PureRep *clone() const { return new SetIteratorData(*this); }
@
\subsection{SetIteratorData operator equalequal}
<<SetIteratorData operator equalequal.h>>=
  Bool operator == ( const SetIteratorData& sid ) const {
     return ( current == sid.current && theSet.look() == sid.theSet.look() );
  }
@
\subsection{SetIteratorData::value}
<<SetIteratorData::value.h>>=
  T value( ) const {
	 #if SAFETY > 0
	   if ( current == NULL )
 	     error("tried to retrieve value from SetIterator which is done");
    #endif
	 return current->getContents();
  }
@
\subsection{SetIteratorData::next}
<<SetIteratorData::next.h>>=
  Bool next( ) {
	 if ( current != NULL )
		current = current->nextCell;
	 if ( current == NULL ) {
		int numberOfBuckets = theSet.look()->numberOfBuckets;
		if ( bucketIndex >= numberOfBuckets ) return 0;
		CellType** hashTable = theSet.look()->hashTable;
		++bucketIndex;
		while ( bucketIndex < numberOfBuckets && 
                        hashTable[bucketIndex] == NULL )
		  ++bucketIndex;
		if ( bucketIndex < numberOfBuckets )
		  current = hashTable[bucketIndex];
	 }
	 return (current != NULL);
  }
@
\subsection{SetIteratorData::reset}
<<SetIteratorData::reset.h>>=
  void reset( ) {
	 current = NULL;
	 bucketIndex = -1;
	 next();
  }
@
\subsection{SetIteratorData::done}
<<SetIteratorData::done.h>>=
  Bool done( ) const { return (current == NULL); }
@
\subsection{class SetIteratorData}
A helper class which mimics a SetOf<T>, to get around the usual g++
template fuckup. See the theSet member below.
<<class SetIteratorData>>=
template<class T>
class SetIteratorData : public PureRep {
public:
<<SetIteratorData Constructor.h>>
<<SetIteratorData::clone.h>>
<<SetIteratorData operator equalequal.h>>
<<SetIteratorData::value.h>>
<<SetIteratorData::next.h>>
<<SetIteratorData::done.h>>
<<SetIteratorData::reset.h>>
private:
  typedef Cell<T> CellType;
  CellType*      current;
  int            bucketIndex;
  const SetContainer<T> theSet;
  // If theSet is declared as SetOf<T>, g++ 2.5.8 & 2.6.0 claim that it
  // has incomplete type. Then why, prithee, is this ok?
  // The exact same scheme works in ListOf and AssociationsOf.
};

@
\section{class SetIterator}
\subsection{SetIterator Constructor}
Constructs iterator from set over which to iterate.
<<SetIterator Constructor.h>>=
  SetIterator(const SetOf<T>& S) : ObjectOf<SID>( new SID(S) ) { }
@
\subsection{SetIterator operator equalequal}
TRUE iff the iterators will look at the same elements of the (physically)
same set in the same order. Valid at any point of the iteration.
<<SetIterator operator equalequal.h>>=
  Bool operator == ( const SetIterator& I ) const {
	 return ((look() == I.look()) || (*look() == *I.look()));
  }
@
\subsection{SetIterator::value}
Returns the current T. Calling this is a fatal error if done().
<<SetIterator::value.h>>=
  T value( ) const { return look()->value(); }
@
\subsection{SetIterator::next}
Advances this iterator.
Returns TRUE iff the iteration has not finished.
This may be called after it returns FALSE with no side effect.
<<SetIterator::next.h>>=
  Bool next( ) { return change()->next(); }
@
\subsection{SetIterator::done}
Returns TRUE iff the iteration has finished. This may
be called after it returns TRUE with no side effect.
<<SetIterator::done.h>>=
  Bool done( ) const { return look()->done(); }
@
\subsection{SetIterator::reset}
Resets this iterator to the state it was in after construction.
<<SetIterator::reset.h>>=
  void reset( ) { change()->reset(); }
@
\subsection{SetIterator::look}
Shadow representation accessors to get representations of the
right type in the members of this class:
<<SetIterator::look.h>>=
  const ThisRep* look( ) const {
    return (const ThisRep*)Base::look();
  }
@
\subsection{SetIterator::enhance}
<<SetIterator::enhance.h>>=
  ThisRep* enhance( ) const {
	 return (ThisRep*)Base::enhance();
  }
@
\subsection{SetIterator::change}
<<SetIterator::change.h>>=
  ThisRep* change( ) {
	 return (ThisRep*)Base::change();
  }
@
\subsection{class SetIterator}
To iterate over the elements of a SetOf<T> S, just do:
\begin{verbatim}
  SetIterator<T> I(S);
  while ( !I.done() ) {
    /* Do something with I.value() */
    I.next();
  }
\end{verbatim}
You may assign one SetIterator to another, so the following works:
\begin{verbatim}
  SetIterator<T> I(S);
  while( !I.done() ) {
    SetIterator<T> J = I;
    while( J.next() )
      if ( I.value() == J.value() ) error("Set contains duplicates!");
    I.next();
  }
  int count = 0;
  I.reset();
  while( !I.done() ) {
    SetIterator<T> J(I);
    do { if ( I.value() == J.value() ) ++count; } while( J.next() );
    I.next();
  }
  if ( count != S.cardinality() ) error("I give up");
\end{verbatim}
Since I was reset, the two excursions of I through S are guaranteed to
produce the same sequence of elements. In any case, J is guaranteed to look
at the rest of what I is.

You may alter S during the iteration, but I uses the old copy
of S (see shrinkToIntersectionWith). You may alter the object returned by
I.value(), but this will not effect S or I.

<<class SetIterator>>=
template <class T>
class SetIterator : public ObjectOf< SetIteratorData<T> > {
public:
//@@rn  typedef SetOfType::SetElementType T;
<<SetIterator Constructor.h>>
<<SetIterator operator equalequal.h>>
<<SetIterator::value.h>>
<<SetIterator::next.h>>
<<SetIterator::done.h>>
<<SetIterator::reset.h>>
protected:
  typedef SetIteratorData<T> ThisRep;
  typedef ObjectOf<ThisRep> Base;
<<SetIterator::look.h>>
<<SetIterator::enhance.h>>
<<SetIterator::change.h>>
  SetIterator( ThisRep* rep ) : Base(rep) { }
  // To wrap new representation
private:
  typedef SetIteratorData<T> SID;
};

@
\section{license}
Copyright (C) 1994-2004 The New York Group Theory Cooperative
See license/NYGTC for the full notice
@
\section{Set.h}
<<Set.h>>=
// src/set.pamphlet
#ifndef _SET_H_
#define _SET_H_

<<include.h>>
<<define>>
<<forward>>
<<class SetData>>
<<class SetOf>>
<<template setUnion>>
<<template setIntersection>>
<<template setMinus>>
<<template setSymmetricDifference>>
<<class SetContainer>>
<<class SetIteratorData>>
<<class SetIterator>>
#endif
@
\section{set.c}
<<*>>=
<<include.c>>
<<SetData::hashElement.c>>
<<SetData::write.c>>
<<SetData::read.c>>
<<SetOf::shrinkToIntersectionWith.c>>
<<SetOf::adjoinElements.c>>
<<SetOf::removeElements.c>>
<<SetOf::contains.c.1>>

//@rn  Since the template class SetOf has out-of-line member functions, we
//@rn  must explicitly instantiate every SetOf class we want. We do not have
//@rn  the option of inlining the functions in question. Hopefully this will
//@rn  change with gcc 2.7.x.

//template class SetOf<int>;

template class SetData<Word>;
template class SetOf<Word>;

template class SetData<Elt>;
template class SetOf<Elt>;

template class SetOf<StatePair>;
void SetData<StatePair>::write( ostream& ostr ) const { }
void SetData<StatePair>::read( istream& istr ) { }

//template class SetData<DiffHistory>;
template class SetOf<DiffHistory>;
void SetData<DiffHistory>::write( ostream& ostr ) const { }
void SetData<DiffHistory>::read( istream& istr ) { }


//template class SetData<OID>;
template class SetOf<OID>;
void SetData<OID>::write( ostream& ostr ) const { }
void SetData<OID>::read( istream& istr ) { }

template class SetData<Generator>;
template class SetOf<Generator>;

//@dp & @ep
int SetData<Chars>::hashElement(const Chars& t) const { return t.length();}
template class SetOf<Chars>;

int SetData<Integer>::hashElement(const Integer & t) const 
  { return t.as_long(); }
template class SetData<Integer>;
template class SetOf<Integer>;

int SetData<Rational>::hashElement(const Rational & t) const 
  { return t.numerator().as_long(); }
template class SetData<Rational>;
template class SetOf<Rational>;

/*@db
#include "KState.h"
int SetData<KState>::hashElement(const KState & s) const 
  { return s[0]; }
template class SetData<KState>;
template class SetOf<KState>;
*/

int SetData<Map>::hashElement(const Map & M) const 
  { return M.generatingImages(0).length(); }

int SetData<double>::hashElement(const double & d) const 
  { return (int)d; }
template class SetData<double>;
template class SetOf<double>;

template class SetData<RSWord>;
template class SetOf<RSWord>;
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
