\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/packagessmapps.pamphlet}
\author{The Magnus Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "Menu.h"
#include "fastProblems.h"
#include "SMFPGroup.h"
#include "PackagesData.h"
#include "PackagesObject.h"

@
<<include.c>>=
//#include "pps.h"
#include "PackagesData.h"
#include "Vector.h"
#include "ObjectSmith.h"
#include "OutMessages.h"
#include "IsNilpotentProblem.h"
#include "SMHomomorphism.h"

@
\section{class PackageBlackBox}
\subsection{PackageBlackBox Constructor}
<<PackageBlackBox Constructor.h>>=
  PackageBlackBox( PObject* po, const Chars&, const ListOf<Chars>& pl ); 
@
\subsection{PackageBlackBox Destructor}
<<PackageBlackBox Destructor.h>>=
  ~PackageBlackBox(){}
@
\subsection{PackageBlackBox::start}
<<PackageBlackBox::start.h>>=
  bool start();
@
\subsection{PackageBlackBox::finished}
<<PackageBlackBox::finished.h>>=
  bool finished();
@
\subsection{PackageBlackBox::getLine}
<<PackageBlackBox::getLine.h>>=
  bool getLine( Chars& line );
@
\subsection{class PackageBlackBox}
<<class PackageBlackBox>>=
class PackageBlackBox {
public:
<<PackageBlackBox Constructor.h>>
<<PackageBlackBox Destructor.h>>
<<PackageBlackBox::start.h>>
<<PackageBlackBox::finished.h>>
<<PackageBlackBox::getLine.h>>

private:
  friend class RunPackageARCer;
  BlackBox package;
  FPGroup theGroup;
  Chars initString;
  Chars theCommand;
  PObject* theObject;
  ListOf<Chars> paramList;
};

@
\section{class AddPackage}
\subsection{AddPackage Constructor}
<<AddPackage Constructor.h>>=
 AddPackage(const Chars& n = Chars(), const Chars& c = Chars(), 
	    int cs = 0, Type os = Type(Type::notype()), 
            const ListOf<ParamRecord>& pl = ListOf<ParamRecord>() );
@
<<AddPackage Constructor.c>>=
AddPackage::AddPackage(const Chars& n, const Chars& c, int cs, Type os,
		       const ListOf<ParamRecord>& pl)
  : Supervisor( true/*! G.gic.haveFastWordProblem()*/ ),
    //    theGroup( G ),
    theName( n ),
    theCommand( c ),
    checkinSelect( cs ),
    objectSelect( os ),
    paramList( pl )
{
  resultIsFast();
}

@
\subsection{AddPackage::viewStructure}
<<AddPackage::viewStructure.h>>=
  void viewStructure(ostream& ostr) const;  // overrides SMObject
@
<<AddPackage::viewStructure.c>>=
void AddPackage::viewStructure(ostream& ostr) const
{
}

@
\subsection{AddPackage::takeControl}
<<AddPackage::takeControl.h>>=
  void takeControl( );         // overrides ComputationManager
@
<<AddPackage::takeControl.c>>=
void AddPackage::takeControl( )
{
  Packages ps;
  ps.addPackage( theName, theCommand, objectSelect, checkinSelect, paramList);
  PObject* po = getPObjectFromType( objectSelect );
  po->addPackagesToMenu();
  delete po;
  LogMessage msg;
  msg << "Package \\\"" << theName << "\\\" was added.";
  msg.send();
}

@
\subsection{AddPackage::start}
<<AddPackage::start.h>>=
  void start( ) { }           // overrides ComputationManager
@
\subsection{AddPackage::terminate}
<<AddPackage::terminate.h>>=
  void terminate( ) { }       // overrides ComputationManager
@
\subsection{class AddPackage}
<<class AddPackage>>=
class AddPackage : public Supervisor
{
public:
<<AddPackage Constructor.h>>
<<AddPackage::viewStructure.h>>
<<AddPackage::takeControl.h>>
<<AddPackage::start.h>>
<<AddPackage::terminate.h>>

private:
 // SMFPGroup& theGroup;
  Chars theName;
  Chars theCommand;
  int checkinSelect;
  Type objectSelect;
  ListOf<ParamRecord> paramList;
};

@
\section{class EditPackage}
\subsection{EditPackage Constructor}
<<EditPackage Constructor.h>>=
  EditPackage( Type id = Type( Type::notype() ), int i = 0, 
              Chars action = Chars() );
@
<<EditPackage Constructor.c>>=
EditPackage::EditPackage( Type id, int i, Chars c  )
  : Supervisor( true ),
    theObject( getPObjectFromType( id ) ),
    theIndex( i ),
    theAction( c )

{
  resultIsFast();
}

@
\subsection{EditPackage Destructor}
<<EditPackage Destructor.h>>=
 ~EditPackage() { delete theObject; }
@
\subsection{EditPackage::viewStructure}
<<EditPackage::viewStructure.h>>=
  void viewStructure(ostream& ostr) const;  // overrides SMObject
@
<<EditPackage::viewStructure.c>>=
void EditPackage::viewStructure(ostream& ostr) const
{
}

@
\subsection{EditPackage::takeControl}
<<EditPackage::takeControl.h>>=
  void takeControl( );         // overrides ComputationManager
@
<<EditPackage::takeControl.c>>=
void EditPackage::takeControl( )
{
  Packages ps;
  ListOf<ParamRecord> params;
  PackageRecord r = ps.getPackage(theObject, theIndex,params);

  ListIterator<ListOf<ParamRecord> > I(params);
  for (I.reset();!I.done();I.next()) {
   LogMessage msg;
   msg <<    "Parameters :  " << I.value().getName() << ", type " << int(I.value().getType());
   msg.send();
  }

  if ( theAction == Chars("delete") ) {
    ps.deletePackage( theObject, theIndex );
    theObject->addPackagesToMenu();
    
    LogMessage msg1;
    msg1 <<  "Package \\\"" << r.getName() <<"\\\" was deleted.";
    msg1.send();
  } else {
    Chars obj_name = theObject->getObjectName();
    PackageInfoMessage  msg(r.getName(),r.getCommand(),
		    Packages::getCheckinTypeName(r.getCheckinSelection()), 
		    obj_name);
    msg.send();
  }
}

@
\subsection{EditPackage::start}
<<EditPackage::start.h>>=
  void start( ) { }           // overrides ComputationManager
@
\subsection{EditPackage::terminate}
<<EditPackage::terminate.h>>=
  void terminate( ) { }       // overrides ComputationManager
@
\subsection{class EditPackage}
<<class EditPackage>>=
class EditPackage : public Supervisor
{
public:
<<EditPackage Constructor.h>>
<<EditPackage Destructor.h>>
<<EditPackage::viewStructure.h>>
<<EditPackage::takeControl.h>>
<<EditPackage::start.h>>
<<EditPackage::terminate.h>>

private:
  PObject* theObject;
  int theIndex;
  Chars theAction;
};

@
\section{class RunPackageARCer}
\subsection{RunPackageARCer Constructor}
<<RunPackageARCer Constructor.h>>=
  RunPackageARCer( ComputationManager& boss, PObject* po, const Chars& com, 
		   const ListOf<Chars>& pl ) : 
    ARCer( boss ),
    package(po,com, pl)
    { } 
@
\subsection{RunPackageARCer::getFileName}
<<RunPackageARCer::getFileName.h>>=
  Chars getFileName() const { return file.getFileName();}
@
\subsection{RunPackageARCer::runComputation}
<<RunPackageARCer::runComputation.h>>=
  void runComputation( );
@
<<RunPackageARCer::runComputation.c>>=
void RunPackageARCer::runComputation( )
{
  
  if ( package.start())
    file << "Text { Package started. } \n" << flush;
  else {
    file << "Text { Couldn't start the package } \n" << flush;
    return;
  }

  //  Timer t(delay()*1000);
  while ( !package.finished() ) {
    Chars line;
    if (package.getLine(line)){
      file << line << endl <<  flush;
      //file.sync();
    }
    
  }
  
  file << "Text { Package finished. } \n" <<  flush;
}

@
\subsection{RunPackageARCer::writeResults}
<<RunPackageARCer::writeResults.h>>=
  void writeResults( ostream& );
@
<<RunPackageARCer::writeResults.c>>=
void RunPackageARCer::writeResults( ostream& out ) 
{}

@
\subsection{RunPackageARCer::readResults}
<<RunPackageARCer::readResults.h>>=
  void readResults( istream& );
@
<<RunPackageARCer::readResults.c>>=
void RunPackageARCer::readResults( istream& in )
{}

@
\subsection{class RunPackageARCer}
<<class RunPackageARCer>>=
class RunPackageARCer : public ARCer
{
public:
<<RunPackageARCer Constructor.h>>
<<RunPackageARCer::getFileName.h>>
<<RunPackageARCer::runComputation.h>>
<<RunPackageARCer::writeResults.h>>
<<RunPackageARCer::readResults.h>>
private:
  PackageBlackBox package;
  File file;
};

@
\section{class RunPackage}
\subsection{RunPackage Constructor}
<<RunPackage Constructor.h.1>>=
  RunPackage( SMFPGroup& G, int id = 0);
@
<<RunPackage Constructor.c.1>>=
RunPackage::RunPackage( SMFPGroup& G,  int id )
  : Supervisor( true ),
    theGroup( G ),
    theID( id ),
    started( false ),
    useGlobalLink( false ),
    pos(0),
    packageObject(new PGroup( G.getFPGroup() , 
                  G.oid(), G.gic.getNilpotentcyClass() ) )
    //  inStream( NULL )
    //arcer(*this, G.getFPGroup())
{
  initialize();
}

@
<<RunPackage Constructor.h.2>>=
  RunPackage( SMWord& w, int id = 0);
@
<<RunPackage Constructor.c.2>>=
RunPackage::RunPackage( SMWord& w,  int id )
  : Supervisor( true ),
    theGroup( w.getParent() ),
    theID( id ),
    started( false ),
    useGlobalLink( false ),
    pos(0)
{
  PGroup G(w.getParent().getFPGroup() ,
	   w.getParent().oid(), 
	   w.getParent().gic.getNilpotentcyClass() );
  
  packageObject = new PWord( G, w.getWord(), w.oid() );
  initialize();
}

@
<<RunPackage Constructor.h.3>>=
  RunPackage( SMSubgroup& s, int  id = 0);
@
<<RunPackage Constructor.c.3>>=
RunPackage::RunPackage( SMSubgroup& s,  int id )
  : Supervisor( true ),
    theGroup( s.getParent() ),
    theID( id ),
    started( false ),
    useGlobalLink( false ),
    pos(0)
{
  PGroup G(s.getParent().getFPGroup() ,
	   s.getParent().oid(), 
	   s.getParent().gic.getNilpotentcyClass() );
  
  
  packageObject =  new PSubgroup( G, s.getSubgroup().generators(), s.oid() );
  initialize();
}

@
<<RunPackage Constructor.h.4>>=
  RunPackage( SMMap& m, int id = 0);
@
<<RunPackage Constructor.c.4>>=
RunPackage::RunPackage( SMMap& m,  int id )
  : Supervisor( true ),
    theGroup( m.getDomain() ),
    theID( id ),
    started( false ),
    useGlobalLink( false ),
    pos(0)
{
  PGroup D(m.getDomain().getFPGroup() ,
	   m.getDomain().oid(), 
	   m.getDomain().gic.getNilpotentcyClass() );
  
  PGroup R(m.getRange().getFPGroup() ,
	   m.getRange().oid(), 
	   m.getRange().gic.getNilpotentcyClass() );
  

  packageObject = new PMap( m.getMap(), D, R, m.oid() );

  initialize();
}

@
<<RunPackage Constructor.h.5>>=
  RunPackage( SMHomomorphism& m, int id = 0);
@
<<RunPackage Constructor.c.5>>=
RunPackage::RunPackage( SMHomomorphism& m,  int id )
  : Supervisor( true ),
    theGroup( m.getDomain() ),
    theID( id ),
    started( false ),
    useGlobalLink( false ),
    pos(0)
{
  PGroup D(m.getDomain().getFPGroup() ,
	   m.getDomain().oid(), 
	   m.getDomain().gic.getNilpotentcyClass() );
  PGroup R(m.getRange().getFPGroup() ,
	   m.getRange().oid(), 
	   m.getRange().gic.getNilpotentcyClass() );
  packageObject = new PHomo( m.getMap(), D, R, m.oid() );
  initialize();
}

@
<<RunPackage Constructor.h.6>>=
  RunPackage( SMWord& ,SMWord& , int id = 0);
@
<<RunPackage Constructor.c.6>>=
RunPackage::RunPackage( SMWord& w1, SMWord& w2, int id )
  : Supervisor( true ),
    theGroup( w1.getParent() ),
    theID( id ),
    started( false ),
    useGlobalLink( false ),
    pos(0)
    
{  
  PGroup G(w1.getParent().getFPGroup() ,
	   w1.getParent().oid(), 
	   w1.getParent().gic.getNilpotentcyClass() );
  packageObject = new PWordWord(G, w1.getWord(), 
			       w2.getWord() ,
			       w1.oid(), w2.oid() );
  initialize();
}

@
<<RunPackage Constructor.h.7>>=
  RunPackage( SMSubgroup& ,SMSubgroup& , int id = 0);
@
<<RunPackage Constructor.c.7>>=
RunPackage::RunPackage( SMSubgroup& s1, SMSubgroup& s2, int id )
  : Supervisor( true ),
    theGroup( s1.getParent() ),
    theID( id ),
    started( false ),
    useGlobalLink( false ),
    pos(0)
{
  PGroup G(s1.getParent().getFPGroup() ,
	   s1.getParent().oid(), 
	   s1.getParent().gic.getNilpotentcyClass() );
  packageObject  = new PSubgroupSubgroup(G, 
					 s1.getSubgroup().generators(), 
					 s2.getSubgroup().generators(),
					 s1.oid(), s2.oid());
  initialize();
}

@
<<RunPackage Constructor.h.8>>=
  RunPackage( SMSubgroup& ,SMWord& , int id = 0);
@
<<RunPackage Constructor.c.8>>=
RunPackage::RunPackage( SMSubgroup& s, SMWord& w, int id )
  : Supervisor( true ),
    theGroup( s.getParent() ),
    theID( id ),
    started( false ),
    useGlobalLink( false ),
    pos(0)
{
  PGroup G(s.getParent().getFPGroup() ,
	   s.getParent().oid(), 
	   s.getParent().gic.getNilpotentcyClass() );
  packageObject = new PSubgroupWord(G, 
				   s.getSubgroup().generators(), 
				    w.getWord(), 
				    s.oid(), w.oid() );
  initialize();
}

@
\subsection{RunPackage Destructor}
<<RunPackage Destructor.h.>>=
  ~RunPackage() { delete arcer; delete packageObject; }
@
\subsection{RunPackage::initialize}
<<RunPackage::initialize.h>>=
  void initialize();
@
<<RunPackage::initialize.c>>=
void RunPackage::initialize(  )
{
  Packages ps;
  thePackageRecord = ps.getPackage(packageObject, theID, params);
  packageName =  thePackageRecord.getName();
}

@
\subsection{RunPackage::viewStructure}
<<RunPackage::viewStructure.h>>=
  void viewStructure(ostream& ostr) const;  // overrides SMObject
@
<<RunPackage::viewStructure.c>>=
void RunPackage::viewStructure(ostream& ostr) const
{
  EnumertatorProblemView pv(oid(),Text(packageName),Text(packageName),
			    helpID("RunPackage",theGroup),
			    Text(packageName)
			    );
  ListIterator<ListOf<ParamRecord> > I(params);
  int pname = 0;
  for (I.reset();!I.done();I.next(), pname++) {
    if (I.value().getType() == ParamRecord::INT)
      pv.addParameter(EditInteger( Chars(pname), 
                      I.value().getName(),1,0,-MAXINT,MAXINT) );
    else if ( I.value().getType() == ParamRecord::STRING)
      pv.addParameter(  EditText( Chars(pname),I.value().getName(),1,"") );
    else if ( I.value().getType() == ParamRecord::BOOL)
      pv.addParameter(  EditBool( Chars(pname),I.value().getName(),1,0) );
    else
      error("Type is not supported yet");
  }
  /*
  pv.addParameter(EditBool( "bool", "Some bool parameter",1,0) );
  RadioButton rRB1("RB1","Use Some button parameter");
  RadioButton rRB2("RB2","Do not use some button parameter");
  RadioButtonGroup RBG("RBG");
  RBG.add(rRB1);
  RBG.add(rRB2);
  pv.addParameter(RBG);
  */
   pv.addProblem( Subproblem("P1",ThisARCSlotID(),
			     "For the use of this package",100));
   submit(ostr, pv);
}

@
\subsection{RunPackage::takeControl}
<<RunPackage::takeControl.h>>=
  void takeControl( );         // overrides ComputationManager
@
<<RunPackage::takeControl.c>>=
void RunPackage::takeControl( )
{
  if ( freeARCs() > 0 ){
    bool arcerStatus =  true;
    bool finished = arcer->takeControl();
    sendOutput();
    if( finished ) {
      adminTerminate();
      return;
    }
    else
      usedOneARC();
  }
}

@
\subsection{RunPackage::start}
<<RunPackage::start.h>>=
  void start( );           // overrides ComputationManager
@
<<RunPackage::start.c>>=
void RunPackage::start() {
  ListOf<Chars> paramList;
  ListIterator<ListOf<ParamRecord> > I(params);
  int pname = 0;
  for (I.reset();!I.done();I.next(), pname++) {
    Chars pstring;
    pstring  = paramToChars(I.value().getName(),  
			    getParameters().getValue(Chars(pname)), 
			    I.value().getType());
    paramList.append( pstring );
  }
  arcer = 
     new RunPackageARCer( *this, packageObject, 
                          thePackageRecord.getCommand(), paramList);
}

@
\subsection{RunPackage::terminate}
<<RunPackage::terminate.h>>=
  void terminate( ) { }       // overrides ComputationManager
@
\subsection{RunPackage::readline}
<<RunPackage::readline.h>>=
  void readline(istream& in, char* line, int blength);
@
<<RunPackage::readline.c>>=
void RunPackage::readline(istream& in, char* line, int blength)
{
  int p=-1;
  while (!in.eof()){
    p++;
    if (p >= blength)
      error("void RunPackage::readline(istream& , char*, int ) : line length over the limit. ");
    in.read(&line[p],1);
    if (line[p] == '\n')
      break;
  }
  line[p]='\0';
}

@
\subsection{RunPackage::paramToChars}
<<RunPackage::paramToChars.h>>=
  Chars paramToChars(Chars name, PValue value, 
                     ParamRecord::PARAM_TYPE t) const ;
@
<<RunPackage::paramToChars.c>>=
Chars RunPackage::paramToChars(Chars name, PValue value, ParamRecord::PARAM_TYPE t) const 
{
  Chars pstring;
  Chars tmpV;
  if (t == ParamRecord::INT){
    pstring = Chars("Integer");
    int i = (int)value;
    tmpV = Chars(i);
  } else if (t == ParamRecord::BOOL){
    pstring = Chars("Boolean");
    int i = (int)value;
    tmpV = Chars(i);
  } else if ( t == ParamRecord::STRING){
    pstring = Chars("String");
    tmpV = value;
  }else
    error("Type is not supported yet");
  return pstring + Chars(" ( ") + name + Chars(") (  ") + tmpV + ") ";
}

@
\subsection{RunPackage::trimall}
<<RunPackage::trimall.h>>=
  void trimall( char* s, int max = 1000) const;
@
<<RunPackage::trimall.c>>=
void RunPackage::trimall( char* s, int max)const { 
  int shift = 0;
  int i=0;
  for(i=0;i<max && s[i]!='\0';i++){
    s[i-shift] = s[i];
    if (s[i] == ' ') shift++;
  }
  s[i-shift] = '\0';
}

@
\subsection{RunPackage::actionParser}
<<RunPackage::actionParser.h>>=
  bool actionParser(char* ) const;
@
<<RunPackage::actionParser.c>>=
bool RunPackage::actionParser(char* s) const
{
  // send plain text to the log
  if ( strcmp(s, "Text") == 0){
    char* tok = strtok(NULL, "}");
    LogMessage msg;
    msg << tok;
    msg.send();
    return true;
  }
  // create a file link 
  if (strcmp(s, "Link") == 0){
    char* text = strtok(NULL, ",");
    char* filename = strtok(NULL, "}");
    LogMessage msg1;
    msg1 << Link(Chars( text ),
		 "Package",Chars(filename), true );
    msg1.send();
    ofstream colorf(Chars(filename)+Chars(".color"),ios::app);
    colorf << "#0000000%000@" << flush;
    colorf.close();
    return true;
  }
  // Create an object in the workspace
  if (strncmp("Create", s, strlen("Create")) == 0 ){
    // get object description and parent
    char* description = strtok(NULL, "|");
    Chars errMsg;
    // create a group
    if (strcmp(s, "CreateGroup")==0){
      FPGroup G;
      strstream ss;
      ss << description << endl;
      ss >> G;
      SMFPGroup* smo =
	new SMFPGroup( G,Text("The group created from a package") );
      ListOf<OID> dependencies;
      CheckinMessage( *smo, "", dependencies ).send();
      return true;
    } else { // if not a group than ...
      char* soid = strtok(NULL, "|" );
      int oid = atoi( soid );
      OID parentOID( oid );
      // @am just for debug purposes
      LogMessage msg;
      msg << s << ":  " << description  <<  " for " << oid << ".";
      msg.send();   
      SMObject* pGroup = TheObjects::get( parentOID );
      if ( pGroup == NULL ){
	LogMessage msg;
	msg << "Couldn`t create an object from a package: cannot find parent's information.";
	msg.send();
      } else {
	strstream ss;
	// create a word in a workspace
	if (strcmp(s, "CreateWord") == 0) {
	  ss << description << endl;
	  Word w = ((SMFPGroup*)pGroup)->getFPGroup().readWord(ss,errMsg);
	  if (errMsg.length()==0){
	    SMObject* smo =
	      new SMWord( *((SMFPGroup*)pGroup),w,
			  Text("The word created by a package" )
			  );
	    ListOf<OID> dependencies(*((SMFPGroup*)pGroup) );
	    CheckinMessage( *smo, "", dependencies ).send();
	  } else {
	    LogMessage msg;
	    msg << "Couldn`t create a word from a package: " << errMsg;
	    msg.send();
	  }
	  return true;
	}
	// create a subgroup in a workspace
	if (strcmp(s, "CreateSubgroup") == 0) {
	  ss << "{ " << description << " }" << endl;
	  VectorOf<Word> sg = ((SMFPGroup*)pGroup)->getFPGroup().readVectorOfWords(ss,errMsg);
	  if (errMsg.length()==0){
	    SGofFreeGroup sgtmp(((SMFPGroup*)pGroup)->getFreePreimage() , sg );
	    SMObject* smo =
	      new SMSubgroup( *((SMFPGroup*)pGroup),sgtmp,
			      Text("The subgroup created by a package" )
			      );
	    ListOf<OID> dependencies( *((SMFPGroup*)pGroup) );
	    CheckinMessage( *smo, "", dependencies ).send();
	  } else {
	    LogMessage msg;
	    msg << "Couldn`t create a subgroup from a package: " << errMsg;
	    msg.send();
	  }
	  return true;
	}
	// create a map in a workspace
	if (strcmp(s, "CreateMap") == 0) {
	  char* soid2 = strtok(NULL, "|" );
	  int oid2 = atoi( soid2 );
	  OID parentOID2( oid2 );
	  // read range
	  SMObject* pGroup2 = TheObjects::get( parentOID2 );
	  Map tmpmap(((SMFPGroup*)pGroup)->getFPGroup(),
                     ((SMFPGroup*)pGroup2)->getFPGroup());
	  ss << "{ " << description << " }" << endl;
	  ss >> tmpmap;
	  //	if (errMsg.length()==0){
	  SMObject* smo =
	    new SMMap( *((SMFPGroup*)pGroup), *((SMFPGroup*)pGroup2),tmpmap,
		       Text("The map created by a package" )
		       );
	  ListOf<OID> dependencies( *((SMFPGroup*)pGroup) );
	  dependencies.append( *((SMFPGroup*)pGroup2) );
	  CheckinMessage( *smo, "", dependencies ).send();
	  // 	} else {
	  //   LogMessage msg;
	  //   msg << "Couldn`t create a subgroup from a package: " << errMsg;
	  //   msg.send();
	  // }
	  return true;
	}
      }
    }
  }
  return false;
}

@
\subsection{RunPackage::sendOutput}
<<RunPackage::sendOutput.h>>=
  void sendOutput();
@
<<RunPackage::sendOutput.c>>=
void RunPackage::sendOutput()
{
  ifstream in(arcer->getFileName());
  in.seekg(pos);
  char theline[1000]; 
  while (!in.eof()){
    readline(in,theline,999);
    pos = in.tellg();
    if (strlen(theline) > 0 ){
      char* tok = strtok(theline, "{");
      char trimtok[1000];
      strcpy(trimtok, tok);
      trimall(trimtok);
      if ( !actionParser(trimtok) )  {
	//  all output goes into a file link
	if (!started){
	  LogMessage msg1;
	  msg1 << 
           Link(Chars( "Click here to see the details from ") + packageName,
		       "Package",
		       file.getFileName(), true );
	  msg1.send();
	  started = true;
	  useGlobalLink = true;
	}
	file << theline << endl;
      }
    }
  }
  in.close();
}

@
\subsection{class RunPackage}
<<class RunPackage>>=
class RunPackage : public Supervisor
{
public:
<<RunPackage Constructor.h.1>>
<<RunPackage Constructor.h.2>>
<<RunPackage Constructor.h.3>>
<<RunPackage Constructor.h.4>>
<<RunPackage Constructor.h.5>>
<<RunPackage Constructor.h.6>>
<<RunPackage Constructor.h.7>>
<<RunPackage Constructor.h.8>>
<<RunPackage Destructor.h.>>
<<RunPackage::initialize.h>>
<<RunPackage::viewStructure.h>>
<<RunPackage::takeControl.h>>
<<RunPackage::start.h>>
<<RunPackage::terminate.h>>
<<RunPackage::readline.h>>
private:
<<RunPackage::paramToChars.h>>
<<RunPackage::trimall.h>>
<<RunPackage::actionParser.h>>
<<RunPackage::sendOutput.h>>
  RunPackageARCer* arcer;
  SMFPGroup& theGroup;
  int theID;
  Chars packageName;
  PackageRecord thePackageRecord;
  PObject* packageObject;
  ListOf<ParamRecord> params;
  bool started;
  bool useGlobalLink;
  streampos pos;
  // char tmpBuffer[1000];
  //  ifstream* inStream;
  File file;
};

@
\section{ObjectSmith::outputPackagesMenuDefns}
<<ObjectSmith::outputPackagesMenuDefns.c>>=
void ObjectSmith::outputPackagesMenuDefns(ostream& ostr)
{
  {
    Menu0 M( Menu::PACKAGES );
    M.startItemGroup();
    M.add( ReadPackage(), "Add a package", 
	   DefinePackage() );
    M.add( ReadEditPackage(), "Edit the list of packages", 
	   DefineEditPackage() );
    M.done();
  }
  Packages().addPackagesToMenu(  );
}

@
\section{license}
Copyright (C) 1994 The New York Group Theory Cooperative
See magnus/doc/COPYRIGHT for the full notice.
@
\section{PackagesSMApps.h}
<<PackagesSMApps.h>>=
// src/packagessmapps.pamphlet
<<include>>

#ifndef _SMAppsPackages_h_
#define _SMAppsPackages_h_

<<class PackageBlackBox>>
<<class AddPackage>>
<<class EditPackage>>
<<class RunPackageARCer>>
<<class RunPackage>>
#endif
@
\section{packagessmapps.c}
<<*>>=
<<include.c>>
<<EditPackage Constructor.c>>
<<EditPackage::takeControl.c>>
<<EditPackage::viewStructure.c>>

<<AddPackage Constructor.c>>
<<AddPackage::takeControl.c>>
<<AddPackage::viewStructure.c>>

<<RunPackageARCer::runComputation.c>>
<<RunPackageARCer::writeResults.c>>
<<RunPackageARCer::readResults.c>>

<<RunPackage Constructor.c.1>>
<<RunPackage Constructor.c.2>>
<<RunPackage Constructor.c.3>>
<<RunPackage Constructor.c.4>>
<<RunPackage Constructor.c.5>>
<<RunPackage Constructor.c.6>>
<<RunPackage Constructor.c.7>>
<<RunPackage Constructor.c.8>>
<<RunPackage::initialize.c>>
<<RunPackage::start.c>>
<<RunPackage::takeControl.c>>
<<RunPackage::readline.c>>
<<RunPackage::paramToChars.c>>
<<RunPackage::sendOutput.c>>
<<RunPackage::actionParser.c>>
<<RunPackage::viewStructure.c>>
<<RunPackage::trimall.c>>

<<ObjectSmith::outputPackagesMenuDefns.c>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
