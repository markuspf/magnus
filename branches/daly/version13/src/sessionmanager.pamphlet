\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/sessionmanager.pamphlet}
\author{Roger Needham}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
The Session Manager is invoked directly from main which lives in
[[src/magnus]]. After parsing the command line arguments main 
calls the start method.
\section{SessionManager.h}
\subsection{includes}
<<include.h>>=
#include <iostream.h>
#include "ObjectSmith.h"
#include "OutMessages.h"

@
<<include.c>>=
#include "SessionManager.h"
#include "TheObjects.h"
#include "ComputationManager.h"
#include "Timer.h"
#include "DatabaseManager.h"

@
\subsection{class SessionManager}
SessionManager dispatches incoming messages.

Generic message handling could be implemented with a class
MessageHandler, which would provide `mailbox ids' and automatic
registration for its derivates in the same way class SMObject
provides object ids.

But the recipient of a message can now only be a SMObject, or one
of the special cases: SessionManager, ObjectSmith.
So for now we assign `pseudo' object ids to the latter, and use
ordinary object ids for the `mailbox ids'.

Class SMObject provides a message reading interface.

<<class SessionManager>>=
class SessionManager
{
public:
<<getObjectSmithOid.h>>
private:
  friend int main(int argc, char* argv[]);
<<start.h>>
<<initializeFrontEnd.h>>
<<areMessages.h>>
<<readMessages.h>>
<<readMessage.h>>
<<takeControl.h>>
<<MessageTag.h>>
<<sessionManagerOid>>
<<objectSmithOid>>
<<databaseManagerOid>>
<<randomDefnGeneratorOid>>
<<magicCookie.h>>
<<quitRequested.h>>
};

@
\section{session manager}
\subsection{definitions}
<<definitions>>=
extern DatabaseManager TheDatabaseManager;

// Need this to init SessionManager::magicCookie :

//@db system porting

#ifdef BSD
extern "C" int getpid( );
#elif defined(SYSV)
extern "C" long int getpid( );
#endif

@
\subsection{struct Buffers}
<<struct Buffers>>=
// Helper class for entries in a chainable list of char* :
struct Buffers {
  Buffers( ) : buffers( new char*[size] ), index(0), next(0) { }
  ~Buffers( ) {
    for( int i = 0; i < index; ++i ) delete [] buffers[i];
    delete [] buffers;
    delete next;
  }
  Buffers* store(char* p) {
    buffers[index++] = p;
    if ( index == size ) {
      next = new Buffers;
      return next;
    }
    else
      return this;
  }
  void dump(char* p, int bufferSize) {
    for( int i = 0; i < index; ++i ) {
      for( int j = 0; j < bufferSize - 1; ++j )   // Skip \0's
        *p++ = buffers[i][j];
    }
    if ( next != 0 ) next->dump(p, bufferSize);
  }
  static const int size = 128;
  char** buffers;
  int index;
  Buffers* next;
};

@
\subsection{SessionManager}
\subsubsection{public getObjectSmithOid}
<<getObjectSmithOid.h>>=
  static OID getObjectSmithOid( ) { return objectSmithOid; }
@
\subsubsection{private start}
<<start.h>>=
  static void start( );
@
<<start.c>>=
void SessionManager::start( )
{
  initializeFrontEnd();
  while ( 1 ) {
	 readMessages();
	 TheObjects::passControl();
	 takeControl();
  }
}

@
\subsubsection{private readMessages}
<<readMessages.h>>=
  static void readMessages( );
@
<<readMessages.c>>=
void SessionManager::readMessages( )
{
  while ( areMessages() ) {
	 // To protect the message stream, we read each message (which consists
	 // of a single line) into a char* and make an istrstream of that.
	 // Get the message:
	 const int bufferSize = 1024;
	 char buffer[bufferSize];  // Don't whip the heap for small messages
	 char* realBuffer = buffer;
	 cin.getline(buffer, bufferSize);
	 if ( cin.fail() ) {
		if ( (int)(*buffer) == 0 ) return;
	// When debugging we might redirect input from a file, which results
	// in a fail state when we get to its end. In this case, *buffer == 0
		Buffers* moreBuffers = new Buffers;
		Buffers* curBuffers = moreBuffers;
		int bufferCount = 1;
		do {
		  if ( cin.bad() )
			 error("The front end message stream has gone bad");
		  //@rn Take better emergency action
		  cin.clear();
		  char* tmp = new char[bufferSize];
		  cin.getline(tmp, bufferSize);
		  curBuffers = curBuffers->store(tmp);
		  ++bufferCount;
		} while ( cin.fail() );
		realBuffer = new char[bufferSize * bufferCount];
		for(int i = 0; i < bufferSize; ++i ) realBuffer[i] = buffer[i];
		moreBuffers->dump(realBuffer + bufferSize - 1, bufferSize); 
                // Stomp \0
		delete moreBuffers;
	 }
	 // We politely ignore blank messages from the FE:
	 if ( (int)(*buffer) == 0 ) return;
    #ifdef DEBUG
	   cerr << "--> " << realBuffer << endl << flush;
    #endif
	 istrstream message(realBuffer);
	 // Process the raw message
	 int recipient;
	 message >> recipient;  //@rn Check for stream going bad
	 if ( recipient < 0 ) {
		// Special case
		if ( recipient == sessionManagerOid )
		  readMessage( message );
		else if ( recipient == objectSmithOid )
		  ObjectSmith::readMessage( message );
		else if ( recipient == databaseManagerOid )
		  TheDatabaseManager.readMessage( message );
		else
		  //@rn Warn of misdirected message
		  ;
	 } else {
		SMObject* smo = TheObjects::get(recipient);
		if ( smo ) {
		  smo->readMessage( message );
		} else {
		  //@rn Warn of misdirected message
		}
	 }
    // Clean up
	 if ( realBuffer != buffer ) delete realBuffer;
	 // Don't do this sooner! message is still using it.
  }
}

@
\subsubsection{private areMessages}
<<areMessages.h>>=
  static bool areMessages( );
@
<<areMessages.c>>=
bool SessionManager::areMessages( )
{
  static Timer timer( 200 );
  if ( ! timer.expired() ) return false;
  timer.reset( 200 );
  // Can you BELIEVE this kludgery?
  // Of course, main sets stdin to non-blocking.
  int ch = getchar();
  if ( ch == EOF ) {
	 clearerr(stdin);
	 return 0;
  } else {
	 ungetc(ch, stdin);
	 return 1;
  }
}

@
\subsubsection{private readMessage}
<<readMessage.h>>=
  static void readMessage(istream& istr);
@
<<readMessage.c>>=
void SessionManager::readMessage(istream& istr)
{
  MessageTag tag;
  istr >> (int&)tag;
  if ( tag == DELETE ) {
	 // Read list of OIDs to delete. Cumulate the dependency closure.
	 SetOf<OID> deleted;
	 int len, oid;
	 istr >> len;
	 while ( len-- ) {
		istr >> oid;
		deleted |= TheObjects::remove( OID( oid ) );
	 }
	 // Confirm the deletions.
	 cout << "confirm_delete_";
	 SetIterator<OID> I( deleted );
	 while ( !I.done() ) {
		cout << ' ' << I.value();
		I.next();
	 }
	 cout << endl << flush;
  } else if ( tag == QUIT ) {
    //@rn Implement
    //@db experiment
    if( !quitRequested ) {
      quitRequested = true;
      TheDatabaseManager.forceToFinish();
    }
  } else if ( tag == SET_NAME ) {
    int oid;
    Chars name;
    istr >> oid >> name;
    TheObjects::setName(oid,name);
  } else {
	 //@rn Warn of bad tag
  }
}

@
\subsubsection{private takeControl}
<<takeControl.h>>=
  static void takeControl( );
@
<<takeControl.c>>=
void SessionManager::takeControl( )
{
  TheDatabaseManager.takeControl();
  if( quitRequested ) {
    static bool userWarned = false;
    if( TheDatabaseManager.state() == DatabaseManager::STOPPED ) {
      for( int j = 0; j < TheObjects::theObjectsLength; ++j ) {
	SMObject* smo = TheObjects::theObjects[j];
	if ( smo != 0 && smo->isComputationManager()
	     && ((ComputationManager*)smo)->state()
	     == ComputationManager::RUNNING )
	  ((ComputationManager*)smo)->adminTerminate();
      }
      cout << "fakeQuit" << endl;
    }
    else {
      if( !userWarned ){
	Message msg;
	msg << 
	  "The database is modified. Please save the changes on the disk or "
	  "discard them by closing the database. After that the quitting "
	  "will be completed.";
	msg.send(); 
	userWarned = true;
      }
      if( TheDatabaseManager.state() != DatabaseManager::STOPPING ) {
	quitRequested = false;
      }
    }
  }
}

@
\subsubsection{private initializeFrontEnd}
<<initializeFrontEnd.h>>=
  static void initializeFrontEnd( );
@
<<initializeFrontEnd.c>>=
void SessionManager::initializeFrontEnd( )
{
  //------------------------------ Greeting ---------------------------------//
  cout << "magic_cookie_ " << magicCookie << endl;
  //-------------------------- Global Templates -----------------------------//
  cout
	 << "init_quit_msg_ {" << sessionManagerOid << ' ' << QUIT << '}' << endl
	 << "init_delete_msg_ {" << sessionManagerOid << ' ' << DELETE << '}' << endl
	 << "init_setName_msg_ {" << sessionManagerOid << ' ' << SET_NAME << '}' << endl;
  ComputationManager::printGlobalMessageTemplates( cout );
  SMFPGroup::printGlobalMessageTemplates( cout );
  DatabaseManager::printGlobalMessageTemplate( cout );
  //----------------------------- Type Names --------------------------------//
  cout
	 << "type_name_ {finitely presented group} G " << SMFPGroup::type() << endl
	 << "type_name_ {word} w " << SMWord::type() << endl
	 << "type_name_ {subgroup} H " << SMSubgroup::type() << endl
	 << "type_name_ {map} m " << SMMap::type() << endl
	 << "type_name_ {equation} E " << SMEquation::type() << endl
	 ;
  //------------------------------- Menus -----------------------------------//
  ObjectSmith::outputCheckinMenuDefns( cout );
  ObjectSmith::outputToolsMenuDefns( cout );
  ObjectSmith::outputMakeMenuDefns( cout );
  ObjectSmith::outputPackagesMenuDefns( cout );
  ObjectSmith::outputTestingMenuDefns( cout );
  //----------------------- Properties Registration  ------------------------//
  registerProperties();
  //--------------------------- Init Complete -------------------------------//
  cout << "boot_done_" << endl << flush;
}

@
\subsection{static initializations}
\subsubsection{MessageTag}
Some messages are handled by SessionManager directly. These are
the message tags:
<<MessageTag.h>>=
  enum MessageTag { QUIT, DELETE, SET_NAME };
@
\subsubsection{sessionManagerOid}
<<sessionManagerOid>>=
  static const int sessionManagerOid = -1;
@
\subsubsection{objectSmithOid}
<<objectSmithOid>>=
  static const int objectSmithOid = -2;
@
\subsubsection{databaseManagerOid}
<<databaseManagerOid>>=
  static const int databaseManagerOid = -3;
@
\subsubsection{randomDefnGeneratorOid}
<<randomDefnGeneratorOid>>=
  static const int randomDefnGeneratorOid = -4;
@
\subsubsection{magicCookie}
Will be used for low-rent message authentication.
<<magicCookie.h>>=
  static const long magicCookie;
@
<<magicCookie.c>>=
const long SessionManager::magicCookie = getpid();
@
\subsubsection{quitRequested}
<<quitRequested.h>>=
  static bool quitRequested;
@
<<quitRequested.c>>=
bool SessionManager::quitRequested = false;
@
\section{license}
Copyright (C) 1995 The New York Group Theory Cooperative
See magnus/doc/COPYRIGHT for the full notice.
\section{Include File}
<<SessionManager.h>>=
// src/sessionmanager.pamphlet
#ifndef _SESSIONMANAGER_H_
#define _SESSIONMANAGER_H_

<<include.h>>
<<class SessionManager>>
#endif
@
\section{Code}
<<*>>=
// src/sessionmanager.pamphlet
<<include.c>>
<<definitions>>
<<struct Buffers>>
<<start.c>>
<<readMessages.c>>
<<areMessages.c>>
<<readMessage.c>>
<<takeControl.c>>
<<initializeFrontEnd.c>>
<<magicCookie.c>>
<<quitRequested.c>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
