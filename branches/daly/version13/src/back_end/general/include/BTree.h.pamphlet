\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/general/include/BTree.h}
\author{Dmitry Bormotov}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{BTree.h}
\section{include}
<<include>>=
#include "global.h"

@
\section{class BTreePage}
<<class BTreePage>>=
template <class Key, class Value> class BTreePage
{
  friend class BTree<Key,Value>;
  friend class BTreeIterator<Key,Value>;
public:
  BTreePage( int order ) : theOrder( order ), numOfKeys( 0 ), 
      parentLink( NULL )
  {
  #if SAFETY > 0
    if( order < 2 )
      error("template <class Key, class Value> class BTree::BTree( int ) : "
	    "the order of BTree must be 2 or more.");
  #endif  
    
    keys = new (Key*)[order-1];
    values = new (Value*)[order-1];
    links = new (BTreePage<Key,Value>*)[order];
    for( int i = 0; i < order; ++i )
      links[i] = NULL;
  }

  ~BTreePage( ) 
  { 
    delete [] links;
    delete [] keys;
    delete [] values;
  }

private:
  int theOrder;
  int numOfKeys;
  Key **keys;
  Value **values;
  BTreePage **links;
  BTreePage *parentLink;
  int numOfParentLink;
#ifdef DEBUG
  //friend int main( );
#endif

};

@
\section{class BTree}
<<class BTree>>=
template <class Key, class Value> class BTree
{
  friend class BTreeIterator<Key,Value>;
public:
  BTree( int order = 6 ) : theOrder( order )
  {
    #if SAFETY > 0
      if( order < 3 )
	error("template <class Key, class Value> class BTree::BTree( int ) : "
	      "the order of BTree must be 3 or more.");
    #endif  
      
    root = new BTreePage<Key,Value>(order);
  }
  // Constructs a BTree with "order" keys and values in each node.

  BTree( const BTree& );
  BTree& operator = ( const BTree& ){
    error( "BTree& operator = ( const BTree& ) : not emplemented yet");
  }
  //copy constractor not implemented yet
 
  ~BTree( ) 
  { 
    deleteAll(); 
    delete root;
  }

  bool remove( const Key& key );
  void insert( const Key& key, const Value& value );
  Value* search( const Key& key );
  // returns the corresponding value or NULL if there's no such key in
  // the tree.

  friend ostream& operator << ( ostream& ostr, const BTree& T )
  {
     error("Operator ostr < BTree not emplemeted yet");
  }

  friend ostream& operator < ( ostream& ostr, const BTree& T )
   {
          error("Operator ostr < BTree not emplemeted yet");
   }
  friend istream& operator > ( istream& ostr, const BTree& T )
   {
          error("Operator istr > BTree not emplemeted yet");
   }
  friend bool operator == ( const BTree& T,const BTree& T1 )
   {
          error("Operator BTree == BTree not emplemeted yet");
   }
   void printAll();
protected:
  virtual void theKeyIsFound( BTreePage<Key,Value>& keyPage, int position ) { }

  bool search( const Key& key, const BTreePage<Key,Value>& searchPage,
	       BTreePage<Key,Value> **keyPage, int& position );
  
  void deleteKey( BTreePage<Key,Value> *page, int position );
  void deleteAll( ) { deleteAllPages(root); }
  void deleteAllPages( BTreePage<Key,Value> *page );

private:
  int theOrder;
  BTreePage<Key,Value> *root;

/*
  void printOn( ostream& ) const;
*/

#ifdef DEBUG
  // void printAll( );
  //friend int main( );

#endif

};

@
\section{class BTreeIterator}
Note: This iterator doesn't make a copy of BTree. 
Be careful - don't delete keys in the tree when iterating over them.
<<class BTreeIterator>>=
template <class Key, class Value> class BTreeIterator 
{
  friend class BTree<Key,Value>; 
public:
  BTreeIterator( const BTree<Key,Value>& T ) : tree( T ) { reset( ); }

  // No default constructor
  // Copy constructor provided by compiler (does logical deep copy).
  bool done( ) { return bDone; }
  void reset( );

  Value getValue( ) 
  { 
  #if SAFETY > 0
    if( bDone )
      error("Value BTreeIterator<Key,Value>::value( ) : "
	    "Tried to retrieve value from iterator which is done.");
  #endif  
    
    return *value; 
  }

  Key getKey( ) 
  { 
  #if SAFETY > 0
    if( bDone )
      error("Value BTreeIterator<Key,Value>::value( ) : "
	    "Tried to retrieve value from iterator which is done.");
  #endif  
    
    return *key; 
  }

  bool next( );

private:
  const BTree<Key,Value>& tree; 
  BTreePage<Key,Value> *page;  // current page in tree 
  int linkNumber;    // current link in tree
  bool bDone;
  Key *key;
  Value *value;
  
};

@
\section{license}
<<license>>=
// Copyright (C) 1994-2004 The New York Group Theory Cooperative
// See license/NYGTC for the full notice
@
<<*>>=
// src/backend/general/include/BTree.h
#ifndef _BTREE_H_
#define _BTREE_H_

<<license>>
<<include>>
//@db porting 
template <class Key, class Value> class BTree;
template <class Key, class Value> class BTreeIterator;

<<class BTreePage>>
<<class BTree>>
<<class BTreeIterator>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
