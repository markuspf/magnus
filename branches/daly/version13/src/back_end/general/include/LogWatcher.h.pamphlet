\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/general/include/LogWatcher.h}
\author{Dmitry Pechkin}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{LogWatcher.h}
\section{include}
<<include>>=
#include <iostream.h>
#include "Chars.h"
#include "Timer.h"

@
\section{class LogFileWatcher}
<<class LogFileWatcher>>=
class LogFileWatcher
{
public:
  LogFileWatcher( const Chars& fname, int timeInterval );

  ~LogFileWatcher( );

  bool changed();
  // Returns true iff there is a line to get from the file.

  Chars getline();
  // Returns complete line and advances position in the file.

  int getInterval( ) const { return interval; }

  void setInterval( int timeInterval ) 
  { 
    interval = timeInterval;
    timer.reset( interval );
  }

private:
  long fileSize( );
  char peekCh( ) { return file.peek(); }
  char getCh( ) { ++filePos; return file.get(); }
  fstream file;
  Chars fileName;
  long filePos; 
  Chars line;  // current line.
  char *buffer;
  int  bufpos;
  bool completeLine;
  Timer timer;
  int interval;

private:
  LogFileWatcher( const LogFileWatcher& watch ); 
  // hidden, not to be implemented
  LogFileWatcher& operator=( const LogFileWatcher& watch );

};

@
\section{license}
<<license>>=
// Copyright (C) 1994-2004 The New York Group Theory Cooperative
// See license/NYGTC for the full notice
@
<<*>>=
// src/backend/general/include/LogWatcher.h
#ifndef _LOG_WATCHER_H_
#define _LOG_WATCHER_H_

<<license>>
<<include>>
const int WATCHER_BUF_SIZE = 4096;
<<class LogFileWatcher>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
