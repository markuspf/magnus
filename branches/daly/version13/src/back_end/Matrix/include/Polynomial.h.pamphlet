\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/Matrix/include/Polynomial.h}
\author{Dmitry Bormotov}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "Integer.h"
#include "Rational.h"
#include "RingParser.h"
#include "IStreamPoll.h"
#include "PBTree.h"

@
\section{class Monomial}
<<class Monomial>>=
template <class R> class Monomial
{
  friend class Polynomial<R>;
public:
  Monomial( const char * );
  Monomial( R coef = 0, int numOfVars = 0, int *powersOfVars = NULL );
  Monomial( const Monomial& );

  ~Monomial( ) 
  {     
    if( numberOfVariables > 0 )
      delete [] powersOfVariables; 
  }

  bool operator == ( const Monomial& ) const;
  Monomial& operator = ( const Monomial& );
  Monomial operator - () const;
  Monomial operator * ( const Monomial& ) const;
  Monomial operator + ( const Monomial& ) const;
  Monomial& operator += ( const Monomial& );
  int compare( const Monomial& ) const;
  R getCoefficient( ) const { return theCoefficient; }
  void setCoefficient( const R& c ) { theCoefficient = c; }
  int getNumberOfVariables() const { return numberOfVariables; }
  int getPowerOfVariable( int i ) const;
  void setPowerOfVariable( int i, int v);

  friend ostream& operator << <R> ( ostream& ostr, const Monomial<R>& M );
  friend IStreamPoll operator >> <R> ( istream& istr, Monomial<R>& M );
  //@db 2.91 temporary hacks:
  friend ostream& operator < <R> ( ostream& ostr, const Monomial<R>& M );
  friend istream& operator > <R> ( istream& istr, Monomial<R>& M );

private:
  R theCoefficient;
  int numberOfVariables;
  int *powersOfVariables;
  void printOn( ostream& ) const;

  Monomial readFrom( istream& istr, Chars& errMesg )
  {
    MonomialParser<R> P(istr);
    return P.parseMonomial(errMesg);
  }

#ifdef DEBUG
//  friend int main( );
#endif

};

@
\section{class Polynomial}
<<class Polynomial>>=
template <class R> 
class Polynomial : public PBTree< Monomial<R>, Monomial<R> >
{
public:
  Polynomial( ) : PBTree< Monomial<R>, Monomial<R> >( ) { }  
  Polynomial( const char*);
  Polynomial( const Monomial<R>& );
  Polynomial( const Polynomial& );
  Polynomial( const R& );
  bool operator == ( const Polynomial& ) const;
  bool operator != ( const Polynomial& ) const;
  Polynomial& operator = ( const Polynomial& );
  Polynomial& operator += ( const Polynomial& );
  Polynomial& operator -= ( const Polynomial& );
  Polynomial& operator *= ( const Polynomial& );
  Polynomial operator + ( const Polynomial& ) const; 
  Polynomial operator - ( const Polynomial& ) const; 
  Polynomial operator * ( const Polynomial& ) const; 
  Polynomial operator - ( ) const;
  bool isIdentity( ) const;
  int degree( ) const;
  int numberOfMonomials( ) const;

  friend ostream& operator << ( ostream& ostr, const Polynomial& P )
  {
    P.printOn(ostr);
    return ostr;
  }

  friend IStreamPoll operator >> <R> ( istream& istr, Polynomial<R>& P );

private:
  void printOn( ostream& ) const;

  Polynomial readFrom( istream& istr, Chars& errMesg )
  {
    PolynomialParser<R> P(istr);
    return P.parsePolynomial(errMesg);
  }

  virtual void theKeyIsFound( const Monomial<R>& key, Monomial<R>& value )
  {
    value += key;
    if( value.getCoefficient() == R(0) )
      remove(value);
    //R c = value.getCoefficient();
    //value.setCoefficient( c + key.getCoefficient() ); 
  } 

#ifdef DEBUG
  //friend int main( );
#endif
};

@
\section{struct PolynomialIterator}
<<struct PolynomialIterator>>=
template <class R> 
struct PolynomialIterator : public PBTreeIterator< Monomial<R>, Monomial<R> >
{ 
  PolynomialIterator( const Polynomial<R>& P )
    : PBTreeIterator< Monomial<R>, Monomial<R> > ( P ) { }
};

@
\section{license}
<<license>>=
// Copyright (C) 1994 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.
@
<<*>>=
// src/backend/Matrix/include/Polynomial.h
#ifndef _POLYNOMIAL_H_
#define _POLYNOMIAL_H_

<<license>>
<<include>>

template <class R> class Polynomial;
template <class R> class MonomialParser;
template <class R> class PolynomialParser;
template <class R> class Monomial;

template <class R>
ostream& operator << ( ostream& ostr, const Monomial<R>& M )
{
  M.printOn(ostr);
  return ostr;
}

template <class R>
IStreamPoll operator >> ( istream& istr, Monomial<R>& M )
{
  Chars errMesg;
  M = M.readFrom(istr, errMesg);
  return IStreamPoll( istr, errMesg );
}

// 2.91 temporary hacks

template <class R>
ostream& operator < ( ostream& ostr, const Monomial<R>& M )
{
  //o.write(ostr);
  return ostr;
}

template <class R>
istream& operator > ( istream& istr, Monomial<R>& M )
{
  //o.read(istr);
  return istr;
}


<<class Monomial>>

template <class R> class Polynomial;

template <class R>
IStreamPoll operator >> ( istream& istr, Polynomial<R>& P )
{
  Chars errMesg;
  P = P.readFrom(istr, errMesg);
  return IStreamPoll( istr, errMesg );
}

<<class Polynomial>>
<<struct PolynomialIterator>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}



