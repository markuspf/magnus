\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/Equations/include/Queue.h}
\author{Sergey Lyutikov, Dmitry Pechkin}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{class QueueOf}
To instantiate QueueOf<T>, class T must have an assignment
operator, a copy constructor, an == operator, and destructor.

QueueOf class provides interface of queues for lists.
<<class QueueOf>>=
template < class T > class QueueOf : public ListOf<T> {
public:
  QueueOf( ) : ListOf<T>() { }
  // Default constructor makes empty Queue.

  QueueOf( const T& t ) : ListOf<T>(t) { }
  // Cast constructor T -> QueueOf<T>

  void push( const T& t );// { append(t); }

  T pop( ) {
    T res = element( 0 );
    removeElementOfIndex( 0 );
    return res;
  }

  void popAll( ) {
    while ( length() ) removeElementOfIndex( 0 );
  }

  Bool isEmpty( ) const { return !length(); }

  Bool isntEmpty( ) const { return length(); }

};

@
\section{license}
<<license>>=
// Copyright (C) 1994 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.
@
<<*>>=
// src/backend/Equations/include/Queue.h
#ifndef _QUEUE_H_
#define _QUEUE_H_

#include "ObjectOf.h"
#include "List.h"

<<class QueueOf>>
#endif  // _QUEUE_H_
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
