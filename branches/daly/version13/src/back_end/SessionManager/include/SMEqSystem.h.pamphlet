\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SessionManager/include/SMEqSystem.h}
\author{Denis Serbin}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "AlgebraicObject.h"
#include "SMFPGroup.h"
#include "Word.h"

@
\subsection{class SEIC}
<<class SEIC>>=
class SEIC : protected FEData
{
public:
  SEIC(OID eqs_oid);
  ~SEIC( );

  void putIsSolvedInAbelianization() {
    solvedInAbelian = yes;
  }
  
  void putHaveSolutionsInAbelianization( bool sol ) { 
    haveSolInAbelian = sol; 
  }

  void putIsSolved() {
    solved = yes;
  }
  
  void putHaveSolutions( bool sol ) { 
    haveSol = sol; 
  }
  
  bool isSolvedInAbelianization() const { 
    return solvedInAbelian; 
  }
  
  bool haveSolutionsInAbelianization( ) const { 
    return haveSolInAbelian; 
  }

  bool isSolved() const { 
    return solved; 
  }
  
  bool haveSolutions( ) const { 
    return haveSol; 
  }
 
private:
  SEIC(const SEIC&); // Disable copying

  OID eqSystemOID;
  // Need this for composing messages about what has been found.

  bool solvedInAbelian;
  bool haveSolInAbelian;
  bool solved;
  bool haveSol;
};

@
\subsection{class SMEqSystem}
<<class SMEqSystem>>=
class SMEqSystem : public AlgebraicObject
{
public:
  SMEqSystem( SMFPGroup& G, FreeGroup F, const VectorOf<Word> v, int nvar, 
	      const Chars heritage);
  
  SMEqSystem( SMFPGroup& G ) 
    : AlgebraicObject(""), 
      theGroup(G), 
      seic( oid() ) 
    { }
  
  VectorOf<Word> getSystem( ) const { return theSystem; };
  SMFPGroup& getParent( ) const { return theGroup; };
  const FreeGroup& getFreeGroup( ) const { return theFreeGroup; };
  int numberOfVariables( ) const { return numOfVar; };

  static const char* type( ) { return "SMEqSystem"; };
  const char* typeID( ) const { return type(); };        // overrides SMObject
  const IconID iconID( ) const { return IconID::systemOfEquations; };
  // overrides SMObject
  void viewStructure(ostream& ostr) const;              // overrides SMObject
  void printProperties(ostream& ostr) const;            // overrides SMObject
  void printDefinition(ostream& ostr) const;            // overrides SMObject

public:
  SEIC seic; 
  // equation information center.

protected:
  void readMessage(istream&) { };                     // overrides SMObject

private:
  SMFPGroup& theGroup;
  // The group that this equation is over.

  FreeGroup theFreeGroup;
  // The free group generated by theGroup's generators, along with the
  // variables.

  VectorOf<Word> theSystem;
  // A Word in theFreeGroup, represents the equation.

  int numOfVar;
  // a number of variables

};

@
\section{license}
<<license>>=
// Copyright (C) 1994-2004 The New York Group Theory Cooperative
// See license/NYGTC for the full notice
@
<<*>>=
// src/backend/SessionManager/include/SMEqSystem.h
#ifndef _SMEQSYSTEM_H_
#define _SMEQSYSTEM_H_

<<license>>
<<include>>
<<class SEIC>>
<<class SMEqSystem>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
