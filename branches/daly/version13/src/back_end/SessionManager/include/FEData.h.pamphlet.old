\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SessionManager/include/FEData.h}
\author{Roger Needham}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include <iostream.h>
#include "Chars.h"
#include "OID.h"
#include "ARCSlotID.h"

@
\section{class FEData}
\subsection{Introduction}
  The following discussion is addressed to maintainers; users of class
FEData may wish to skip to the `Usage' section.

\subsection{Overview of Requirements}
The Magnus Front End (FE) must be able to reflect the state of the
Session Manager (SM). For modularity, the FE should know as little as
possible about the SM data it manipulates.

Therefore, we predefine a small number of events, in response to
which the FE is to take some action which reflects the SM's state. The
SM describes to the FE what to do in each event, via a simple message
protocol.  The descriptions may refer to elements of a `blind'
database, which is stored by the FE and kept up to date by the SM.

The FE must know nothing about the database except how to store and
extract data. Programmers in the SM layer should know nothing about
the database except its semantics in a given event.

The classes wrapped in class FEData form the programmer's interface
between the SM and the database.

\subsection{Terminology}

The database is an associative array, where the keys and data can be
arbitrary strings. Exactly what strings are used is, of course,
hidden by the FEData classes.

A `Key' may be constant or variable. When constant, it typically
consists of an object id supplied by the programmer, and a key
descriptor which is hidden from the programmer. When variable, it
typically consists of the index of a formal variable supplied by the
programmer, and the key descriptor. The latter allows database
references to be specified for events in advance, and later evaluated
in a context in which the formal variables have values. This is
tricky; see the discussion of menus, below.

A `Datum' is the value returned by the database for a given key. It
is always constant, and is typically a boolean value, an object id, or
a string such as an object's name.  A Datum is represented only
conceptually by FEData (i.e., not as a class), since it exists only in
the FE. The programmer specifies a Datum via a Key.

An `Expression' is built up from Keys via operators like `==', `&&',
and `!'. Thus an Expression may be variable or constant.

A `Name' is an Expression which contains another Expression, where
the latter evaluates to an object id.

\subsection{Events}

These are the events for which the FE must take action which depends
on the database:
\begin{list}{}
\item  1) There is new data to be stored.

The SM must supply a constant Key, and a constant Expression
(which may be a simple value) to become the Datum. For example, the SM
may announce that `the parent group of word <object-id> is
<object-id>'.  The `parent group' part is resolved as a key
descriptor, the first object id becomes part of the Key, and the
second object id is the Datum.

\item 2) The SM wishes to display textual data.

In this case, the SM knows exactly which objects it wants to talk
about, so it can supply their object id's. SM programmers must be able
to embed constant Names in text.

\item 3) A new workspace object has been created.

The view description for the object may contain text which refers
to various objects by name. These objects are known when the new one
is created, so the situation is as in 2).

\item 4) The workspace selection has changed.

<To Appear>

\subsection{Usage}

<To Appear>

This stuff was too quickly hacked, and needs more thought. In
particular, the ! operator does not work properly; e.g., the
expression ( !  IsAuto(...) ) is spuriously false when there
is no `auto' key stored at all in the FE.

<<class FEData>>=
class FEData
{
private:
<<struct ExpressionRep>>
<<struct KeyRep : public ExpressionRep>>
<<struct JoinRep : public ExpressionRep>>
<<struct NotRep : public ExpressionRep>>
<<struct NameRep : public ExpressionRep>>
<<struct SubjectRep : public ExpressionRep>>
protected:
<<class Expression>>
<<class Key : public Expression>>
<<struct DataPair>>
<<struct Text>>
<<struct True : public Key>>
<<struct False : public Key>>
<<struct Object : public Key>>
<<struct CheckinType : public Key>>
<<struct IsHomo : public Key>>
<<struct IsIso : public Key>>
<<struct IsAuto : public Key>>
<<struct Parent : public Key>>
<<struct ParentGroup : public Key>>
<<struct Domain : public Key>>
<<struct Range : public Key>>
<<struct Oid : public Key>>
<<struct Name : public Expression>>
<<struct Subject : public Expression>>
<<struct Link : public Text>>
<<struct SubProblemName>>
<<struct Banner>>
};

@
\subsection{struct ExpressionRep}
<<struct ExpressionRep>>=
  struct ExpressionRep
  {
	 ExpressionRep( ) : refs( 1 ) { }
	 ExpressionRep* gimme( ) {
		++refs;
		return this;
	 }
	 void getHence( ) {
		if ( ! --refs ) { delete this; }
	 }
	 virtual ~ExpressionRep( ) { }
	 virtual void printOn(ostream& ostr) const = 0;
	 // Data Members:
	 int refs;
  };

@
\subsection{struct KeyRep}
<<struct KeyRep : public ExpressionRep>>=
  struct KeyRep : public ExpressionRep
  {
	 KeyRep(int i);  // Stupid special case
	 KeyRep(int i, const char* t);
	 KeyRep(OID oid, const char* t);
	 KeyRep(ExpressionRep* se, const char* t);
	 ~KeyRep( ) { if ( subExpression ) subExpression->getHence(); }
	 void printOn(ostream& ostr) const;        // overrides ExpressionRep
	 // Data Members:
	 const int index;
	 const char* text;
	 bool isConstant;
	 ExpressionRep* subExpression;
  };

@
\subsection{struct JoinRep}
<<struct JoinRep : public ExpressionRep>>=
  struct JoinRep : public ExpressionRep
  {
	 JoinRep(ExpressionRep* a1, ExpressionRep* a2, const char* j);
	 ~JoinRep( );
	 void printOn(ostream& ostr) const;         // overrides ExpressionRep
	 // Data Members:
	 ExpressionRep* lhs;
	 ExpressionRep* rhs;
	 const char* junctor;  // Always static data
  };

@
\subsection{struct NotRep}
<<struct NotRep : public ExpressionRep>>=
  struct NotRep : public ExpressionRep
  {
	 NotRep(ExpressionRep* a);
	 ~NotRep( );
	 void printOn(ostream& ostr) const;         // overrides ExpressionRep
	 // Data Members:
	 ExpressionRep* expr;
  };

@
\subsection{struct NameRep}
<<struct NameRep : public ExpressionRep>>=
  struct NameRep : public ExpressionRep
  {
	 NameRep(ExpressionRep* a);
	 ~NameRep( );
	 void printOn(ostream& ostr) const;         // overrides ExpressionRep
	 // Data Members:
	 ExpressionRep* expr;
  };

@
\subsection{struct SubjectRep}
<<struct SubjectRep : public ExpressionRep>>=
  struct SubjectRep : public ExpressionRep
  {
    SubjectRep( Chars sub ) : subject( sub ) { } 
    ~SubjectRep( ) { }
    void printOn(ostream& ostr) const;         // overrides ExpressionRep
    // Data members:
    Chars subject;
  };

@
\subsection{class Expression}
<<class Expression>>=
  class Expression
  {
  public:
	 Expression(int i) : theRep( new KeyRep( i ) ) { }
	 // The hackery is getting rather thick; 
         // this is a quicky to allow storage
	 // of, e.g., enum values as data.
	 
	 Expression( const Expression& E ) {
		theRep = E.theRep->gimme();
	 }
	 
	 ~Expression( ) { theRep->getHence(); }
 
	 Expression operator == ( const Expression& E ) const {
		return join( E, "==" );
	 }

	 Expression operator != ( const Expression& E ) const {
		return join( E, "!=" );
	 }
	 
	 Expression operator && ( const Expression& E ) const {
		return join( E, "&&" );
	 }

	 Expression operator || ( const Expression& E ) const {
		return join( E, "||" );
	 }

	 Expression operator ! ( ) const {
		return Expression( new NotRep( theRep->gimme() ) );
	 }

	 Expression operator > ( const Expression& E ) const {
		return join( E, ">" );
	 }

	 Expression operator >= ( const Expression& E ) const {
		return join( E, ">=" );
	 }

	 Expression operator < ( const Expression& E ) const {
		return join( E, "<" );
	 }

	 Expression operator <= ( const Expression& E ) const {
		return join( E, "<=" );
	 }
	 
    friend ostream& operator << ( ostream& ostr, const Expression& E);

	 Expression( ExpressionRep* rep ) : theRep( rep ) { }
	 // Call this ONLY when rep.refs already has the right value!

	 ExpressionRep* theRep;  // Public on purpose...

  private:
	 Expression join( const Expression& E, const char* junctor ) const;
	 
  };

@
\subsection{class Key}
<<class Key : public Expression>>=
  class Key : public Expression
  {
  public:
	 Key( const Key& K ) : Expression( K.theRep->gimme() ) { }
  protected:
	 Key(int i) : Expression( new KeyRep( i ) ) { }  // Stupid special case
	 Key(int i, const char* t) : Expression( new KeyRep( i, t ) ) { }
	 Key(OID oid, const char* t) : Expression( new KeyRep( oid, t ) ) { }
	 Key(const Key& K, const char* t)
	   : Expression( new KeyRep( K.theRep->gimme(), t ) )
	 { }
  };

@
\subsection{struct DataPair}
<<struct DataPair>>=
  struct DataPair
  {
	 DataPair( const Key& key, const Expression& datum )
      : theKey( key ), theDatum( datum )
	 { }
	 bool operator == (const DataPair& dp) const { return false; }
	 DataPair& operator = (const DataPair& dp);
    friend ostream& operator << ( ostream& ostr, const DataPair& dp);
  private:
	 Key theKey;
	 Expression theDatum;
  };

@
\subsection{struct Text}
<<struct Text>>=
  struct Text
  {
         Text(const char* t = "");
         Text(const Expression& E);
	 operator Chars( ) const;
	 Text& operator + (const Text& t);
	 Text& operator + (const Expression& E);
    friend ostream& operator << (ostream& ostr, const Text& t);
  private:
	 Text(const Text&);
	 // A Text is to be passed only by reference, so this is hidden and
	 // not to be implemented. Also, unnecessary parenthesizing results
	 // in a `passing reference to temp' warning which must not be
	 // ignored.
	 ostrstream ostrstr;
  };

@
\subsection{struct True}
<<struct True : public Key>>=
  struct True : public Key
  {
	 True( ) : Key( 1 ) { }
  };

@
\subsection{struct False}
<<struct False : public Key>>=
  struct False : public Key
  {
	 False( ) : Key( 0 ) { }
  };

@
\subsection{struct Object}
<<struct Object : public Key>>=
  struct Object : public Key
  {
	 Object(int i) : Key( i, 0 ) { }
	 Object(OID o) : Key( o, 0 ) { }
	 // Semantic pact with KeyRep: text == 0 => not a real key
  };

@
\subsection{struct CheckinType}
<<struct CheckinType : public Key>>=
  struct CheckinType : public Key
  {
	 CheckinType(int i) : Key( i, "checkin_type" ) { }
	 CheckinType(OID o) : Key( o, "checkin_type" ) { }
	 CheckinType(const Key& K) : Key( K, "checkin_type" ) { }
  };

@

\subsection{struct IsHomo}
Many menus and ARC slots are conditional, based purely on how the
selected objects were checked in (e.g., a group checked in as an
abelian group, not an FP group which is discovered to be
abelian).  Thus, this allows for associating, e.g., an enum
(type) value with an object, when and only when it is created,
and for subsequently using the value to choose the right menu item.

However, some menu items cannot make sense unless some piece of
information is known. For example, `Extend <a free group> by <a map>'
must not be posted unless the map is known to be an automorphism of
the group. Thus, in as few cases as we can get away with (to
stave off utter insanity), we dynamically update the FE database
with such crucial information when it is discovered. The following
provide the interface:
  
<<struct IsHomo : public Key>>=
  struct IsHomo : public Key
  {
	 IsHomo(int i) : Key( i, "homo" ) { }
	 IsHomo(OID o) : Key( o, "homo" ) { }
  };
  
  
@
\subsection{struct IsIso}
<<struct IsIso : public Key>>=
  struct IsIso : public Key
  {
	 IsIso(int i) : Key( i, "iso" ) { }
	 IsIso(OID o) : Key( o, "iso" ) { }
  };
  
@
\subsection{struct IsAuto}
<<struct IsAuto : public Key>>=
  struct IsAuto : public Key
  {
	 IsAuto(int i) : Key( i, "auto" ) { }
	 IsAuto(OID o) : Key( o, "auto" ) { }
  };

@
\subsection{struct Parent}
The following are for static properties of algebraic objects which
 are needed to determine whether a menu item, etc., should be posted.
<<struct Parent : public Key>>=
  struct Parent : public Key
  {
	 Parent(int i) : Key( i, "parent" ) { }
	 Parent(OID o) : Key( o, "parent" ) { }
  };

@
\subsection{struct ParentGroup}
<<struct ParentGroup : public Key>>=
  struct ParentGroup : public Key
  {
	 ParentGroup(int i) : Key( Parent(i), "parent" ) { }
	 ParentGroup(OID o) : Key( Parent(o), "parent" ) { }
  };
  
@
\subsection{struct Domain}
<<struct Domain : public Key>>=
  struct Domain : public Key
  {
	 Domain(int i) : Key( i, "domain" ) { }
	 Domain(OID o) : Key( o, "domain" ) { }
  };

@
\subsection{struct Range}
<<struct Range : public Key>>=
  struct Range : public Key
  {
	 Range(int i) : Key( i, "range" ) { }
	 Range(OID o) : Key( o, "range" ) { }
  };
  
@
\subsection{struct Oid}
<<struct Oid : public Key>>=
  struct Oid : public Key
  {
	 Oid(int i) : Key( i, "oid" ) { }
	 Oid(OID o) : Key( o, "oid" ) { }
  };

@
\subsection{struct Name}
<<struct Name : public Expression>>=
  struct Name : public Expression
  {
	 Name(int i);
	 Name(OID o);
	 Name(const Expression& E);
  };

@
\subsection{struct Subject}
<<struct Subject : public Expression>>=
  struct Subject : public Expression
  {
    Subject( Chars sub );
  };

@
\subsection{struct Link}
<<struct Link : public Text>>=
  struct Link : public Text
  {
    Link( const Chars& text, const Chars& problemName,
	  const Chars& fileName, bool isDynamic = false );
  };

@
\subsection{struct SubProblemName}
<<struct SubProblemName>>=
  struct SubProblemName
  {
    SubProblemName( OID oid, ARCSlotID asi ) 
      : theOid( oid.unwrap() ), theAsi( asi.unwrap() ) 
    { }
    
    friend ostream& operator << ( ostream& ostr, const SubProblemName& n ) {
      ostr << "[get_subProblemName " << n.theOid << " " << n.theAsi << "]";
      return ostr;
    }
 
  private:
    
    int theOid;
    int theAsi;
  };

@
\subsection{struct Banner}
<<struct Banner>>=
  struct Banner
  {
    Banner( OID oid ) 
      : theOid( oid.unwrap() )
    { }
    
    friend ostream& operator << ( ostream& ostr, const Banner& b ) {
      ostr << "[get_viewBanner " << b.theOid << " " << "]";
      return ostr;
    }
 
  private:
    
    int theOid;
  };

@
\section{license}
<<license>>=
// Copyright (C) 1994-2004 The New York Group Theory Cooperative
// See license/NYGTC for the full notice
@
<<*>>=
// src/backend/SessionManager/include/FEData.h
#ifndef _FEDATA_H_
#define _FEDATA_H_

<<license>>
<<include>>
<<class FEData>>

#endif

@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
