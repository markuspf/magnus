\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SessionManager/include/BaseProperties.h}
\author{Dmitry Pechkin}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "Property.h"
#include "Associations.h"
#include "QuickAssociations.h"
#include "Chars.h"
#include "APofFreeGroups.h"
#include "FreeByCyclic.h"
#include "MSCGroup.h"
#include "Automorphism.h"
#include "HNNExtOfFreeGroup.h"
#include "NilpotentGroup.h"
#include "CosetEnumerator.h"
#include "DFSA.h"
#include "DiffMachine.h"
#include "KBMachine.h"
#include "DecomposeInSubgroup.h"
#include "AbelianSGPresentation.h"
#include "SGOfNilpotentGroup.h"
#include "PolyWord.h"

@
\section{class NoData}
<<class NoData>>=
class NoData {};
//  I/O stubs
inline istream& operator>>( const istream&, const NoData& ) {}
inline ostream& operator<<( const ostream&, const NoData& ) {}
 
@
\section{class NoDataProperty}
<<class NoDataProperty>>=
class NoDataProperty : public SimpleProperty<NoData> {
public:
  NoDataProperty( const Chars& descr = Chars() ) 
    : SimpleProperty<NoData>(NoData(), descr) {}
};

@
\section{class BoolProperty}
<<class BoolProperty>>=
class BoolProperty : public SimpleProperty<bool> {
public:
  BoolProperty( const bool& data, const Chars& descr = Chars() ) 
    : SimpleProperty<bool>(data, descr) {}
};

@
\section{class IntProperty}
<<class IntProperty>>=
class IntProperty : public SimpleProperty<int> {
public:
  IntProperty( const int& data, const Chars& descr = Chars() ) 
    : SimpleProperty<int>(data, descr) {}
};

@
\section{inline istream& operator}
not used anywhere
<<inline istream& operator>>=
inline istream& operator>>( istream& istr, Word& w ) {
  error("Called a stub for: istream& operator>>(istream&,Word&)");
}           
 
inline istream& operator>>( istream& istr, PolyWord& w ) {
  error("Called a stub for: istream& operator>>(istream&,Word&)");
}

@
\section{class WordProperty}
<<class WordProperty>>=
class WordProperty : public SimpleProperty<Word> {
public:
  WordProperty( const Word& data, const Chars& descr = Chars() ) 
    : SimpleProperty<Word>(data,descr) {}
  void readFrom(istream& istr)      { istr > theData; }
  void writeTo(ostream& ostr) const { ostr < theData; }
};

@
\section{class PolyWordProperty}
<<class PolyWordProperty>>=
class PolyWordProperty : public SimpleProperty<PolyWord> {
public:
  PolyWordProperty( const PolyWord& data, const Chars& descr = Chars() ) 
    : SimpleProperty<PolyWord>(data,descr) {}
  void readFrom(istream& istr)      { istr > theData; }
  void writeTo(ostream& ostr) const { ostr < theData; }
};

@
\section{class IntegerProperty}
<<class IntegerProperty>>=
class IntegerProperty : public SimpleProperty<Integer> {
public:
  IntegerProperty( const Integer& data, const Chars& descr = Chars() ) 
    : SimpleProperty<Integer>(data, descr) {}
};

@
\section{class SMFPCheckinTypeProperty}
<<class SMFPCheckinTypeProperty>>=
class SMFPCheckinTypeProperty : public SimpleProperty<int> {
public:
  SMFPCheckinTypeProperty( const int& data, const Chars& descr = Chars() ) 
    : SimpleProperty<int>(data, descr) {}
};

@
\section{class FPGroupProperty}
<<class FPGroupProperty>>=
class FPGroupProperty : public SimpleProperty<FPGroup> {
public:
  FPGroupProperty( const FPGroup& data, const Chars& descr = Chars() ) 
    : SimpleProperty<FPGroup>(data, descr) {} 
};

@
\section{class FreeGroupProperty}
<<class FreeGroupProperty>>=
class FreeGroupProperty : public SimpleProperty<FreeGroup> {
public:
  FreeGroupProperty( const FreeGroup& data, const Chars& descr = Chars() ) 
    : SimpleProperty<FreeGroup>(data, descr) {}
};

@
\section{class MSCGroupPtr}
<<class MSCGroupPtr>>=
class MSCGroupPtr 
{
public:

  MSCGroupPtr( const MSCGroupPtr& G );
  ~MSCGroupPtr();

  const MSCGroup& getMSCG() const;

private:

  friend class SimpleProperty<MSCGroupPtr>;
  friend class MSCGroupProperty;
  //friend class GIC;

  MSCGroupPtr( const FPGroup& G, int lmbda );
  MSCGroupPtr& operator= ( const MSCGroupPtr& G );

  friend istream& operator>>(istream& istr, MSCGroupPtr& G);
  friend ostream& operator<<(ostream& ostr, const MSCGroupPtr& G );
  // Data members:
  FPGroup fp;
  int lambda;
  MSCGroup *msc;
private:
  MSCGroupPtr();
};

@
\section{class MSCGroupProperty}
<<class MSCGroupProperty>>=
class MSCGroupProperty : public SimpleProperty<MSCGroupPtr> {
public:
  MSCGroupProperty(const FPGroup& G, int lambda, const Chars& descr = Chars());
};

@
\section{class FreeByCyclicProperty}
<<class FreeByCyclicProperty>>=
class FreeByCyclicProperty : public SimpleProperty<FreeByCyclic> {
public:
  FreeByCyclicProperty(const FreeByCyclic& data, const Chars& descr = Chars()) 
    : SimpleProperty<FreeByCyclic>(data, descr) {}
};

@
\section{class AmalgProductOfFreeGroupsProperty}
<<class AmalgProductOfFreeGroupsProperty>>=
class AmalgProductOfFreeGroupsProperty :
  public SimpleProperty<AmalgProductOfFreeGroups> {
public:
  AmalgProductOfFreeGroupsProperty(const AmalgProductOfFreeGroups& data, 
				   const Chars& descr = Chars() ) 
    : SimpleProperty<AmalgProductOfFreeGroups>(data, descr) {}
};

@
\section{class HNNExtOfFreeGroupProperty}
<<class HNNExtOfFreeGroupProperty>>=
class HNNExtOfFreeGroupProperty : public SimpleProperty<HNNExtOfFreeGroup> {
public:
  HNNExtOfFreeGroupProperty( const HNNExtOfFreeGroup& data, 
			     const Chars& descr = Chars() ) 
    : SimpleProperty<HNNExtOfFreeGroup>(data, descr) {}
};

@
\section{class MapProperty}
<<class MapProperty>>=
class MapProperty : public SimpleProperty<Map> {
public:
  MapProperty( const Map& data, const Chars& descr = Chars() ) 
    : SimpleProperty<Map>(data, descr) {}
};

@
\section{class \$C\$Property}
This definition makes no sense because $C$ is not a known type?
<<class $C$Property>>=
class $C$Property : public ComplexProperty<$C$> {
public:
  $C$Property( const $C$& data, const Chars& descr = Chars() ) 
    : ComplexProperty< $C$ >(data, descr) {}
protected:
  void readFrom(istream& istr)       { istr > theData; }
  void writeTo (ostream& ostr) const { ostr < theData; }
};

@
\section{class AbelianGroupProperty}
<<class AbelianGroupProperty>>=
class AbelianGroupProperty : public ComplexProperty< AbelianGroup > {
public:
  AbelianGroupProperty(const AbelianGroup& data, const Chars& descr = Chars()) 
    : ComplexProperty<AbelianGroup>(data, descr) {}
protected:
  void readFrom(istream& istr)       { istr > theData; }
  void writeTo (ostream& ostr) const { ostr < theData; }
};

@
\section{class NilpotentGroupProperty}
<<class NilpotentGroupProperty>>=
class NilpotentGroupProperty : public ComplexProperty<NilpotentGroup> {
public:
  NilpotentGroupProperty( const NilpotentGroup& data, 
			  const Chars& descr = Chars() ) 
    : ComplexProperty<NilpotentGroup>(data, descr) {}
protected:
  void readFrom(istream& istr);
  void writeTo (ostream& ostr);
};

@
\section{class NilpGroupAssocProperty}
<<class NilpGroupAssocProperty>>=
class NilpGroupAssocProperty : 
  public ComplexProperty< AssociationsOf<int,NilpotentGroup*> > 
{
public:
  NilpGroupAssocProperty( const AssociationsOf<int,NilpotentGroup*>& data, 
			  const Chars& descr = Chars() ) 
    : ComplexProperty< AssociationsOf<int,NilpotentGroup*> >(data, descr) {}

  NilpGroupAssocProperty( const NilpGroupAssocProperty& P );
  const NilpGroupAssocProperty& operator=( const NilpGroupAssocProperty& P );
  ~NilpGroupAssocProperty();

protected:
  void unbindAll();
  void copyAll( const NilpGroupAssocProperty& P );
  
  void readFrom(istream& istr);
  void writeTo(ostream& ostr) const ;
};

@
\section{class SubgroupGraphProperty}
<<class SubgroupGraphProperty>>=
class SubgroupGraphProperty : public ComplexProperty<SubgroupGraph> {
public:
  SubgroupGraphProperty( const SubgroupGraph& data, 
			 const Chars& descr = Chars() ) 
    : ComplexProperty<SubgroupGraph>(data, descr) {}
protected:
  void readFrom(istream& istr)      { istr > theData; }
  void writeTo(ostream& ostr) const { ostr < theData; }
};

@
\section{class PermutationRepresentationProperty}
<<class PermutationRepresentationProperty>>=
class PermutationRepresentationProperty : 
  public ComplexProperty<PermutationRepresentation> {
public:
  PermutationRepresentationProperty( const PermutationRepresentation& data, 
				     const Chars& descr = Chars() ) 
    : ComplexProperty<PermutationRepresentation>(data, descr) {}
protected:
  void readFrom(istream& istr)      { istr > theData; }
  void writeTo(ostream& ostr) const { ostr < theData; }
};

@
\section{class GroupDFSAProperty}
<<class GroupDFSAProperty>>=
class GroupDFSAProperty : public ComplexProperty<GroupDFSA> {
public:
  GroupDFSAProperty( const GroupDFSA& data, const Chars& descr = Chars() ) 
    : ComplexProperty<GroupDFSA>(data, descr) {}
protected:
  void readFrom(istream& istr)      { istr > theData; }
  void writeTo(ostream& ostr) const { ostr < theData; }
};

@
\section{class DiffMachineProperty}
<<class DiffMachineProperty>>=
class DiffMachineProperty : public ComplexProperty<DiffMachine> {
public:
  DiffMachineProperty( const DiffMachine& data, const Chars& descr = Chars() )
    : ComplexProperty<DiffMachine>(data, descr) {}
protected:
  void readFrom(istream& istr)      { istr > theData; }
  void writeTo(ostream& ostr) const { ostr < theData; }
};

@
\section{class KBMachineProperty}
<<class KBMachineProperty>>=
//@dp This property should be insvestigated more about data saved to and 
//    restored from a disk storage. Now it stores itself in a wrong way.
///   And we don't want to store this property on the disk at all now.

class KBMachineProperty : public UnstorableProperty<KBMachine> {
public:
  KBMachineProperty( const KBMachine& data, const Chars& descr = Chars() )
    : UnstorableProperty<KBMachine>( data, descr ) {}
};

/*@dp The future implementation of KBMachineProperty may look like this:

class KBMachineProperty : public ComplexProperty<KBMachine> {
public:
  KBMachineProperty( const KBMachine& data, const Chars& descr = Chars() )
    : ComplexProperty<KBMachine>(data, descr) {}
protected:
  void readFrom(istream& istr)      { istr > theData; }
  void writeTo(ostream& ostr) const { ostr < theData; }
};
*/

@
\section{class DecomposeInSubgroupOfFPGroupProperty}
<<class DecomposeInSubgroupOfFPGroupProperty>>=
class DecomposeInSubgroupOfFPGroupProperty : 
  public ComplexProperty<DecomposeInSubgroupOfFPGroup> 
{
public:
  DecomposeInSubgroupOfFPGroupProperty( 
    const DecomposeInSubgroupOfFPGroup& data, const Chars& descr = Chars() 
  ) : ComplexProperty<DecomposeInSubgroupOfFPGroup>(data, descr) {}

protected:
  void readFrom(istream& istr)      { istr > theData; }
  void writeTo(ostream& ostr) const { ostr < theData; }
};

@
\section{class ListOfEndomorphismProperty}
<<class ListOfEndomorphismProperty>>=
class ListOfEndomorphismProperty : 
  public ComplexProperty< ListOf<Endomorphism> > 
{
public:
  ListOfEndomorphismProperty( const ListOf<Endomorphism> & data, 
			      const Chars& descr = Chars() ) 
    : ComplexProperty< ListOf<Endomorphism> >(data, descr) {}
protected:
  void readFrom(istream& istr);
  void writeTo (ostream& ostr) const;
};

@
\section{class ListOfAutomorphismProperty}
<<class ListOfAutomorphismProperty>>=
class ListOfAutomorphismProperty : 
  public ComplexProperty< ListOf<Automorphism> > {
public:
  ListOfAutomorphismProperty( const ListOf<Automorphism> & data, 
			      const Chars& descr = Chars() ) 
    : ComplexProperty< ListOf<Automorphism> >(data, descr) {}
protected:
    void readFrom(istream& istr);
    void writeTo (ostream& ostr) const;
};

@
\section{class AbelianSGPresentationProperty}
<<class AbelianSGPresentationProperty>>=
class AbelianSGPresentationProperty : 
  public ComplexProperty<AbelianSGPresentation> {
public:
  AbelianSGPresentationProperty( const AbelianSGPresentation& data, 
				 const Chars& descr = Chars() ) 
    : ComplexProperty<AbelianSGPresentation>(data, descr) {}
protected:
  void readFrom(istream& istr)      { istr > theData; }
  void writeTo(ostream& ostr) const { ostr < theData; }
};

@
\section{class SGOfNilpotentGroupProperty}
<<class SGOfNilpotentGroupProperty>>=
class SGOfNilpotentGroupProperty : public ComplexProperty<SGOfNilpotentGroup> {
public:
  SGOfNilpotentGroupProperty( const SGOfNilpotentGroup& data, 
			      const Chars& descr = Chars() ) 
    : ComplexProperty<SGOfNilpotentGroup>(data, descr) {}

protected:
  void readFrom(istream& istr);
  void writeTo(ostream& ostr) const;
};

@
\section{class SGNilpGroupAssocProperty}
<<class SGNilpGroupAssocProperty>>=
class SGNilpGroupAssocProperty : 
  public ComplexProperty< AssociationsOf<int,SGOfNilpotentGroup*> > 
{
public:
  SGNilpGroupAssocProperty(const AssociationsOf<int,SGOfNilpotentGroup*>& data,
			   const Chars& descr = Chars() ) 
    : ComplexProperty< AssociationsOf<int,SGOfNilpotentGroup*> >(data, descr){}

  SGNilpGroupAssocProperty( const SGNilpGroupAssocProperty& P );
  const SGNilpGroupAssocProperty& operator=( const SGNilpGroupAssocProperty& P );
  ~SGNilpGroupAssocProperty();

protected:
  void unbindAll();
  void copyAll( const SGNilpGroupAssocProperty& P );
  
  void readFrom(istream& istr);
  void writeTo(ostream& ostr) const ;
};

@
\section{license}
<<license>>=
// Copyright (C) 1994-2004 The New York Group Theory Cooperative
// See license/NYGTC for the full notice
@
<<*>>=
// src/backend/SessionManager/include/BaseProperties.h
#ifndef _BASE_PROPERTIES_H_
#define _BASE_PROPERTIES_H_

<<license>>
<<include>>
<<class NoData>>
<<class NoDataProperty>>
<<class BoolProperty>>
<<class IntProperty>>
<<inline istream& operator>>
<<class WordProperty>>
<<class PolyWordProperty>>
<<class IntegerProperty>>
<<class SMFPCheckinTypeProperty>>
<<class FPGroupProperty>>
<<class FreeGroupProperty>>
<<class MSCGroupPtr>>
<<class MSCGroupProperty>>
<<class FreeByCyclicProperty>>
<<class AmalgProductOfFreeGroupsProperty>>
<<class HNNExtOfFreeGroupProperty>>
<<class MapProperty>>
<<class AbelianGroupProperty>>
<<class NilpotentGroupProperty>>
<<class NilpGroupAssocProperty>>
<<class SubgroupGraphProperty>>
<<class PermutationRepresentationProperty>>
<<class GroupDFSAProperty>>
<<class DiffMachineProperty>>
<<class KBMachineProperty>>
<<class DecomposeInSubgroupOfFPGroupProperty>>
<<class ListOfEndomorphismProperty>>
<<class ListOfAutomorphismProperty>>
<<class AbelianSGPresentationProperty>>
<<class SGOfNilpotentGroupProperty>>
<<class SGNilpGroupAssocProperty>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
