\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SessionManager/include/ARCSlotID.h}
\author{Roger Needham}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include <iostream.h>

@
\section{class ARCSlotID}
<<class ARCSlotID>>=
class ARCSlotID
{
public:

  bool operator == ( const ARCSlotID& asi ) const {
	 return theARCSlotID == asi.theARCSlotID;
  }

  bool operator != ( const ARCSlotID& asi ) const {
	 return theARCSlotID != asi.theARCSlotID;
  }

  inline friend ostream& operator << ( ostream& ostr, const ARCSlotID& asi ) {
	 return ostr << asi.theARCSlotID;
  }

  int unwrap( ) const { return theARCSlotID; }
  // We don't want a conversion, even for friends, because of possible
  // ambiguity. Making this private creates friendship problems for
  // classes in the scope of another class. It seems safe enough to
  // permit public unwrapping, since only friends can rewrap.

protected:

  friend class ComputationManager;
  friend class Supervisor;
  friend class EnumeratorSupervisor;

  ARCSlotID( int i ) : theARCSlotID( i ) { }
  // Used by classes ComputationManager,  Supervisor.

  ARCSlotID( );  // Hidden, not to be implemented.

  int theARCSlotID;

};

@
\section{struct ThisARCSlotID}
<<struct ThisARCSlotID : public ARCSlotID>>=
struct ThisARCSlotID : public ARCSlotID {
  ThisARCSlotID( ) : ARCSlotID( 0 ) { }
};
// By convention, ARCSlotID( 0 ) refers to the Supervisor itself.
// See Supervisor.h.

@
\section{license}
<<license>>=
// Copyright (C) 1994-2004 The New York Group Theory Cooperative
// See license/NYGTC for the full notice
@
<<*>>=
// src/backend/SessionManager/include/ARCSlotID.h
#ifndef _ARCSLOTID_H_
#define _ARCSLOTID_H_

<<license>>
<<include>>
<<class ARCSlotID>>
<<struct ThisARCSlotID : public ARCSlotID>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
