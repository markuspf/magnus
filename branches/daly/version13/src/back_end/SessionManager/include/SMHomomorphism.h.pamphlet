\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SessionManager/include/SMHomomorphism.h}
\author{Dmitry Bormotov}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "SMMap.h"

@
\subsection{class SMHomomorphism}
<<class SMHomomorphism>>=
class SMHomomorphism : public SMMap
{
public:
  SMHomomorphism( const class SMMap& map, const Chars& heritage ) : 
    SMMap( map.getDomain(), map.getRange(), map.getMap(), heritage ) { }

  SMHomomorphism( SMFPGroup& G, Map m, const Chars heritage) :
    SMMap( G, m, heritage ) { }

  SMHomomorphism( SMFPGroup& G, SMFPGroup& H, Map m, const Chars heritage) :
    SMMap( G, H, m, heritage ) { }

/*
  SMMap(SMFPGroup& G, Map m, const Chars heritage);

  SMMap(SMFPGroup& G, SMFPGroup& H, Map m, const Chars heritage);

  SMMap(SMFPGroup& G)
  : AlgebraicObject(""), theMap( *((Map*)0) ), theDomain( G ), theRange( G ) 
    { }
  SMMap(SMFPGroup& G, SMFPGroup& H)
  : AlgebraicObject(""), theMap( *((Map*)0) ), theDomain( G ), theRange( H ) 
    { }
  //@rn Bogus ctors; see `But no' comment in Menu.h
*/

/*
  Map getMap( ) const { return theMap; }

  SMFPGroup& getDomain( ) const { return theDomain; }

  SMFPGroup& getRange( ) const { return theRange; }
*/

  static const char* type( ) { return "SMHomomorphism"; }
  const char* typeID( ) const { return type(); }        // overrides SMObject
  const IconID iconID( ) const { return IconID::homomorphism; }  
  // overrides SMObject
/*
  void viewStructure(ostream& ostr) const;              // overrides SMObject

  void printProperties(ostream& ostr) const;            // overrides SMObject

  void printDefinition(ostream& ostr) const;            // overrides SMObject
*/

protected:
  void readMessage(istream&) { }                        // overrides SMObject

private:
/*
  const Map theMap;

  SMFPGroup& theDomain;

  SMFPGroup& theRange;
*/
};

@
\subsection{class SMHomomorphism2}
<<class SMHomomorphism2>>=
class SMHomomorphism2 : public SMHomomorphism
{
public:
  SMHomomorphism2( const class SMMap& map, const Chars& heritage ) : 
    SMHomomorphism( map, heritage ) { }

  SMHomomorphism2( SMFPGroup& G, SMFPGroup& H, Map m, const Chars heritage) :
    SMHomomorphism( G, H, m, heritage ) { }
/*
  SMMap(SMFPGroup& G, Map m, const Chars heritage);

  SMMap(SMFPGroup& G, SMFPGroup& H, Map m, const Chars heritage);

  SMMap(SMFPGroup& G)
  : AlgebraicObject(""), theMap( *((Map*)0) ), theDomain( G ), theRange( G ) 
    { }
  SMMap(SMFPGroup& G, SMFPGroup& H)
  : AlgebraicObject(""), theMap( *((Map*)0) ), theDomain( G ), theRange( H ) 
    { }
  //@rn Bogus ctors; see `But no' comment in Menu.h
*/
/*
  Map getMap( ) const { return theMap; }

  SMFPGroup& getDomain( ) const { return theDomain; }

  SMFPGroup& getRange( ) const { return theRange; }
*/

  static const char* type( ) { return "SMHomomorphism2"; }
  const char* typeID( ) const { return type(); }        // overrides SMObject
/*
  const IconID iconID( ) const { return IconID::homomorphism2; }  
  // overrides SMObject
*/
/*
  void viewStructure(ostream& ostr) const;              // overrides SMObject

  void printProperties(ostream& ostr) const;            // overrides SMObject

  void printDefinition(ostream& ostr) const;            // overrides SMObject
*/

protected:
//  void readMessage(istream&) { }                        // overrides SMObject

private:
/*
  const Map theMap;

  SMFPGroup& theDomain;

  SMFPGroup& theRange;
*/
};

@
\section{license}
<<license>>=
// Copyright (C) 1994-2004 The New York Group Theory Cooperative
// See license/NYGTC for the full notice
@
<<*>>=
// src/backend/SessionManager/include/SMHomomorphism.h
#ifndef _SMHOMOMORPHISM_H_
#define _SMHOMOMORPHISM_H_

<<license>>
<<include>>
<<class SMHomomorphism>>
<<class SMHomomorphism2>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
