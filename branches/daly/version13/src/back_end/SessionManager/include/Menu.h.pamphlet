\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SessionManager/include/Menu.h}
\author{Roger Needham}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "FEData.h"
#include "SMObject.h"
//@rn These includes are required by the gcc 2.6.3 bug workaround,
//@rn discussed below:
#include "SMFPGroup.h"
#include "SMWord.h"
#include "SMEquation.h"
#include "SMSubgroup.h"
#include "SMSetOfWords.h"
#include "SMVectorOfWords.h"
#include "SMMap.h"
#include "SMMagnusBreakdown.h"
#include "SMPermutation.h"
#include "fastProblems.h"
#include "HomologyProblem.h"
#include "FreeProblems.h"
#include "IsNilpotentProblem.h"
#include "SubgroupProblems.h"
#include "OneRelatorProblems.h"
#include "PackagesSMApps.h"
#include "SMEqSystem.h"
#include "SMDataSet.h"
#include "SMPolynomial.h"

@
\section{struct Ctor}
A programmer may specify an end user menu item by supplying a
`constructor wrapper', i.e., an appropriate derivative of class Ctor.
These arrange, in cooperation with class ObjectSmith, for a callback
when the menu item is selected. The callback reads the arguments of
the item, and creates the required derivative of SMObject. The
constructor wrapper does strong compile-time type checking of the
arguments against the SMObject to be created.

Templates cannot be class members (think about it), so these have
to hang out in the global namespace.

<<struct Ctor>>=
struct Ctor
{
  virtual void readFrom(istream& istr) const = 0;
  // This does all input, and construction and storage of objects.

  virtual Ctor* copy( ) const = 0;
  // Used for storing an object in a derived class as a Ctor*.
  // This is necessary in order to keep the right virtual table.

protected:

  // With these here, only Ctor need be a friend of TheObjects,
  // SMObject, resp.:

  SMObject* get(int oid) const;
  // Returns the value of TheObjects::get( oid ).

  void newDependent(SMObject* smo, OID oid) const;
  // Tells smo that oid depends on it.
};

@
\subsection{struct CtorAux0}
The classes CtorAux<n> are not strictly necessary; they factor
common code out of the Ctor<n> templates, to mitigate the effects of
combinatorial explosion.

The `readFrom' member knows how many oid's to read. It gets the
corresponding SMObject*'s from TheObjects, and passes them to
`construct' for the actual construction and storage of the new object.
In special cases, e.g., when a parse error is possible, `construct' may
return 0.

<<struct CtorAux0>>=
struct CtorAux0 : public Ctor
{
  void readFrom(istream& istr) const;            // overrides Ctor

  virtual SMObject* construct(Chars&, istream&) const = 0;
};

@
\subsection{struct CtorAux1}
<<struct CtorAux1>>=
struct CtorAux1 : public Ctor
{
  void readFrom(istream& istr) const;            // overrides Ctor

  virtual SMObject* construct(SMObject*, Chars&, istream&) const = 0;
};

@
\subsection{struct CtorAux2}
<<struct CtorAux2>>=
struct CtorAux2 : public Ctor
{
  CtorAux2(bool transpose = false) : transposeARGS( transpose ) { }

  void readFrom(istream& istr) const;            // overrides Ctor

  virtual SMObject* construct(SMObject*, SMObject*, Chars&, istream&) const = 0;

  bool transposeARGS;
  // Marks whether to reverse the order of the arguments.
};

@
\subsection{struct CtorAux3}
<<struct CtorAux3>>=
struct CtorAux3 : public Ctor
{
  void readFrom(istream& istr) const;            // overrides Ctor

  virtual SMObject* construct(SMObject*, SMObject*, SMObject*, 
			      Chars&, istream&) const = 0;
};

@
\subsection{struct CtorAux4}
<<struct CtorAux4>>=
struct CtorAux4 : public Ctor
{
  void readFrom(istream& istr) const;            // overrides Ctor

  virtual SMObject* construct(SMObject*, SMObject*, SMObject*, SMObject*, 
			      Chars&, istream&) const = 0;
};

@
\subsection{struct CtorArgs0}
The following are the Ctor's to be passed as arguments to the Menu
objects. Their purpose is to do the casting from mere SMObject*'s to
objects of precisely the right type, and to call the right
constructor.

Each derives from an intermediate CtorArgs<n>, so that the classes
Menu<n> below can check the types of the arguments.
<<struct CtorArgs0>>=
struct CtorArgs0 : public CtorAux0 { };

@
\subsection{template struct Ctor0}
<<template struct Ctor0>>=
template <class T> struct Ctor0 : public CtorArgs0
{
  Ctor* copy( ) const { return new Ctor0; }          // overrides Ctor

private:

  SMObject* construct(Chars&, istream&) const {      // overrides CtorAux1
	 return new T( );
  }
  // The istream& is used only by specializations of this function.
};

@
\subsection{template struct CtorArgs1}
<<template struct CtorArgs1>>=
template <class A1> struct CtorArgs1 : public CtorAux1 { };

@
\subsection{template struct Ctor1}
<<template struct Ctor1>>=
template <class T, class A1> struct Ctor1 : public CtorArgs1<A1>
{
  Ctor* copy( ) const { return new Ctor1; }          // overrides Ctor

private:

  SMObject* construct(SMObject* a1, Chars&, istream&) const {
	 return new T( *((A1*)a1) );
  }
  // overrides CtorAux1
  // The istream& is used only by specializations of this function.
};

@
\subsection{template struct CtorArgs2}
<<template struct CtorArgs2>>=
template <class A1, class A2> struct CtorArgs2 : public CtorAux2
{
  CtorArgs2(bool transpose = false) : CtorAux2( transpose ) { }
};

@
\subsection{template struct Ctor2}
<<template struct Ctor2>>=
template <class T, class A1, class A2> struct Ctor2 : public CtorArgs2<A1,A2>
{
  Ctor2(bool transpose = false) : CtorArgs2<A1,A2>( transpose ) { }

  Ctor* copy( ) const { return new Ctor2( transposeARGS ); } // overrides Ctor

private:

  SMObject* construct(SMObject* a1, SMObject* a2, Chars&, istream&) const {
	 return new T( *((A1*)a1), *((A2*)a2) );
  }
  // overrides CtorAux2
  // The istream& is used only by specializations of this function.
};

@
\subsection{template struct CtorArgs3}
<<template struct CtorArgs3>>=
template <class A1, class A2, class A3> struct CtorArgs3 : public CtorAux3 { };

@
\subsection{template struct Ctor3 : public CtorArgs3}
<<template struct Ctor3>>=
template <class T, class A1, class A2, class A3> struct Ctor3 : public CtorArgs3<A1,A2,A3>
{
  Ctor* copy( ) const { return new Ctor3; } // overrides Ctor

private:

  SMObject* construct(SMObject* a1, SMObject* a2, SMObject* a3, 
		      Chars&, istream&) const 
  {
    return new T( *((A1*)a1), *((A2*)a2), *((A3*)a3) );
  }
  // overrides CtorAux3
  // The istream& is used only by specializations of this function.
};

@
\subsection{template struct CtorArgs4}
<<template struct CtorArgs4>>=
template <class A1, class A2, class A3, class A4> struct CtorArgs4 
  : public CtorAux4 { };

@
\subsection{template struct Ctor4}
<<template struct Ctor4>>=
template <class T, class A1, class A2, class A3, class A4>
 struct Ctor4 : public CtorArgs4<A1,A2,A3,A4>
{
  Ctor* copy( ) const { return new Ctor4; } // overrides Ctor

private:

  SMObject* construct(SMObject* a1, SMObject* a2, SMObject* a3, SMObject* a4, 
		      Chars&, istream&) const 
  {
    return new T( *((A1*)a1), *((A2*)a2), *((A3*)a3), *((A4*)a4) );
  }
  // overrides CtorAux4
  // The istream& is used only by specializations of this function.
};

@
\section{Special Cases}
At this point we would appear to have a satisfactory situation. The
most common case, where a T has a constructor which takes arguments of
types A1, A2, ... is handled automatically. Special cases are easily
handled by specializing the member `Ctor<n>::construct' to use the
istream&. In fact, the work of reading the `standard case' arguments
is already done by CtorAux<n> even in special cases.
 
But no.
 
A sporadic gcc 2.6.3 bug sometimes prevents specializing a member
function of a template class. In the perhaps overly naive hope that
gcc will someday do templates (almost) right, we hack a workaround
which mimics as closely as possible what we really want to do:
 
For each and every special case, derive a subclass of the needed
instance of Ctor<n>. Override `construct', with the function body
being exactly what the specialization's would have been.
 
An unfortunate consequence is that Ctor<n> will still try to
instantiate the default version of `construct'. It cannot, because T
does not have the right constructor. Indeed, the resulting compiler
error is what this whole scheme is *designed* to cause! So, we hack
further by putting dummy ctors in the classes T. Now I have to puke.
\subsection{struct ReadSMFPGroup}
<<struct ReadSMFPGroup>>=
struct ReadSMFPGroup : public Ctor0<SMFPGroup>
{
  Ctor* copy( ) const { return new ReadSMFPGroup; }          // overrides Ctor1
  SMObject* construct(Chars&, istream&) const;               // overrides Ctor1
};

@
\subsection{struct ReadSMFreeGroup}
<<struct ReadSMFreeGroup>>=
struct ReadSMFreeGroup : public Ctor0<SMFPGroup>
{
  Ctor* copy( ) const { return new ReadSMFreeGroup; }        // overrides Ctor1
  SMObject* construct(Chars&, istream&) const;               // overrides Ctor1
};

@
\subsection{struct ReadSMAbelianGroup}
<<struct ReadSMAbelianGroup>>=
struct ReadSMAbelianGroup : public Ctor0<SMFPGroup>
{
  Ctor* copy( ) const { return new ReadSMAbelianGroup; }     // overrides Ctor1
  SMObject* construct(Chars&, istream&) const;               // overrides Ctor1
};

@
\subsection{struct ReadSMNilpotentGroup}
<<struct ReadSMNilpotentGroup>>=
struct ReadSMNilpotentGroup : public Ctor0<SMFPGroup>
{
  Ctor* copy( ) const { return new ReadSMNilpotentGroup; }   // overrides Ctor1
  SMObject* construct(Chars&, istream&) const;               // overrides Ctor1
};

@
\subsection{struct ReadSMFreeNilpotentGroup}
<<struct ReadSMFreeNilpotentGroup>>=
struct ReadSMFreeNilpotentGroup : public Ctor0<SMFPGroup>
{
  Ctor* copy( ) const { return new ReadSMFreeNilpotentGroup; }   // overrides Ctor1
  SMObject* construct(Chars&, istream&) const;               // overrides Ctor1
};

@
\subsection{struct ReadSMORGroup}
<<struct ReadSMORGroup>>=
struct ReadSMORGroup : public Ctor0<SMFPGroup>
{
  Ctor* copy( ) const { return new ReadSMORGroup; }          // overrides Ctor1
  SMObject* construct(Chars&, istream&) const;               // overrides Ctor1
};

@
\subsection{struct ReadSMSmallCancGroup}
<<struct ReadSMSmallCancGroup>>=
struct ReadSMSmallCancGroup : public Ctor0<SMFPGroup>
{
  Ctor* copy( ) const { return new ReadSMSmallCancGroup; }   // overrides Ctor1
  SMObject* construct(Chars&, istream&) const;               // overrides Ctor1
};

@
\subsection{struct ReadSMPermutation}
<<struct ReadSMPermutation>>=
struct ReadSMPermutation : public Ctor0<SMPermutation>
{
  Ctor* copy( ) const { return new ReadSMPermutation; }      // overrides Ctor1
  SMObject* construct(Chars&, istream&) const;               // overrides Ctor1
};

@
\subsection{struct ReadSMWord}
<<struct ReadSMWord>>=
struct ReadSMWord : public Ctor1<SMWord,SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadSMWord; }             // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
<<struct ReadSMEquation>>=
struct ReadSMEquation : public Ctor1<SMEquation,SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadSMEquation; }         // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadSMEquation2}
<<struct ReadSMEquation2>>=
struct ReadSMEquation2 : public Ctor1<SMEquation2,SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadSMEquation2; }         // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadSMEqSystem}
<<struct ReadSMEqSystem>>=
struct ReadSMEqSystem : public Ctor1<SMEqSystem,SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadSMEqSystem; }         // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadSMSubgroup}
<<struct ReadSMSubgroup>>=
struct ReadSMSubgroup : public Ctor1<SMSubgroup,SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadSMSubgroup; }         // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadSMSetOfWords}
<<struct ReadSMSetOfWords>>=
struct ReadSMSetOfWords : public Ctor1<SMSetOfWords,SMFPGroup>, 
			  protected FEData
{
  Ctor* copy( ) const { return new ReadSMSetOfWords; }       // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadSMVectorOfWords}
<<struct ReadSMVectorOfWords>>=
struct ReadSMVectorOfWords : public Ctor1<SMVectorOfWords,SMFPGroup>, 
			  protected FEData
{
  Ctor* copy( ) const { return new ReadSMVectorOfWords; }       // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadSMMap}
<<struct ReadSMMap>>=
struct ReadSMMap : public Ctor1<SMMap,SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadSMMap; }              // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadSMMap2}
<<struct ReadSMMap2>>=
struct ReadSMMap2 : public Ctor2<SMMap,SMFPGroup,SMFPGroup>, protected FEData
{
  ReadSMMap2(bool transpose = false)
    : Ctor2<SMMap,SMFPGroup,SMFPGroup>( transpose )
  { }
  Ctor* copy( ) const { return new ReadSMMap2( transposeARGS ); }
  // overrides Ctor1
  SMObject* construct(SMObject* a1, SMObject* a2, Chars&, istream&) const;
  // overrides Ctor1
};

@
\subsection{struct ReadSymmetricGroup}
<<struct ReadSymmetricGroup>>=
struct ReadSymmetricGroup : public Ctor0<SMFPGroup>, protected FEData
{
  ReadSymmetricGroup() : Ctor0<SMFPGroup>( ) { }
  Ctor* copy( ) const { return new ReadSymmetricGroup(); }
  // overrides Ctor0
  SMObject* construct(Chars&, istream&) const;
  // overrides Ctor0
};

@
\subsection{struct ReadSMMagnusBreakdown}
<<struct ReadSMMagnusBreakdown>>=
struct ReadSMMagnusBreakdown : public Ctor1<SMMagnusBreakdown,SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadSMMagnusBreakdown; } // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const;
  // overrides Ctor1
};

@
\subsection{struct ReadPowerOfMapItem}
The following special case those menu items which require an
additional int parameter.

<<struct ReadPowerOfMapItem>>=
struct ReadPowerOfMapItem : public Ctor1<PowerOfMap,SMMap>, protected FEData
{
  Ctor* copy( ) const { return new ReadPowerOfMapItem; }     // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadHomologyItem}
<<struct ReadHomologyItem>>=
struct ReadHomologyItem : public Ctor1<HomologyProblem,SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadHomologyItem; }       // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadHomologyItem1}
<<struct ReadHomologyItem1>>=
struct ReadHomologyItem1 : public Ctor1<AbelianIntegralHomologyProblem,SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadHomologyItem1; }       // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadAutEnumItem}
<<struct ReadAutEnumItem>>=
struct ReadAutEnumItem : public Ctor1<AutEnumerator,SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadAutEnumItem; }        // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadFinAutEnumItem}
<<struct ReadFinAutEnumItem>>=
struct ReadFinAutEnumItem : public Ctor1<AutEnumerator,SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadFinAutEnumItem; }     // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadInitialSegmentItem}
<<struct ReadInitialSegmentItem>>=
struct ReadInitialSegmentItem : public Ctor1<InitialSegmentOfWord,SMWord>, 
       protected FEData
{
  Ctor* copy( ) const { return new ReadInitialSegmentItem; } // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadPHeight}
<<struct ReadPHeight>>=
struct ReadPHeight : public Ctor1<AbelianPHeightOfEltProblem,SMWord>, 
       protected FEData
{
  Ctor* copy( ) const { return new ReadPHeight; } // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadTerminalSegmentItem}
<<struct ReadTerminalSegmentItem>>=
struct ReadTerminalSegmentItem : public Ctor1<TerminalSegmentOfWord,SMWord>, 
       protected FEData
{
  Ctor* copy( ) const { return new ReadTerminalSegmentItem; } // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadSegmentOfWordItem}
<<struct ReadSegmentOfWordItem>>=
struct ReadSegmentOfWordItem : public Ctor1<SegmentOfWord,SMWord>, 
       protected FEData
{
  Ctor* copy( ) const { return new ReadSegmentOfWordItem; } // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadFreeGetN\_thElementItem}
<<struct ReadFreeGetN_thElementItem>>=
struct ReadFreeGetN_thElementItem : 
  public Ctor1<FreeGetN_thElement,SMFPGroup>, 
  protected FEData
{
  Ctor* copy( ) const { return new ReadFreeGetN_thElementItem; } // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadFreeGetNextN\_thElementItem}
<<struct ReadFreeGetNextN_thElementItem>>=
struct ReadFreeGetNextN_thElementItem : 
  public Ctor1<FreeGetNextN_thElement,SMWord>, 
  protected FEData
{
  Ctor* copy( ) const { return new ReadFreeGetNextN_thElementItem; } // overrides Ctor1
  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\subsection{struct ReadMakeNilpotentQuotientItem}
<<struct ReadMakeNilpotentQuotientItem>>=
struct ReadMakeNilpotentQuotientItem : 
    public Ctor1<MakeNilpotentQuotient,SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadMakeNilpotentQuotientItem; } 
  // overrides Ctor1
  
  SMObject* construct(SMObject* a1, Chars&, istream&) const; 
  // overrides Ctor1
};

@
\subsection{struct ReadMakeQuotientItem}
<<struct ReadMakeQuotientItem>>=
struct ReadMakeQuotientItem : 
    public Ctor1<MakeQuotient, SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadMakeQuotientItem; } 
  // overrides Ctor1
  
  SMObject* construct(SMObject* a1, Chars&, istream&) const; 
  // overrides Ctor1
};

@
\subsection{struct ReadIsNilpotentProblemItem}
<<struct ReadIsNilpotentProblemItem>>=
struct ReadIsNilpotentProblemItem : 
    public Ctor1<IsNilpotentProblem, SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadIsNilpotentProblemItem; } 
  // overrides Ctor1
  
  SMObject* construct(SMObject* a1, Chars&, istream&) const; 
  // overrides Ctor1
};

@
\subsection{struct ReadIsSGNilpotentItem}
<<struct ReadIsSGNilpotentItem>>=
struct ReadIsSGNilpotentItem : 
    public Ctor1<IsSGNilpotent, SMSubgroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadIsSGNilpotentItem; } 
  // overrides Ctor1
  
  SMObject* construct(SMObject* a1, Chars&, istream&) const; 
  // overrides Ctor1
};

@
\subsection{struct ReadLCStermProblem}
<<struct ReadLCStermProblem>>=
struct ReadLCStermProblem : 
    public Ctor1<NGLCStermGensProblem, SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadLCStermProblem; } 
  // overrides Ctor1
  
  SMObject* construct(SMObject* a1, Chars&, istream&) const; 
  // overrides Ctor1
};

@
\subsection{struct ReadRSApproximationItem}
<<struct ReadRSApproximationItem>>=
struct ReadRSApproximationItem 
  : public Ctor1<ComputeRSApproximation,SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadRSApproximationItem; }  
  // overrides Ctor1

  SMObject* construct(SMObject* a1, Chars&, istream&) const; // overrides Ctor1
};

@
\section{Package Management}
\subsection{struct ReadPackage}
<<struct ReadPackage>>=
struct ReadPackage : 
  public Ctor0<AddPackage>, protected FEData
{
  Ctor* copy( ) const { return new ReadPackage; } 
  // overrides Ctor0
  
  SMObject* construct( Chars&, istream&) const; 
  // overrides Ctor0
};

@
\subsection{struct ReadEditPackage}
<<struct ReadEditPackage>>=
struct ReadEditPackage : 
  public Ctor0<EditPackage>, protected FEData
{
  Ctor* copy( ) const { return new ReadEditPackage; } 
  // overrides Ctor0
  
  SMObject* construct( Chars&, istream&) const; 
  // overrides Ctor0
};

@
\subsection{struct ReadGroupPackageID}
<<struct ReadGroupPackageID>>=
struct ReadGroupPackageID : 
  public Ctor1<RunPackage, SMFPGroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadGroupPackageID; } 
  // overrides Ctor0
  
  SMObject* construct(SMObject* a1, Chars&, istream&) const; 
  // overrides Ctor0
};

@
\subsection{struct ReadWordPackageID}
<<struct ReadWordPackageID>>=
struct ReadWordPackageID : 
  public Ctor1<RunPackage, SMWord>, protected FEData
{
  Ctor* copy( ) const { return new ReadWordPackageID; } 
  // overrides Ctor0
  
  SMObject* construct(SMObject* a1, Chars&, istream&) const; 
  // overrides Ctor0
};

@
\subsection{struct ReadSubgroupPackageID}
<<struct ReadSubgroupPackageID>>=
struct ReadSubgroupPackageID : 
  public Ctor1<RunPackage, SMSubgroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadSubgroupPackageID; } 
  // overrides Ctor0
  
  SMObject* construct(SMObject* a1, Chars&, istream&) const; 
  // overrides Ctor0
};

@
\subsection{struct ReadMapPackageID}
<<struct ReadMapPackageID>>=
struct ReadMapPackageID : 
  public Ctor1<RunPackage, SMMap>, protected FEData
{
  Ctor* copy( ) const { return new ReadMapPackageID; } 
  // overrides Ctor0
  
  SMObject* construct(SMObject* a1, Chars&, istream&) const; 
  // overrides Ctor0
};

@
\subsection{struct ReadHomoPackageID}
<<struct ReadHomoPackageID>>=
struct ReadHomoPackageID : 
  public Ctor1<RunPackage, SMHomomorphism>, protected FEData
{
  Ctor* copy( ) const { return new ReadHomoPackageID; } 
  // overrides Ctor0
  
  SMObject* construct(SMObject* a1, Chars&, istream&) const; 
  // overrides Ctor0
};

@
\subsection{struct ReadWordWordPackageID}
<<struct ReadWordWordPackageID>>=
struct ReadWordWordPackageID : 
  public Ctor2<RunPackage,SMWord,SMWord>, protected FEData
{
  Ctor* copy( ) const { return new ReadWordWordPackageID; }
  // overrides Ctor1
  SMObject* construct(SMObject* a1, SMObject* a2, Chars&, istream&) const;
  // overrides Ctor1
};

@
\subsection{struct ReadSubgroupSubgroupPackageID}
<<struct ReadSubgroupSubgroupPackageID>>=
struct ReadSubgroupSubgroupPackageID : 
  public Ctor2<RunPackage,SMSubgroup,SMSubgroup>, protected FEData
{
  Ctor* copy( ) const { return new ReadSubgroupSubgroupPackageID; }
  // overrides Ctor1
  SMObject* construct(SMObject* a1, SMObject* a2, Chars&, istream&) const;
  // overrides Ctor1
};

@
\subsection{struct ReadSubgroupWordPackageID}
<<struct ReadSubgroupWordPackageID>>=
struct ReadSubgroupWordPackageID : 
  public Ctor2<RunPackage,SMSubgroup,SMWord>, protected FEData
{
  Ctor* copy( ) const { return new ReadSubgroupWordPackageID; }
  // overrides Ctor1
  SMObject* construct(SMObject* a1, SMObject* a2, Chars&, istream&) const;
  // overrides Ctor1
};

@
\section{Statistics}
\subsection{struct ReadSMDataSet}
<<struct ReadSMDataSet>>=
struct ReadSMDataSet : public Ctor0<SMDataSet>, protected FEData
{
  Ctor* copy( ) const { return new ReadSMDataSet; }       // overrides Ctor1
  SMObject* construct(Chars&, istream&) const; // overrides Ctor1
};

@
\section{Calculus}
\subsection{struct ReadSMPolynomial}
<<struct ReadSMPolynomial>>=
struct ReadSMPolynomial : public Ctor0<SMPolynomial>, protected FEData
{
  Ctor* copy( ) const { return new ReadSMPolynomial; }       // overrides Ctor1
  SMObject* construct(Chars&, istream&) const; // overrides Ctor1
};

@
\section{Menu}
\subsection{struct Action}
<<struct Action>>=
  struct Action
  {
	 virtual void print(ostream& ostr) const { }
  };

@
\subsection{struct DefineFPGroup}
<<struct DefineFPGroup>>=
  struct DefineFPGroup : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineFreeGroup}
<<struct DefineFreeGroup>>=
  struct DefineFreeGroup : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineAbelianGroup}
<<struct DefineAbelianGroup>>=
  struct DefineAbelianGroup : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineNilpotentGroup}
<<struct DefineNilpotentGroup>>=
  struct DefineNilpotentGroup : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineFreeNilpotentGroup}
<<struct DefineFreeNilpotentGroup>>=
  struct DefineFreeNilpotentGroup : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineSmallCancGroup}
<<struct DefineSmallCancGroup>>=
  struct DefineSmallCancGroup : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineORGroup}
<<struct DefineORGroup>>=
  struct DefineORGroup : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefinePermutation}
<<struct DefinePermutation>>=
  struct DefinePermutation : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineWord}
<<struct DefineWord>>=
  struct DefineWord : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineEquation}
<<struct DefineEquation>>=
  struct DefineEquation : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineEquation2}
<<struct DefineEquation2>>=
  struct DefineEquation2 : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineEqSystem}
<<struct DefineEqSystem>>=
  struct DefineEqSystem : public Action
  {
         void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineSubgroup}
<<struct DefineSubgroup>>=
  struct DefineSubgroup : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineSetOfWords}
<<struct DefineSetOfWords>>=
  struct DefineSetOfWords : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineVectorOfWords}
<<struct DefineVectorOfWords>>=
  struct DefineVectorOfWords : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineMap}
<<struct DefineMap>>=
  struct DefineMap : public Action
  {
    void print(ostream& ostr) const;      // overrides Action

  };

@
\subsection{struct DefineMap2}
<<struct DefineMap2>>=
  struct DefineMap2 : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineInverseMap2}
<<struct DefineInverseMap2>>=
  struct DefineInverseMap2 : public Action
  {
	 void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefineInt}
<<struct DefineInt>>=
  struct DefineInt : public Action
  {
	 DefineInt(const char* p, int l)
	   : prompt(p), lower(l), suppliedUpper(false)
	 { }

	 DefineInt(const char* p, int l, int u)
	   : prompt(p), lower(l), upper(u), suppliedUpper(true)
	 { }

	 void print(ostream& ostr) const;      // overrides Action

  private:
	 const char* prompt;
	 int lower, upper;
	 bool suppliedUpper;
  };

@
\subsection{struct DefinePackage}
<<struct DefinePackage>>=
  struct DefinePackage : public Action
  {
    DefinePackage() { }
    void print(ostream& ostr) const;      // overrides Action


  };

@
\subsection{struct DefineEditPackage}
<<struct DefineEditPackage>>=
  struct DefineEditPackage : public Action
  {
    DefineEditPackage() { }
    void print(ostream& ostr) const;      // overrides Action


  };

@
\subsection{struct DefineDataSet}
<<struct DefineDataSet>>=
  struct DefineDataSet : public Action
  {
    void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct DefinePolynomial}
<<struct DefinePolynomial>>=
  struct DefinePolynomial : public Action
  {
    void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{struct PackageID}
<<struct PackageID>>=
  struct PackageID : public Action
  {
    PackageID( int id):theID( id ) { }
    void print(ostream& ostr) const;      // overrides Action
    private:
    int theID;

  };

@
\subsection{struct BoundedInteger}
<<struct BoundedInteger>>=
  struct BoundedInteger 
  {
    BoundedInteger() 
      : lowerBound(0), upperBound(0),
	haveLowerBound(false), haveUpperBound(false)
    { }

    BoundedInteger(int lower) 
      : lowerBound(lower), upperBound(0), 
	haveLowerBound(true), haveUpperBound(false) 
    { }

    BoundedInteger(int lower, int upper) 
      : lowerBound(lower), upperBound(upper), 
	haveLowerBound(true), haveUpperBound(true) 
    { }

    int lowerBound, upperBound;
    bool haveLowerBound, haveUpperBound;
  };

@
\subsection{struct DefineInt2}
<<struct DefineInt2>>=
  struct DefineInt2 : public Action
  {
    DefineInt2( const char* p0, const BoundedInteger& bi0,
	        const char* p1, const BoundedInteger& bi1 )
    {
      prompt[0] = p0;
      prompt[1] = p1;
      boundInt[0] = bi0;
      boundInt[1] = bi1;
    }
    
@
\subsection{struct DefineSetOfRelators}
<<struct DefineSetOfRelators>>=
  struct DefineSetOfRelators : public Action
  {
    void print(ostream& ostr) const;      // overrides Action
  };

@
\subsection{class Menu}
<<class Menu>>=
class Menu : public FEData
{
public:

  enum MenuKind { CHECKIN, TOOLS, MAKE, PACKAGES, DATABASE, TESTING };

  void startItemGroup( );
  void startItemGroup(const Expression& condition);
  void startCascade(const Text& text);
  void closeCascade( );
  void addDisabled(const Text& text);
  void separator( );
  void done( );

<<struct Action>>
<<struct DefineFPGroup>>
<<struct DefineFreeGroup>>
<<struct DefineAbelianGroup>>
<<struct DefineNilpotentGroup>>
<<struct DefineFreeNilpotentGroup>>
<<struct DefineSmallCancGroup>>
<<struct DefineORGroup>>
<<struct DefinePermutation>>
<<struct DefineWord>>
<<struct DefineEquation>>
<<struct DefineEquation2>>
<<struct DefineEqSystem>>
<<struct DefineSubgroup>>
<<struct DefineSetOfWords>>
<<struct DefineVectorOfWords>>
<<struct DefineMap>>
<<struct DefineMap2>>
<<struct DefineInverseMap2>>
<<struct DefineInt>>
<<struct DefinePackage>>
<<struct DefineEditPackage>>
<<struct DefineDataSet>>
<<struct DefinePolynomial>>
<<struct PackageID>>
<<struct BoundedInteger>>
<<struct DefineInt2>>
    void print(ostream& ostr) const;      // overrides Action
  private:	
    const char* prompt[2];
    BoundedInteger boundInt[2];
  };
<<struct DefineSetOfRelators>>
protected:

  Menu(MenuKind);

  void add(Ctor* ctor, const Text& text, const Action& action);

private:

  enum StateType { INIT, ITEM_GROUP, DONE };

  StateType state;
};

@
\subsection{class Menu0}
We inline all of the Menu<n> member functions, probably
inappropriately, to avoid having to do explicit instantiation.
This can be improved when gcc supports template repositories.
<<class Menu0>>=
class Menu0 : public Menu
{
public:

  Menu0(MenuKind mk) : Menu( mk ) {
	 cout << "} itemGroups {";
  }

  void add(const CtorArgs0& ctor,
			  const Text& text,
			  const Action& action = Action()
			  )
  {
	 Menu::add( ctor.copy(), text, action );
  }

};

@
\subsection{template class Menu1}
<<template class Menu1>>=
template <class A1>
class Menu1 : public Menu
{
public:

  Menu1(MenuKind mk) : Menu( mk ) {
	 cout << A1::type();
	 cout << "} itemGroups {";
  }

  void add(const CtorArgs1<A1>& ctor,
			  const Text& text,
			  const Action& action = Action()
			  )
  {
	 Menu::add( ctor.copy(), text, action );
  }

};

@
\subsection{template class Menu2}
<<template class Menu2>>=
template <class A1, class A2>
class Menu2 : public Menu
{
public:

  Menu2(MenuKind mk) : Menu( mk ) {
	 cout << A1::type() << ' ' << A2::type();
	 cout << "} itemGroups {";
  }

  void add(const CtorArgs2<A1,A2>& ctor,
			  const Text& text,
			  const Action& action = Action()
			  )
  {
	 Menu::add( ctor.copy(), text, action );
  }

};

@
\subsection{template class Menu3}
<<template class Menu3>>=
template <class A1, class A2, class A3>
class Menu3 : public Menu
{
public:

  Menu3(MenuKind mk) : Menu( mk )
  {
    cout << A1::type() << ' ' << A2::type() << ' ' << A3::type();
    cout << "} itemGroups {";
  }

  void add( const CtorArgs3<A1,A2,A3>& ctor,
	    const Text& text,
	    const Action& action = Action()
	    )
  {
    Menu::add( ctor.copy(), text, action );
  }

};

@
\subsection{template class Menu4}
<<template class Menu4>>=
template <class A1, class A2, class A3, class A4>
class Menu4 : public Menu
{
public:

  Menu4(MenuKind mk) : Menu( mk )
  {
    cout << A1::type() << ' ' << A2::type() << ' ' << A3::type() << ' '
	 << A4::type();
    cout << "} itemGroups {";
  }

  void add( const CtorArgs4<A1,A2,A3,A4>& ctor,
	    const Text& text,
	    const Action& action = Action()
	    )
  {
    Menu::add( ctor.copy(), text, action );
  }

};

@
\section{license}
<<license>>=
// Copyright (C) 1994-2004 The New York Group Theory Cooperative
// See license/NYGTC for the full notice
@
<<*>>=
// src/backend/SessionManager/include/Menu.h
#ifndef _MENU_H_
#define _MENU_H_

<<license>>
<<include>>
<<struct Ctor>>
<<struct CtorAux0>>
<<struct CtorAux1>>
<<struct CtorAux2>>
<<struct CtorAux3>>
<<struct CtorAux4>>
<<struct CtorArgs0>>
<<template struct Ctor0>>
<<template struct CtorArgs1>>
<<template struct Ctor1>>
<<template struct CtorArgs2>>
<<template struct Ctor2>>
<<template struct CtorArgs3>>
<<template struct Ctor3>>
<<template struct CtorArgs4>>
<<template struct Ctor4>>
<<struct ReadSMFPGroup>>
<<struct ReadSMFreeGroup>>
<<struct ReadSMAbelianGroup>>
<<struct ReadSMNilpotentGroup>>
<<struct ReadSMFreeNilpotentGroup>>
<<struct ReadSMORGroup>>
<<struct ReadSMSmallCancGroup>>
<<struct ReadSMPermutation>>
<<struct ReadSMWord>>
<<struct ReadSMEquation>>
<<struct ReadSMEquation2>>
<<struct ReadSMEqSystem>>
<<struct ReadSMSubgroup>>
<<struct ReadSMSetOfWords>>
<<struct ReadSMVectorOfWords>>
<<struct ReadSMMap>>
<<struct ReadSMMap2>>
<<struct ReadSymmetricGroup>>
<<struct ReadSMMagnusBreakdown>>
<<struct ReadPowerOfMapItem>>
<<struct ReadHomologyItem>>
<<struct ReadHomologyItem1>>
<<struct ReadAutEnumItem>>
<<struct ReadFinAutEnumItem>>
<<struct ReadInitialSegmentItem>>
<<struct ReadPHeight>>
<<struct ReadTerminalSegmentItem>>
<<struct ReadSegmentOfWordItem>>
<<struct ReadFreeGetN_thElementItem>>
<<struct ReadFreeGetNextN_thElementItem>>
<<struct ReadMakeNilpotentQuotientItem>>
<<struct ReadMakeQuotientItem>>
<<struct ReadIsNilpotentProblemItem>>
<<struct ReadIsSGNilpotentItem>>
<<struct ReadLCStermProblem>>
<<struct ReadRSApproximationItem>>
<<struct ReadPackage>>
<<struct ReadEditPackage>>
<<struct ReadGroupPackageID>>
<<struct ReadWordPackageID>>
<<struct ReadSubgroupPackageID>>
<<struct ReadMapPackageID>>
<<struct ReadHomoPackageID>>
<<struct ReadWordWordPackageID>>
<<struct ReadSubgroupSubgroupPackageID>>
<<struct ReadSubgroupWordPackageID>>
<<struct ReadSMDataSet>>
<<struct ReadSMPolynomial>>
<<class Menu>>
<<class Menu0>>
<<template class Menu1>>
<<template class Menu2>>
<<template class Menu3>>
<<template class Menu4>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
