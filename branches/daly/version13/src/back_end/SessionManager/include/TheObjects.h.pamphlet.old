\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SessionManager/include/TheObjects.h}
\author{Roger Needham}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "Set.h"
#include "Associations.h"
#include "Chars.h"

@
\subsection{class TheObjects}
<<class TheObjects>>=
class TheObjects
{
public:
  // No constructors for this static class.
  static bool isRunning(OID oid);
  // True iff oid is the OID of a ComputationManager which is in
  // state RUNNING.
  static bool isStalled(OID oid);
  // Returns true when no running CM has any ARCs from oid.
  static SetOf<OID> remove(OID oid);
  // Removes and deletes the indicated SMObject, and all of its dependents.
  // A bad oid is quietly ignored, for messaging fault-tolerance.
  // Returns the dependency closure of oid, i.e., the objects which were
  // deleted.
  static SMObject* get(OID oid);
  // Returns the SMObject* with the given oid,
  // or 0 if there is no such object, for messaging fault-tolerance.
  // Used by class SessionManager and class Ctor.
  static SetOf<OID> dependencyClosure(OID oid);
  // A bad oid is quietly ignored, for messaging fault-tolerance.
  static Chars name(OID oid);
  // Returns name of the object with the given oid
 
private:
  friend class SMObject;
  friend class SessionManager;
  friend class Ctor;
  friend class UnboundedSupervisor;
  friend class ResourceManager;
  friend class ExtendToHomProblem; //@db temporary hack
  static OID reserveOid( );
  // Reserves a place in theObjects for a new SMObject, and returns the index.
  // Used by class SMObject to prepare for enrollment.
  static void enroll(SMObject* newObject);
  // Used by class SMObject.
  static void passControl( );
  // Passes control to a ComputationManager in a fair way.
  static void setName(OID oid, Chars name);
  // Changes name of an object
  static void resize(int newLength);
  // A helper for expanding theObjects.
  static const int minimumLength = 16;
  static int theObjectsLength;
  static SMObject** theObjects;
  static int CMToGetControl;
  // keeps a copy of the names of the objects for SM use
  static AssociationsOf<OID,Chars>* theNames; 
};

@
\section{license}
<<license>>=
// Copyright (C) 1994-2004 The New York Group Theory Cooperative
// See license/NYGTC for the full notice
@
<<*>>=
// src/backend/SessionManager/include/TheObjects.h
#ifndef _THEOBJECTS_H_
#define _THEOBJECTS_H_

<<license>>
<<include>>
<<class TheObjects>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
