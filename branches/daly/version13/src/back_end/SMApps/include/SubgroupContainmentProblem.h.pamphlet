\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SMApps/include/SubgroupContainmentProblem.h}
\author{Dmitry Pechkin}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "ComputationManager.h"
#include "Supervisor.h"
#include "SGNilpotentQuotients.h"
#include "ToddCoxeter.h"
#include "AP-fixups.h"

@
\section{class ExtendedNormalClosureARCer}
This class is commented out.
<<class ExtendedNormalClosureARCer>>=
class ExtendedNormalClosureARCer : public ARCer
{
public:
  ExtendedNormalClosureARCer( ComputationManager& boss );
  ~ExtendedNormalClosureARCer( );
  bool answer( ) { return contains; }
  void setArguments( const FPGroup& G, const VectorOf<Word>& H, 
		     const SetOf<Word>& testWords );

  // Inherited from ARCer:
  // bool takeControl( );
  void runComputation( );
  void writeResults( ostream& );
  void readResults( istream& );

private:
  SetOf<Word> reduceTestingSet( class DecomposeInSubgroupOfFPGroup& D, 
				SetOf<Word>& testingSet );
  FPGroup theGroup;
  VectorOf<Word> theSubgroup;
  SetOf<Word> theTestWords;
  bool contains;
};

@
\section{class SubgroupContainment}
<<class SubgroupContainment>>=
class SubgroupContainment : public ComputationManager
{
public:
  SubgroupContainment( class SubgroupContainmentProblem& );
  SubgroupContainment( class IsSGNormal& );
  Trichotomy contains() const;
  bool haveDetails( ) const;
  Chars getDecompositionFileName( ) const;
  void takeControl( );         // overrides ComputationManager
  void start( ) { };          // overrides ComputationManager
  void terminate( ) { };      // overrides ComputationManager

private:
  SetOf<Word> reduceTestingSet( const class DecomposeInSubgroupOfFPGroup& D, 
				SetOf<Word>& testingSet );
  const SMSubgroup& theSubgroup;
  VectorOf<Word> theTestWords;
  SetOf<Word> wordsToCheck;
  Trichotomy theAnswer;
  DetailedReport wordsDecomposition;
};

@
\section{class SubgroupContainmentProblem}
<<class SubgroupContainmentProblem>>=
class SubgroupContainmentProblem : public Supervisor 
{
public:
  SubgroupContainmentProblem( class SMSubgroup& subgroup, class SMWord& w );
  const SMSubgroup& getSubgroup() const { return theSubgroup; }
  const SMWord& getTestWord( ) const { return theTestWord; }

  //  Trichotomy answer( ) const { return theAnswer; }
  // When a WordProblem is used internally, it does not report the result
  // to the FE, but just sits and waits to be polled through this member.
  // yes => trivial, no => not trivial, dontknow => not done yet.

  void viewStructure(ostream& ostr) const;  // overrides SMObject
  void takeControl( );         // overrides ComputationManager
  void start( );              // overrides ComputationManager
  void terminate( );          // overrides ComputationManager

private:
  const SMSubgroup& theSubgroup;
  const SMWord& theTestWord;
  Trichotomy isWordInSubgroup;
  Chars explanation;
  Subordinate<SubgroupContainmentProblem,SubgroupContainment> subgroupContain;
  MirrorSubordinate normalClosure;
  MirrorSubordinate abelianInvariants;
  MirrorSubordinate sgNilpotentQuotients;
  Subordinate<SubgroupContainmentProblem, SCPinNilpotentQuotients> 
    scpInNilpotentQuotients;
  MirrorSubordinate toddCoxeter;
  Subordinate<SubgroupContainmentProblem, WordRepresentative> wordRepCM;
};

@
\section{class IsSGNormal}
<<class IsSGNormal>>=
class IsSGNormal : public Supervisor 
{
public:
  IsSGNormal( class SMSubgroup& subgroup );
  const SMSubgroup& getSubgroup() const { return theSubgroup; }
  SetOf<Word> getTestWords( ) const { return theTestWords; }
  void viewStructure(ostream& ostr) const;  // overrides SMObject
  void takeControl( );         // overrides ComputationManager
  void start( );              // overrides ComputationManager
  void terminate( );          // overrides ComputationManager

private:
  SetOf<Word> makeTestWords( const class SMSubgroup& H ) const;
  const SMSubgroup& theSubgroup;
  SetOf<Word> theTestWords;
  Trichotomy isNormal;
  Chars explanation;
  Subordinate<IsSGNormal,SubgroupContainment>  subgroupContain;
  MirrorSubordinate normalClosure;
  MirrorSubordinate abelianInvariants;
  MirrorSubordinate sgNilpotentQuotients;
  Subordinate<IsSGNormal, SCPinNilpotentQuotients>  scpInNilpotentQuotients;
  MirrorSubordinate toddCoxeter;
  Subordinate<IsSGNormal, WordRepresentative> wordRepCM;
};

@
\section{license}
<<license>>=
// Copyright (C) 1994 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.
@
<<*>>=
// src/backend/SMApps/include/SubgroupContainmentProblem.h
#ifndef _SUBGROUP_CONTAINMENT_PROBLEMS_H_
#define _SUBGROUP_CONTAINMENT_PROBLEMS_H_

<<license>>
<<include>>
<<class SubgroupContainment>>
<<class SubgroupContainmentProblem>>
<<class IsSGNormal>>

inline
bool SubgroupContainment::haveDetails ( ) const 
{ 
  return wordsDecomposition.haveDetails(); 
}

inline
Chars SubgroupContainment::getDecompositionFileName( ) const 
{ 
  return wordsDecomposition.getFileName(); 
}

#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
