\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SMApps/include/IsTrivialProblem.h}
\author{Dmitry Bormotov}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "Supervisor.h"
#include "FEData.h"
#include "Word.h"
#include "FPGroup.h"
#include "Chars.h"
#include "GroupFastChecks.h"
#include "NilpotentQuotients.h"
#include "GeneticProblems.h"

@
\section{class IsTrivialChecker}
This separates out the GIC-sniffing smarts needed to check a word for
triviality.
<<class IsTrivialChecker>>=
class IsTrivialChecker
{
public:
  IsTrivialChecker( class SMFPGroup& );
  Trichotomy isTrivial( );
  Chars getExplanation( ) { return explanation; }
  Chars getDetailsFileName( ) const;
  bool haveDetails( ) const;

private:
  class SMFPGroup& theGroup;
  FPGroup G;
  GroupFastChecks checker;
  class GIC& gic;
  class GCM& gcm;
  bool triedAbelianization;
  bool triedPreliminaryCheckings;
  Chars explanation;
  DetailedReport trivialDetails; 
  Trichotomy preliminaryCheckings();
};

@
\section{class IsTrivialProblem}
<<class IsTrivialProblem>>=
class IsTrivialProblem : public Supervisor
{
public:
  IsTrivialProblem( class SMFPGroup& );

  Trichotomy answer( ) const { return theAnswer; }
  // When a WordProblem is used internally, it does not report the result
  // to the FE, but just sits and waits to be polled through this member.
  // yes => trivial, no => not trivial, dontknow => not done yet.

  void viewStructure(ostream& ostr) const;  // overrides SMObject
  void takeControl( );         // overrides ComputationManager
  void start( );              // overrides ComputationManager
  void terminate( );          // overrides ComputationManager

private:
  const SMFPGroup& theGroup;
  IsTrivialChecker theChecker;
  Trichotomy theAnswer;
  Chars explanation;
  MirrorSubordinate normalClosure;
  MirrorSubordinate abelianInvariants;
  MirrorSubordinate kbSupervisor;
  MirrorSubordinate agSupervisor;
  MirrorSubordinate nilpotentQuotients;
  Subordinate<IsTrivialProblem,NilpotentWPInQuotients> nilpotentWPInQuotients;
  Subordinate<IsTrivialProblem, GeneticWPCM> genetic;
};

@
\section{license}
<<license>>=
// Copyright (C) 1994 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.
@
<<*>>=
// src/backend/SMApps/include/IsTrivialProblem.h
#ifndef _IS_TRIVIAL_PROBLEM_H_
#define _IS_TRIVIAL_PROBLEM_H_

<<license>>
<<include>>

<<class IsTrivialChecker>>
<<class IsTrivialProblem>>

inline
Chars IsTrivialChecker::getDetailsFileName( ) const 
{ 
  return trivialDetails.getFileName(); 
}

inline
bool IsTrivialChecker::haveDetails( ) const
{
  trivialDetails.haveDetails( );
}

#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
