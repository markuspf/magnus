\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SMApps/include/AutoEnumerator.h}
\author{The Magnus Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "Supervisor.h"
#include "SMEnumerator.h"
#include "RandomAutoInFree.h"
#include "File.h"
#include "Word.h"
#include "SMFPGroup.h"
#include "fastProblems.h"
#include "OutMessages.h"

@
\section{class AutEnumeratorARCer2}
<<class AutEnumeratorARCer2>>=
class AutEnumeratorARCer2 : public EnumeratorARCer
{
public:
  AutEnumeratorARCer2( ComputationManager& boss ) 
    : EnumeratorARCer( boss ), 
    randAuto( 0 ), 
    isFinite(0), 
    current( 0 ) { }

  ~AutEnumeratorARCer2( ) { delete randAuto;} 

  void setArguments(  FreeGroup group,int avgNumbers, 
		     int n, 
		     bool isfinite);

  // Inherited from ARCer:
  // bool takeControl( );

  Chars getFileName() const;
  void enumerate( );
  void writeResults( ostream& );
  void readResults( istream& );

private:
  int  current;
  RandomAutoInFree* randAuto;
  bool isFinite;
  File file;
  int number;
};

@
\section{class AutoEnumeratorProblem}
<<class AutoEnumeratorProblem>>=
class AutoEnumeratorProblem : public EnumeratorProblem< Map >
{
public:
  AutoEnumeratorProblem(SMFPGroup& );
  void viewStructure(ostream& ostr) const;  // overrides SMObject
  void takeControl( );         // overrides ComputationManager
  Chars getDataFileName() const { return arcer.getFileName(); }

  void start( ) {   
    LogMessage msg(*this,theGroup);
    if (theGroup.gic.isAbelian()==yes && 
	theGroup.getFPGroup().getRelators().cardinality() > 0){
      Message msg;
      msg << " This group is not free abelian, can't built automorphisms.";
      msg.send();
      resultIsFast();
    }else
      if (theGroup.getFreePreimage().numberOfGenerators() < 2){
	LogMessage msg(*this,theGroup);
	if (theGroup.getFreePreimage().numberOfGenerators()==0)
	  msg <<  Name(theGroup) << " is trivial, so it has only one automorphism: 1->1.";
	else
	  {
	    Chars nameOfGen = theGroup.getFreePreimage().nameOfGenerator(0);
	    msg <<  Name(theGroup) << " with one generator, so it has only two automorphisms: " <<
	      nameOfGen << "->"<<nameOfGen <<" and "<<nameOfGen<<"->"<<nameOfGen<<"^-1.";
	}
	msg.send();
	resultIsFast();
      }
      else{
	int num = getParameters().getValue("P1");
	int avgNumGens = getParameters().getValue("P2");
	arcer.setArguments(theGroup.getFreePreimage(),avgNumGens,num,false);
	LogMessage msg1(*this,theGroup);
	msg1 << Link(Chars( "Click here to see the random automorphisms  of ")+
		    Text( Name(theGroup) ),
		    "RandomAutomorphisms",
		    arcer.getFileName(),true );
	msg1.send();        
      }
    
  }

  void terminate( ) {  }          // overrides ComputationManager

  void resume( ) {              // overrides ComputationManager
    arcer.submitSignal();
    
    int num = getParameters().getValue("P1");
    int avgNumGens = getParameters().getValue("P2");
    arcer.setArguments(theGroup.getFreePreimage(),avgNumGens,num,false);
  }
   
private:
  SMFPGroup& theGroup;
  AutEnumeratorARCer2 arcer;
};

@
\section{class FiniteAutoEnumeratorProblem}
<<class FiniteAutoEnumeratorProblem>>=
class FiniteAutoEnumeratorProblem : public EnumeratorProblem< Map >
{
public:
  FiniteAutoEnumeratorProblem(SMFPGroup& );
  void viewStructure(ostream& ostr) const;  // overrides SMObject
  void takeControl( );         // overrides ComputationManager
  Chars getDataFileName() const { return arcer.getFileName(); }

  void start( ) {   
    LogMessage msg(*this,theGroup);
    if (theGroup.gic.isAbelian()==yes && 
	theGroup.getFPGroup().getRelators().cardinality() > 0){
      Message msg;
      msg << " This group is not free abelian, can't built automorphisms.";
      msg.send();
      resultIsFast();
    }else
      if (theGroup.getFreePreimage().numberOfGenerators() < 2){
	LogMessage msg(*this,theGroup);
	if (theGroup.getFreePreimage().numberOfGenerators()==0)
	  msg <<  Name(theGroup) << " is trivial, so it has only one automorphism: 1->1.";
	else
	  {
	    Chars nameOfGen = theGroup.getFreePreimage().nameOfGenerator(0);
	    msg <<  Name(theGroup) << " with one generator, so it has only two automorphisms: " <<
	      nameOfGen << "->"<<nameOfGen <<" and "<<nameOfGen<<"->"<<nameOfGen<<"^-1.";
	}
	msg.send();
	resultIsFast();
      }
      else{
	int num = getParameters().getValue("P1");
	int avgNumGens = getParameters().getValue("P2");
	arcer.setArguments(theGroup.getFreePreimage(),avgNumGens,num,true);
	LogMessage msg1(*this,theGroup);
	msg1 << Link(Chars( "Click here to see the random automorphisms  of ")+
		    Text( Name(theGroup) ) + Chars(" of finite order."),
		    "RandomAutomorphisms",
		    arcer.getFileName(),true );
	msg1.send();        
      }
    
  }

  void terminate( ) {  }          // overrides ComputationManager

  void resume( ) {              // overrides ComputationManager
    arcer.submitSignal();
    
    int num = getParameters().getValue("P1");
    int avgNumGens = getParameters().getValue("P2");
    arcer.setArguments(theGroup.getFreePreimage(),avgNumGens,num,true);
  }
   
private:
  SMFPGroup& theGroup;
  AutEnumeratorARCer2 arcer;
};

@
\section{license}
<<license>>=
// Copyright (C) 1994 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.
@
<<*>>=
// src/backend/SMApps/include/AutoEnumerator.h
#ifndef _AutoEnumerator_H_
#define _AutoEnumerator_H_

<<license>>
<<include>>
<<class AutEnumeratorARCer2>>
<<class AutoEnumeratorProblem>>
<<class FiniteAutoEnumeratorProblem>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
