\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SMApps/include/IsWordAPE.h}
\author{Alexander Ushakov}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "TurnerProperSubgroupEnumerator.h"
#include "FreeGroup.h"
#include "Supervisor.h"
#include "RankOfSubgroup.h"

@
\section{class IsWordAPEARCer}
<<class IsWordAPEARCer>>=
class IsWordAPEARCer : public ARCer
{
public:
  IsWordAPEARCer( ComputationManager& boss, 
		  const class FreeGroup& group, 
		  const Word& word );

  ~IsWordAPEARCer();
  void runComputation( );
  void writeResults( ostream& );
  void readResults( istream& );
  Chars getFileName( ) const { return PSE->getFileName(); }

  Trichotomy getAnswer() const { return answer;}
  bool HaveSG() const { return haveSG; } 

  bool getSG(SGofFreeGroup& sg) {
    if (answer!=no) return true;
    sg = *theSG;
    return true;
  }

private:
  const class FreeGroup theGroup;
  // given free group
  const Word theWord;
  // given word

  const static int period = 1000;

  Trichotomy answer;
  SGofFreeGroup* theSG;
  bool haveSG;
  // answer

  ProperSubgroupEnumerator* PSE;
  // Subgroup enumerator 

  void lookingup();
  // enumerate subgroup
  bool checkForPrimitive(SGofFreeGroup sg);
  // check word for primitive in subgroup sg
  void printSG( ostream& file, const SGofFreeGroup& subgroup );

<<class pairSG>>

};

@
\subsection{class pairSG}
<<class pairSG>>=
  class pairSG_bool
    {
    public:
      
      pairSG_bool(const SGofFreeGroup& sg) : theSG(sg) , checked(false) { }
      pairSG_bool(const SGofFreeGroup& sg, bool b) : theSG(sg), checked(b) { }
      
      inline bool operator == (const pairSG_bool& sg) const { 
	return (theSG==sg.theSG);
      }
      
      inline int hash() const {
	return theSG.hash();
      }
      
      void setChecked( ) { checked=true; }
      bool getChecked( ) const { return checked; }
      
      SGofFreeGroup getSG() const { return theSG; }
      
    private:
      SGofFreeGroup theSG;
      bool checked;
      
    };

@
\section{class IsWordAPE}
<<class IsWordAPE>>=
class IsWordAPE : public ComputationManager
{
public:
  IsWordAPE(class IsWordAPEProblem& problemObject );
  ~IsWordAPE( );

  Trichotomy getAnswer() const { 
       return theARCer.getAnswer();
  }

  bool haveSG() const { 
       return theARCer.HaveSG();
  }

  bool getSG(SGofFreeGroup& sg) {
       return theARCer.getSG(sg);
  }

  Chars getFileName( ) { return theARCer.getFileName(); }
  // Returns name of the file with computation details

  void takeControl( );         // overrides ComputationManager
  void start( ) { };              // overrides ComputationManager
  void terminate( ) { };          // overrides ComputationManager

private:
  const class SMWord& theWord;
  FreeGroup theGroup;
  IsWordAPEARCer theARCer;
};

@
\section{class IsWordAPEProblem}
<<class IsWordAPEProblem>>=
class IsWordAPEProblem : public Supervisor
{
public:
  IsWordAPEProblem(const class SMWord& w);
  const class SMWord& getWord( ) const { return theWord; }
  void viewStructure(ostream& ostr) const;  // overrides SMObject
  void takeControl( );         // overrides ComputationManager
  void start( ) { };          // overrides ComputationManager
  void terminate( ) { };      // overrides ComputationManager

private:
  const SMWord& theWord;
  bool linkHasBeenSent;
  Subordinate<IsWordAPEProblem, IsWordAPE> isWordAPE;
};

@
\section{license}
<<license>>=
// Copyright (C) 1994 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.
@
<<*>>=
// src/backend/SMApps/include/IsWordAPE.h
#ifndef _IS_WORD_APE_H_
#define _IS_WORD_APE_H_

<<license>>
<<include>>
<<class IsWordAPEARCer>>
<<class IsWordAPE>>
<<class IsWordAPEProblem>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
