\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SMApps/include/OneRelatorProblems.h}
\author{The Magnus Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "fastProblems.h"

@
\section{class ORFindHNNPresentation}
<<class ORFindHNNPresentation>>=
class ORFindHNNPresentation : public FastComputation
{
public:
  ORFindHNNPresentation(const SMFPGroup& G) 
    : theGroup( G ), numOfGens(0), stableGen(1), accompGen(1) { }

  ORFindHNNPresentation(const SMFPGroup& G, const Generator& stable) 
    : theGroup( G ), numOfGens(1), stableGen(stable), accompGen(1) { }

  ORFindHNNPresentation(const SMFPGroup& G, const Generator& stable, 
			const Generator& accomp) 
    : theGroup( G ), numOfGens(2), stableGen(stable), accompGen(accomp) { }

  void takeControl( );              // overrides ComputationManager

private:
  const SMFPGroup& theGroup;
  int numOfGens;
  Generator stableGen;
  Generator accompGen;
};

@
\section{class ORGroup\_IsMagnusSubgroup}
<<class ORGroup_IsMagnusSubgroup>>=
class ORGroup_IsMagnusSubgroup : public FastComputation 
{
public:
  ORGroup_IsMagnusSubgroup( const SMSubgroup& S )
    : subgroup( S )
  { }

  void takeControl( );

private:
  const SMSubgroup& subgroup;
};

@
\section{class ORExtendedWordProblemARCer}
<<class ORExtendedWordProblemARCer>>=
class ORExtendedWordProblemARCer : public ARCer
{
public:
  ORExtendedWordProblemARCer( ComputationManager& );

  void setArguments( const Word& relator, const Word& testWord, 
		     const VectorOf<Word>& target );

  bool getRetValue() const { return retValue; }

  Word wordInBasis( ) const { return theWordInBasis; } 

  // Inherited from ARCer:
  // bool takeControl( );
  void runComputation( );
  void writeResults( ostream& );
  void readResults( istream& );
  
private:
  void printWord(const Word& w, ostream& ostr);
  Word theRelator;
  Word theTestWord;
  VectorOf<Word> theTarget;
  Trichotomy answer;
  Word theWordInBasis;
  bool retValue;
};

@
\section{class ORExtendedWordProblemCM}
<<class ORExtendedWordProblemCM>>=
class ORExtendedWordProblemCM : public ComputationManager
{
public:
  ORExtendedWordProblemCM( class ORExtendedWordProblem& PO );
  Trichotomy isExpressed( ) const { return itIsExpressed; }
  Word wordInBasis( ) const { return theWordInBasis; }
  void takeControl( );         // overrides ComputationManager
  void start( ) { };              // overrides ComputationManager
  void terminate( );          // overrides ComputationManager

private:
  const Word theRelator;
  const Word theTestWord;
  const VectorOf<Word> theTarget;
  Trichotomy itIsExpressed;
  Word theWordInBasis;
  bool bStarted;
  ORExtendedWordProblemARCer arcer;
};

@
\section{class ORExtendedWordProblem}
<<class ORExtendedWordProblem>>=
class ORExtendedWordProblem : public Supervisor
{
public:
  ORExtendedWordProblem( class SMSubgroup& target, class SMWord& w );

  Trichotomy answer( ) const { return theAnswer; }
  // When a WordProblem is used internally, it does not report the result
  // to the FE, but just sits and waits to be polled through this member.
  // yes => trivial, no => not trivial, dontknow => not done yet.

  Word wordInBasis( ) const { return theWordInBasis; }
  const SMWord& getTestWord( ) const { return theWord; }
  const SMSubgroup& getTarget( ) const { return theTarget; }
  void viewStructure(ostream& ostr) const;  // overrides SMObject
  void takeControl( );         // overrides ComputationManager
  void start( ) { }           // overrides ComputationManager
  void terminate( ) { }       // overrides ComputationManager

private:
  SMWord& theWord;
  SMSubgroup& theTarget;
  Trichotomy theAnswer;
  Word theWordInBasis;
  Subordinate<ORExtendedWordProblem, ORExtendedWordProblemCM> orwp;
};

@
\section{class ORIsMagnusSubgroup}
<<class ORIsMagnusSubgroup>>=
class ORIsMagnusSubgroup : public FastComputation 
{
public:
  ORIsMagnusSubgroup( const SMSubgroup& subgroup )
    : theSubgroup( subgroup )
  { }

  void takeControl( );

private:
  const SMSubgroup& theSubgroup;
};

@
\section{class ORConsequencesEnumeratorARCer}
This class is commented out.
<<class ORConsequencesEnumeratorARCer>>=
class ORConsequencesEnumeratorARCer : public ARCer
{
public:
  ORConsequencesEnumeratorARCer( ComputationManager& );

  void setArguments( const VectorOf<Chars>& namesOfGenerators, 
		     const Word& relator, const Chars& fileName );

  // Inherited from ARCer:
  // bool takeControl( );
  void runComputation( );
  void writeResults( ostream& );
  void readResults( istream& );
  
private:
  void printWord(const Word& w, ostream& ostr);
  VectorOf<Chars> theNamesOfGenerators;
  Word theRelator;
  Chars theFileName;
};

@
\section{class ORConsequencesEnumeratorCM}
This class is commented out.
<<class ORConsequencesEnumeratorCM>>=
class ORConsequencesEnumeratorCM : public ComputationManager
{
public:
  ORConsequencesEnumeratorCM( class ORConsequencesEnumerator& CE );
  void takeControl( );         // overrides ComputationManager
  void start( ) { };              // overrides ComputationManager
  void terminate( );          // overrides ComputationManager

private:
  const class SMFPGroup& theGroup;
  Chars theFileName;
  bool arcerStarted;
  ORConsequencesEnumeratorARCer arcer;
};

@
\section{class ORConsequencesEnumerator}
This class is commented out.
<<class ORConsequencesEnumerator>>=
class ORConsequencesEnumerator : public Supervisor
{
public:
  ORConsequencesEnumerator( class SMFPGroup& group );
  const SMFPGroup& getGroup( ) const { return theGroup; }
  Chars getFileName( ) const { return theFileName; }
  void viewStructure(ostream& ostr) const;  // overrides SMObject
  void takeControl( );         // overrides ComputationManager
  void start( ) { }           // overrides ComputationManager
  void terminate( ) { }       // overrides ComputationManager

private:
  const SMFPGroup& theGroup;
  Chars theFileName;
  bool linked;
  Subordinate<ORConsequencesEnumerator, ORConsequencesEnumeratorCM> enumerator;
};

@
\section{license}
<<license>>=
// Copyright (C) 1994 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.
@
<<*>>=
// src/backend/SMApps/include/OneRelatorProblems.h
#ifndef __ONE_RELATOR_PROBLEMS__
#define __ONE_RELATOR_PROBLEMS__

<<license>>
<<include>>
<<class ORFindHNNPresentation>>
<<class ORGroup_IsMagnusSubgroup>>
<<class ORExtendedWordProblemARCer>>
<<class ORExtendedWordProblemCM>>
<<class ORExtendedWordProblem>>
<<class ORIsMagnusSubgroup>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
