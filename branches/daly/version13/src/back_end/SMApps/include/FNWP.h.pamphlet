\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SMApps/include/FNWP.h}
\author{Dmitry Bormotov}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "Supervisor.h"
#include "SMWord.h"
#include "ARCer.h"

@
\section{class FNWPArcer}
<<class FNWPArcer>>=
class FNWPArcer : public ARCer {
public:
  FNWPArcer( ComputationManager& );
  void setArguments( const FreeGroup&, int nClass, const SetOf<Word>& ); 
  Trichotomy getRetValue() { return retValue; }
  // Inherited from ARCer:
  // bool takeControl( );
  void runComputation( );
  void writeResults( ostream& );
  void readResults( istream& );
  
private:
  FreeGroup theGroup;
  int c;
  SetOf<Word> theWords;
  Trichotomy retValue;
};

@
\section{class FNWPCM}
<<class FNWPCM>>=
class FNWPCM : public ComputationManager {
public:
  FNWPCM( class Supervisor& boss );
  void init( const FreeGroup& group, int nClass, const SetOf<Word> words );
  // you must call this function before any other accessor
  Trichotomy areTrivial( ) { return tAreTrivial; }
  void takeControl( );         // overrides ComputationManager
  void start( );              // overrides ComputationManager
  void terminate( );          // overrides ComputationManager

private:
  FreeGroup theGroup;
  int c;
  SetOf<Word> theWords;
  const Supervisor& theBoss;
  Trichotomy tAreTrivial;
  bool bStarted;
  bool bInited;
  FNWPArcer arcer;
};

@
\section{license}
<<license>>=
// Copyright (C) 1994 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.
@
<<*>>=
// src/backend/SMApps/include/FNWP.h
#ifndef _FNWP_h_
#define _FNWP_h_

<<license>>
<<include>>
<<class FNWPArcer>>
<<class FNWPCM>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}


