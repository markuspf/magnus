\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/SMApps/include/HNNProblems.h}
\author{Dmitry Pechkin}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "IsFreeProblem.h"
#include "fastProblems.h"

@
\section{class MakeHNNExtOfFreeGroup}
<<class MakeHNNExtOfFreeGroup>>=
class MakeHNNExtOfFreeGroup : public FastComputation
{
public:
  MakeHNNExtOfFreeGroup( const SMFPGroup& G,
			 const class SMSubgroup& S1, const class SMSubgroup& S2 )
    : theStableLetter( "t" /*stableLetter*/ ), 
      subgroup1( S1 ), subgroup2( S2 )
  { }

  void takeControl( );              // overrides ComputationManager
    
private:
  const Chars theStableLetter;
  const class SMSubgroup& subgroup1;
  const class SMSubgroup& subgroup2;
};

@
\section{class HNNofFreeGroup\_IsTrivial}
<<class HNNofFreeGroup_IsTrivial>>=
class HNNofFreeGroup_IsTrivial : public FastComputation 
{
public:
  HNNofFreeGroup_IsTrivial( const SMFPGroup& G )
    : group( G )
  { }

  void takeControl( );

private:
  const SMFPGroup& group;
};

@
\section{class HNNofFreeGroup\_IsFinite}
<<class HNNofFreeGroup_IsFinite>>=
class HNNofFreeGroup_IsFinite : public FastComputation 
{
public:
  HNNofFreeGroup_IsFinite( const SMFPGroup& G )
    : group( G )
  { }

  void takeControl( );

private:
  const SMFPGroup& group;
};

@
\section{class HNNofFreeGroup\_IsAbelian}
<<class HNNofFreeGroup_IsAbelian>>=
class HNNofFreeGroup_IsAbelian : public FastComputation 
{
public:
  HNNofFreeGroup_IsAbelian( const SMFPGroup& G )
    : group( G )
  { }

  void takeControl( );

private:
  const SMFPGroup& group;
};

@
\section{class HNNofFreeGroup\_ConjugacyProblem}
<<class HNNofFreeGroup_ConjugacyProblem>>=
class HNNofFreeGroup_ConjugacyProblem : public FastComputation 
{
public:
  HNNofFreeGroup_ConjugacyProblem( const SMWord& x, const SMWord& y )
    : word1( x ), word2( y ) 
  { }

  void takeControl( );

private:
  const SMWord& word1;
  const SMWord& word2;
};

@
\section{class HNNofFreeGroup\_WordProblem}
<<class HNNofFreeGroup_WordProblem>>=
class HNNofFreeGroup_WordProblem : public FastComputation 
{
public:
  HNNofFreeGroup_WordProblem( const SMWord& x ) : word( x ) { }
  void takeControl( );

private:
  const SMWord& word;
};

@
\section{class HNNofFreeGroup\_ReducedForm}
<<class HNNofFreeGroup_ReducedForm>>=
class HNNofFreeGroup_ReducedForm : public FastComputation 
{
public:
  HNNofFreeGroup_ReducedForm( const SMWord& x ) : word( x ) { }
  void takeControl( );

private:
  const SMWord& word;
};

@
\section{class HNNofFreeGroup\_NormalForm}
<<class HNNofFreeGroup_NormalForm>>=
class HNNofFreeGroup_NormalForm : public FastComputation 
{
public:
  HNNofFreeGroup_NormalForm( const SMWord& x ) : word( x ) { }
  void takeControl( );

private:
  const SMWord& word;
};

@
\section{class HNNofFreeGroup\_CyclicallyReducedForm}
<<class HNNofFreeGroup_CyclicallyReducedForm>>=
class HNNofFreeGroup_CyclicallyReducedForm : public FastComputation 
{
public:
  HNNofFreeGroup_CyclicallyReducedForm( const SMWord& x ) : word( x ) { }
  void takeControl( );

private:
  const SMWord& word;
};

@
\section{class HNNofFreeGroup\_IsProperPowerOfSecond}
<<class HNNofFreeGroup_IsProperPowerOfSecond>>=
class HNNofFreeGroup_IsProperPowerOfSecond : public FastComputation 
{
public:
  HNNofFreeGroup_IsProperPowerOfSecond( const SMWord& x, const SMWord& y )
    : word1( x ), word2( y )
  { }

  void takeControl( );

private:
  const SMWord& word1;
  const SMWord& word2;
};

@
\section{class HNNofFreeGroup\_IsProperPower}
<<class HNNofFreeGroup_IsProperPower>>=
class HNNofFreeGroup_IsProperPower : public FastComputation 
{
public:
  HNNofFreeGroup_IsProperPower( const SMWord& x ) : word( x ) { }
  void takeControl( );

private:
  const SMWord& word;
};

@
\section{class HNNofFreeGroup\_MaximalRoot}
<<class HNNofFreeGroup_MaximalRoot>>=
class HNNofFreeGroup_MaximalRoot : public FastComputation 
{
public:
  HNNofFreeGroup_MaximalRoot( const SMWord& x ) : word( x ) { }
  void takeControl( );

private:
  const SMWord& word;
};

@
\section{class HNNofFreeGroup\_AreEqual}
<<class HNNofFreeGroup_AreEqual>>=
class HNNofFreeGroup_AreEqual : public FastComputation 
{
public:
  HNNofFreeGroup_AreEqual( const SMWord& x, const SMWord& y )
    : word1( x ), word2( y )
  { }

  void takeControl( );

private:
  const SMWord& word1;
  const SMWord& word2;
};

@
\section{class HNNofFreeGroup\_IsSGTrivial}
<<class HNNofFreeGroup_IsSGTrivial>>=
class HNNofFreeGroup_IsSGTrivial : public FastComputation 
{
public:
  HNNofFreeGroup_IsSGTrivial( const SMSubgroup& S )
    : subgroup( S )
  { }

  void takeControl( );

private:
  const SMSubgroup& subgroup;
};

@
\section{class HNNofFreeGroup\_IsSGAbelian}
<<class HNNofFreeGroup_IsSGAbelian>>=
class HNNofFreeGroup_IsSGAbelian : public FastComputation 
{
public:
  HNNofFreeGroup_IsSGAbelian( const SMSubgroup& S )
    : subgroup( S )
  { }

  void takeControl( );

private:
  const SMSubgroup& subgroup;
};

@
\section{class CheckinHNNofFreeGroup}
<<class CheckinHNNofFreeGroup>>=
class CheckinHNNofFreeGroup : public FastComputation
{
public:
  CheckinHNNofFreeGroup( ) { }
  void takeControl( );              // overrides ComputationManager
};

@
\section{class HNNofFreeIsFreeArcer}
This class is commented out.
<<class HNNofFreeIsFreeArcer>>=
class HNNofFreeIsFreeArcer : public ARCer
{
public:
  HNNofFreeIsFreeArcer( ComputationManager& boss ) 
    : ARCer( boss ), theAnswer( dontknow ), theGroup( 0 ) 
  { }

  ~HNNofFreeIsFreeArcer( );
  void setArguments( const HNNExtOfFreeGroup& H );
  // Inherited from ARCer:
  // bool takeControl( );
  Trichotomy answer() const { return theAnswer; }
  void runComputation( );
  void writeResults( ostream& ostr );
  void readResults( istream& istr );

private:
  HNNExtOfFreeGroup *theGroup;
  Trichotomy theAnswer;
};

@
\section{class HNNofFreeIsFree}
<<class HNNofFreeIsFree>>=
class HNNofFreeIsFree : public ComputationManager
{
public:
  HNNofFreeIsFree( class SMFPGroup& F );
  ~HNNofFreeIsFree();
  void viewStructure(ostream& ostr) const;  // overrides SMObject
  void takeControl( );         // overrides ComputationManager
  void start( ) { }              // overrides ComputationManager
  void terminate( ) { }          // overrides ComputationManager

private:
  class SMFPGroup& theGroup;
  ORProblems* theORProblems;
  ORIsFreeProblemARCer arcer;
  //HNNofFreeIsFreeArcer arcer;
};

@
\section{class APofFreeIsFreeArcer}
<<class APofFreeIsFreeArcer>>=
class APofFreeIsFreeArcer : public ARCer
{
public:
  APofFreeIsFreeArcer( ComputationManager& boss ) 
    : ARCer( boss ), theAnswer( dontknow ), theGroup( 0 ) 
  { }

  ~APofFreeIsFreeArcer( ) { delete theGroup; }
  void setArguments( const AmalgProductOfFreeGroups& G );
  // Inherited from ARCer:
  // bool takeControl( );
  Trichotomy answer() const { return theAnswer; }
  void runComputation( );
  void writeResults( ostream& ostr );
  void readResults( istream& istr );

private:
  AmalgProductOfFreeGroups *theGroup;
  Trichotomy theAnswer;
};

@
\section{class APofFreeIsFree}
<<class APofFreeIsFree>>=
class APofFreeIsFree : public ComputationManager
{
public:
  APofFreeIsFree( class SMFPGroup& F );
  void viewStructure(ostream& ostr) const;  // overrides SMObject
  void takeControl( );         // overrides ComputationManager
  void start( ) { }              // overrides ComputationManager
  void terminate( ) { }          // overrides ComputationManager

private:
  class SMFPGroup& theGroup;
  APofFreeIsFreeArcer arcer;
};

@
\section{class APofFreeIsPerfect}
<<class APofFreeIsPerfect>>=
class APofFreeIsPerfect : public Supervisor
{
public:
  APofFreeIsPerfect( class SMFPGroup& F );
  void viewStructure(ostream& ostr) const;  // overrides SMObject
  void takeControl( );         // overrides ComputationManager
  void start( ) { };              // overrides ComputationManager
  void terminate( ) { };          // overrides ComputationManager

private:
  class SMFPGroup& theGroup;
  MirrorSubordinate abelianInvariants;
};

@
\section{class APofFreeHomologyArcer}
<<class APofFreeHomologyArcer>>=
class APofFreeHomologyArcer : public ARCer
{
public:
  APofFreeHomologyArcer( ComputationManager& boss ) 
    : ARCer( boss ), theGroup( 0 ), theRankOfH2(-1)
  { }

  ~APofFreeHomologyArcer( ) { delete theGroup; }

  void setArguments( const AmalgProductOfFreeGroups& G );

  // Inherited from ARCer:
  // bool takeControl( );

  int rankOfH2() const { return theRankOfH2; }
  void runComputation( );
  void writeResults( ostream& ostr );
  void readResults( istream& istr );

private:
  AmalgProductOfFreeGroups *theGroup;
  int theRankOfH2;
};

@
\section{class APofFreeHomologyProblem}
<<class APofFreeHomologyProblem>>=
class APofFreeHomologyProblem : public Supervisor //ComputationManager
{
public:
  APofFreeHomologyProblem( class SMFPGroup& F );
  void viewStructure(ostream& ostr) const;  // overrides SMObject
  void takeControl( );         // overrides ComputationManager
  void start( ) { }              // overrides ComputationManager
  void terminate( ) { }          // overrides ComputationManager

private:
  class SMFPGroup& theGroup;
  APofFreeHomologyArcer arcer;
  MirrorSubordinate abelianInvariants;
  bool cyclicSubgroup;
  bool abDone;
  bool arcerStarted;
};

@
\section{license}
<<license>>=
// Copyright (C) 1994 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.
@
<<*>>=
// src/backend/SMApps/include/HNNProblems.h
#ifndef _HNN_PROBLEMS_H_
#define _HNN_PROBLEMS_H_

<<license>>
<<include>>
<<class MakeHNNExtOfFreeGroup>>
<<class HNNofFreeGroup_IsTrivial>>
<<class HNNofFreeGroup_IsFinite>>
<<class HNNofFreeGroup_IsAbelian>>
<<class HNNofFreeGroup_ConjugacyProblem>>
<<class HNNofFreeGroup_WordProblem>>
<<class HNNofFreeGroup_ReducedForm>>
<<class HNNofFreeGroup_NormalForm>>
<<class HNNofFreeGroup_CyclicallyReducedForm>>
<<class HNNofFreeGroup_IsProperPowerOfSecond>>
<<class HNNofFreeGroup_IsProperPower>>
<<class HNNofFreeGroup_MaximalRoot>>
<<class HNNofFreeGroup_AreEqual>>
<<class HNNofFreeGroup_IsSGTrivial>>
<<class HNNofFreeGroup_IsSGAbelian>>
<<class CheckinHNNofFreeGroup>>
<<class HNNofFreeIsFree>>
<<class APofFreeIsFreeArcer>>
<<class APofFreeIsFree>>
<<class APofFreeIsPerfect>>
<<class APofFreeHomologyArcer>>
<<class APofFreeHomologyProblem>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
