// Copyright (C) 1995 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.

// Contents: Implementation of the AbelianGroupRep class.
//
// Principal Author: Dmitry Bormotov, Alexey Myasnikov
//
// Status: in progress
//
// Revision History:
//
// 96/01/06 @db added new functions:
//   Word abelianForm( const Word& w ) const;
//   Word inverseInAbelianForm( const Word& w ) const;
//
// * 7/96 Dmitry B. made porting to gcc 2.7.2.
//
// Special Notes:
//


#include "AbelianGroupRep.h"
#include "PresentationParser.h"
#include "GaussTransformation.h"


//------------------------------------------------------------------------------//
//------------------------------ AbelianGroupRep -------------------------------//
//------------------------------------------------------------------------------//



bool AbelianGroupRep::abelianizationDone( ) const {
  return doneStatus;
}


int AbelianGroupRep::rankOfFreeAbelianFactor( ) const {

#if SAFETY > 0
  if ( !doneStatus )
    error("tried to get rank of Free Abelian Factor before abelianization");
#endif

  return rankOfFreePart;
}

VectorOf<Integer> AbelianGroupRep::getSmithForm( ) const{

#if SAFETY > 0
  if ( !doneStatus )
    error("tried to get Smith form before abelianization");
#endif

  return SmithForm;
}  

VectorOf<Integer> AbelianGroupRep::invariants( ) const {

#if SAFETY > 0

  if ( !doneStatus )
    error("tried to get invariants before abelianization");
#endif

  return Invariants;
}

void AbelianGroupRep::calculateSmithForm( ) {

  SmithForm = VectorOf<Integer>(saveWidth);
  int size =  min(saveWidth, saveHeight);
  for ( int i = 0; i < size; i++ )
    SmithForm[i] = (*saveMatrix)[i][i];
  for ( int i = size; i < saveWidth; i++ )
    SmithForm[i] = 0;
}

void AbelianGroupRep::calculateInvariants( ) {

  int count = 0;
  for ( int i = 0; i < saveWidth; i++ )
    if ( SmithForm[i] > 1) count++;
  
  Invariants = VectorOf<Integer>(count);
  int num = 0;
  for( int i = 0; i < saveWidth; i++ )
    if ( SmithForm[i] > 1)
      Invariants[num++] = SmithForm[i];
}


int  AbelianGroupRep::isAllZero(int from, int to, MatrixRow<Integer>& vc) {
#if SAFETY > 0
  if (from<0 || to >= vc.length() )
    error("wrong parameters in AbelianGroupRep::isAllZero(....)");
#endif  
   for (int i=from;i<=to;i++)
        if (vc[i]!=0) return i;
   return -1;
}

void AbelianGroupRep::startComputation( ) {
#if SAFETY > 0
  if ( startStat )
    error("the abelianization has been already started");
#endif
  int height = relators.cardinality();
  int width = theNumberOfGenerators;
  saveHeight = height;
  saveWidth  = width;

  newToOldGens = new Matrix<Integer>(width,width);
  oldToNewGens = new Matrix<Integer>(width,width);

  for ( int i = 0; i < width; i++ ) {
    for ( int j = 0; j < width; j++ ) {
      (*newToOldGens)[i][j] = 0;
      (*oldToNewGens)[i][j] = 0;
    }
    (*newToOldGens)[i][i] = 1;
    (*oldToNewGens)[i][i] = 1;
  }
  if ( relators.cardinality == 0 ) {
    rankOfFreePart = theNumberOfGenerators;
    doneStatus = true;
    return;
  }

  SetIterator<Word> I( relators );
  int i = 0, j;
  Matrix<Integer>* matrix = new Matrix<Integer>(saveHeight,saveWidth);
  
  // matrix[i][j] = exponent of j^{th} generator in i^{th} relation.
  while ( !I.done() ) {
    Word w = I.value();
    for ( j = 0; j < saveWidth; j++ ) {
      Generator g(j+1);
      (*matrix)[i][j] = w.exponentSum( g );
    }
    i++;
    I.next();
  }

  saveMatrix = matrix;
  saveRow = saveCol = 0;
  startStat = true;
  doneStatus = false;
}  


bool AbelianGroupRep::continueComputation( )
{
  
#if SAFETY > 0
  if ( !startStat )
    error("tried to continue computation before it's started");
#endif

  if( doneStatus )
    return doneStatus;
  Matrix<Integer>* matrix = saveMatrix;
  int height = saveHeight;
  int width = saveWidth;
  int i = saveRow;
  int j = saveCol;

  int k, l, done;
  Integer quotient;
  
  if ( i < height && j < width ) {
    
    // Check if j^{th} generator is free of relations in abelianization.
    k = 0;
    if ( sign((*matrix)[i][j]) == 0 )
      for ( k = i + 1; k < height; k++ )
	if ( sign((*matrix)[k][j]) != 0 ) {
	  VectorOf<Integer> temp = (*matrix)[i];
	  (*matrix)[i] = (*matrix)[k];
	  (*matrix)[k] = temp;
	  break;
	}
    
    if ( k == height ) {
      for ( k = j + 1; k < width; k++ )
	if ( sign((*matrix)[i][k]) != 0 ) {
	  swapColumns(j,k);
	  break;
	}
      if ( k == width ) {
	saveCol++;
	saveRow++;
	return doneStatus;
      }
    }
    done = 0;
    while ( !done ) {
      for ( k = i + 1; k < height; k++ )
	while ( sign((*matrix)[k][j]) != 0 )
	  if ( abs( (*matrix)[k][j] ) < abs( (*matrix)[i][j] ) ) {
	    VectorOf<Integer> temp = (*matrix)[i];
	    (*matrix)[i] = (*matrix)[k];
	    (*matrix)[k] = temp;
	  }
	  else {
	    quotient = (*matrix)[k][j] / (*matrix)[i][j];
	    for ( l = j; l < width; l++ ) 
	      (*matrix)[k][l] = (*matrix)[k][l] - quotient*(*matrix)[i][l];
	  }

      done = 1;
      for ( k = j + 1; k < width; k++ )
	while ( sign((*matrix)[i][k]) != 0 )
	  if ( abs( (*matrix)[i][k] ) < abs( (*matrix)[i][j] ) ) {
	    done = 0;  // Possibly we spoiled j^{th} column.
	    quotient = ( (*matrix)[i][j] - sign((*matrix)[i][j]) ) / (*matrix)[i][k];
	    addColumn(j, k, -quotient);
	  }
	  else {
	    quotient = (*matrix)[i][k] / (*matrix)[i][j];
	    addColumn(k, j, -quotient);
	  }
    }
    saveRow++;
    saveCol++;
    return doneStatus;
  }
  else {
    int size = min ( width, height);
    rankOfFreePart = width - j;
    
    for (i = 0; i < size; i++)
      (*matrix)[i][i] = abs((*matrix)[i][i]);
    
    int pos = 0;
    for ( i = pos; i < size; i++ )
      if ( sign((*matrix)[i][i]) == 0) {
	swapInvariants(pos, i);
	pos++;
      }
    
    rankOfFreePart += pos;
    for ( i = pos; i < size; i++ )
      if ( (*matrix)[i][i] == 1) {
	swapInvariants(pos, i);
	pos++;
      }
    
    // m_i | m_{i+1}
    for ( i = pos; i < size - 1; i++ )
      for ( j = i + 1; j < size; j++ )
	canoniseInvariants(i, j);

    calculateSmithForm();
    calculateInvariants();
    delete  saveMatrix;
     
    doneStatus = true;
    return doneStatus;
  }
}


Matrix<Integer> AbelianGroupRep::newToOldGenerators( ) const {
  return *newToOldGens;
}


Matrix<Integer> AbelianGroupRep::oldToNewGenerators( ) const {
  return *oldToNewGens;
}


VectorOf<Integer> AbelianGroupRep::rewriteInNewGens( const Word& w ) const {

#if SAFETY > 0
  if ( !doneStatus )
    error("tried to call rewriteInNewGens before abelianization");
#endif

  VectorOf<Integer> v(saveWidth);

  for ( int i = 0; i < saveWidth; i++) v[i] = 0;
  for ( int i = 0; i < saveWidth; i++ ) {
    int power = w.exponentSum(i+1);
    for ( int j = 0; j < saveWidth; j++)
      v[j] = v[j] + Integer(power) * (*oldToNewGens)[i][j];
  }

  for ( int i = 0; i < saveWidth; i++ ) {
    Integer order = SmithForm[i];
    if ( order != 0) {
      v[i] = v[i] % order;
      if ( v[i] < 0 ) v[i] = order + v[i];
     }
  }
  
  return v;
}


VectorOf<Integer> AbelianGroupRep::evaluate( const Word& w ) const
{
  VectorOf<Integer> form = getSmithForm();
  VectorOf<Integer> v = rewriteInNewGens(w);
  int len = v.length();
  int count = 0;
  for( int i = 0; i < len; ++i )
    if( form[i] != 1 )
      ++count;

  VectorOf<Integer> result(count);
//  for (i = 0; i < rankOfFreePart; ++i)
//    result[i] = 0;
  
  int FCount = 0;
  int TCount = rankOfFreePart;
  for( int i = 0; i < len; ++i )
    if( sign(form[i]) == 0 )
      result[FCount++] = v[i];
    else
      if( form[i] != 1 )
	result[TCount++] = v[i];
  
  return result;
}

  
void AbelianGroupRep::addColumn(int i, int j, Integer k) {

  for ( int l = 0; l < saveHeight; l++ )
    (*saveMatrix)[l][i] += k * (*saveMatrix)[l][j];
  
  for ( int l = 0; l < saveWidth; l++ ) {
    (*newToOldGens)[j][l] -= k * (*newToOldGens)[i][l];
    (*oldToNewGens)[l][i] += k * (*oldToNewGens)[l][j];
  }
}


void AbelianGroupRep::swapGenColumns( int i, int j ) {

  for ( int l = 0; l < saveWidth; l++ ) {
    Integer temp = (*oldToNewGens)[l][i];
    (*oldToNewGens)[l][i] = (*oldToNewGens)[l][j];
    (*oldToNewGens)[l][j] = temp;
  }

  VectorOf<Integer> tmp = (*newToOldGens)[i];
  (*newToOldGens)[i] = (*newToOldGens)[j];
  (*newToOldGens)[j] = tmp;
}


void AbelianGroupRep::swapColumns( int i, int j ) {

  for ( int l = 0; l < saveHeight; l++ ) {
    Integer temp = (*saveMatrix)[l][i];
    (*saveMatrix)[l][i] = (*saveMatrix)[l][j];
    (*saveMatrix)[l][j] = temp;
  }
  swapGenColumns(i, j);
}


void AbelianGroupRep::swapInvariants( int i, int j ) {

  Integer temp = (*saveMatrix)[i][i];
  (*saveMatrix)[i][i] = (*saveMatrix)[j][j];
  (*saveMatrix)[j][j] = temp;
  swapGenColumns(i, j);
}


void AbelianGroupRep::canoniseInvariants(int i, int j) {

  Integer quotient;
  addColumn(i, j, 1);
  while ( (*saveMatrix)[i][i] != (*saveMatrix)[j][i]) {
    if ( (*saveMatrix)[i][i] > (*saveMatrix)[j][i]) {
      quotient = ((*saveMatrix)[i][i] - 1) / (*saveMatrix)[j][i];
      (*saveMatrix)[i][i] -= quotient * (*saveMatrix)[j][i];
      (*saveMatrix)[i][j] -= quotient * (*saveMatrix)[j][j];
    }
    else {
      quotient = ((*saveMatrix)[j][i] - 1) / (*saveMatrix)[i][i];
      (*saveMatrix)[j][i] -= quotient * (*saveMatrix)[i][i];
      (*saveMatrix)[j][j] -= quotient * (*saveMatrix)[i][j];
    }
  }
  (*saveMatrix)[j][i] -= (*saveMatrix)[i][i];
  (*saveMatrix)[j][j] -= (*saveMatrix)[i][j];

  quotient = (*saveMatrix)[i][j] / (*saveMatrix)[i][i];
  addColumn(j, i, -quotient);
  (*saveMatrix)[j][j] = abs((*saveMatrix)[j][j]);
}


// ------------------------------------------------------------------//
Trichotomy AbelianGroupRep::wordProblem( const Word& w ) const
{
  VectorOf<Integer> v = rewriteInNewGens(w);
  int vLen = v.length();
  for ( int i = 0; i < vLen; i++ )
    if ( sign(v[i]) != 0 ) return no;
  return yes;
}


Integer AbelianGroupRep::orderOfElt(const Word& w) const
{
  VectorOf<Integer> v = rewriteInNewGens(w);
  VectorOf<Integer> form = getSmithForm();

  for ( int i = 0; i < theNumberOfGenerators; i++)
    if ( sign(form[i]) == 0 && sign(v[i]) != 0 ) return 0; // Infinity
  
  for ( int i = 0; i < theNumberOfGenerators; i++) {
    if ( sign(form[i]) == 0 || form[i] == Integer(1) || sign(v[i]) == 0 )
      v[i] = 0;
    else
      v[i] = form[i] / gcd(form[i], v[i]);
  }
  
  Integer LCM = 1;
  int vLen = v.length();
  for (int i = 0; i < vLen; i++)
    if ( sign(v[i]) != 0 ) LCM = lcm(LCM,v[i]);
  return LCM;
}


Integer AbelianGroupRep::orderOfTheTorsionSubgroup() const
{
  VectorOf<Integer> form = getSmithForm();
  Integer order = 1;
  int formLen = form.length();
  for ( int i = 0; i < formLen; i++ )
    if ( sign(form[i]) != 0 && form[i] != 1 ) order *= form[i];
  return order;
}


Integer AbelianGroupRep::order()
{
  if( theOrder < 0 )
    if ( rankOfFreeAbelianFactor() != 0)
      return (theOrder = 0);
    else
      return ( theOrder = orderOfTheTorsionSubgroup() );
  else
    return theOrder;
}

   
Trichotomy AbelianGroupRep::isTrivial() const
{
  VectorOf<Integer> v = getSmithForm();
  int vLen = v.length(); 
  for (int i = 0; i < vLen; i++)
    if ( v[i] != 1) return no;
  return yes;
}


Trichotomy AbelianGroupRep::isFree() const
{
  VectorOf<Integer> v = getSmithForm();
  int vLen = v.length();
  for (int i = 0; i < vLen; i++)
    if ( v[i] > 1) return no;
  return yes;
}



bool AbelianGroupRep::isomorphicProblem( const AbelianGroupRep& A ) const
{
  return ( rankOfFreeAbelianFactor() ==
	   A.rankOfFreeAbelianFactor() &&
	   Invariants == A.Invariants );
}

GroupRep* AbelianGroupRep::readFrom(istream& istr, Chars& errMesg) const
{
  PresentationParser P(istr);
  FPGroupRep* fpg = P.parseFPGroup( errMesg );
  return new AbelianGroupRep(fpg->theNamesOfGenerators,fpg->relators);
}

void AbelianGroupRep::printOn(ostream& ostr) const
{
  int rank = rankOfFreeAbelianFactor();
  VectorOf<Integer> invariants = Invariants;
  int len = invariants.length();
  bool bFirst = true;

  if( rank > 0 ) {
    bFirst = false;
    ostr << " Z";
    if( rank > 1 )
      ostr << "^" << rank;
  }

  for( int i = 0; i < len; ++i ) {
    if( !bFirst )
      ostr << " x";
    ostr << " Z_" << invariants[i];
    bFirst = false;
  }

  if( bFirst )
    ostr << " 1";
}


void AbelianGroupRep::printWord( ostream& ostr, const Word& w ) const
{
  int rank = rankOfFreeAbelianFactor();
  VectorOf<Integer> form = evaluate(w);
  int len = form.length();
  bool bFirst = true;
  
  for( int i = 0; i < rank; ++i ) {

    Integer coef = form[i];

    if ( coef > 0 ) {
      if ( ! bFirst )
	ostr << " +";
      bFirst = false;
      if( coef > 1 )
	ostr << " " << coef;
      ostr << " f_" << i + 1;
    }
    else
      if ( coef < 0 ) {
	ostr << " -";
	bFirst = false;
	if( coef < -1 )
	  ostr << " " << - coef;
	ostr << " f_" << i + 1;
      }
    
  }

  for( int i = rank; i < len; ++i ) {

    Integer coef = form[i];

    if ( coef > 0 ) {
      if ( ! bFirst )
	ostr << " +";
      bFirst = false;
      if( coef > 1 )
	ostr << " " << coef;
      ostr << " t_" << i + 1 - rank;
    }
    else
      if ( coef < 0 ) {
	ostr << " -";
	bFirst = false;
	if( coef < -1 )
	  ostr << " " << - coef;
	ostr << " t_" << i + 1 - rank;
      }
    
  }
  
  if ( bFirst )
    ostr << " 0";
}
//----------------------------------------------------------------//
Word AbelianGroupRep::abelianForm( const Word& w ) const
{
  int wLen = w.length();
  VectorOf<Generator> v(wLen);
  int numOfGens = theNumberOfGenerators;
  int vCurrent = 0;

  for ( int i = 0; i < numOfGens; i++ ) {

    int sum = w.exponentSum(i+1);
    int aSum = abs(sum);
    Generator filler;
    if( sum > 0 )
      filler = i+1;
    else
      filler = -i-1;

    for( int j = 0; j < aSum; ++j )
      v[vCurrent++] = filler;
  }

  v.shrink(vCurrent);
  return Word(v);
}


Word AbelianGroupRep::inverseInAbelianForm( const Word& w ) const
{
  Word W( abelianForm(w) );
  int WLen = W.length();
  for( int i = 0; i < WLen; ++i )
    W[i] = inv(W[i]);
  return W;
}


SetOf<Word> AbelianGroupRep::getAbelianFormRelators( ) const
{
  SetOf<Word> S(relators);
  int numOfGens = theNumberOfGenerators;
  VectorOf<Generator> v(4);
  for ( int i = 1; i < numOfGens; i++ )
    for ( int j = i+1; j <= numOfGens; j++ ) {
      v[0] = i;  v[1] = j; v[2] = -i; v[3] = -j;
      S |= Word(v);
    }
  return S;
}
