\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/Group/include/AbelianSGPresentation.h}
\author{Alexey Myasnikov}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "AbelianGroup.h"
#include "AbelianGroupRep.h"
#include "Map.h"

@
\section{struct AbelianSGPresentationRep}
<<struct AbelianSGPresentationRep>>=
struct AbelianSGPresentationRep : AbelianGroupRep {

// Constructors:

  // Copy constructor and operator = provided by compiler.
  
  AbelianSGPresentationRep(const AbelianGroup& parent,
                           const VectorOf<Word>& sgGens, 
                           const FPGroup& thePresentation, 
                           const DArray<Integer>& sgPGens,
                           bool makeF )
  : AbelianGroupRep(thePresentation,makeF),
    theParent( parent ),
    theSGGens( sgGens ),
    theSGPGens( sgPGens )
  { }
  // Make a rep. It accepts the following parameters:
  // parent - parent group of a subgroup, 
  // sgGens - generators od SG in terms of parent
  // thePresentation - the presentation for a subgroup as a group
  // sgPGens - generators of presentation epressed in generators of canonical 
  // decomposition of a parent group , 
  // makeF - true if you whant to make a files with 
  // generators, the same as for AbelianGroup 

  // Destructor provided by compiler.

//
// Representation methods:
//
  
  AbelianSGPresentationRep* clone( ) const 
  { return new AbelianSGPresentationRep(*this); }

    Word fromSGPGensToSGGens(const Word& w)const;
    // Makes the map from presentation generators to
    // generators of parent group

    bool fromSGGensToSGPGens(const Word& w,Word& wInNew)const;
   // Makes the map from  generators of parent group to
   // presentation generators, if word w is in the subgroup it
   // returns true, and put the reflection in wInNew.
   // If word w does not belong to the subgroup, it returns false.

  inline void write( ostream& ostr ) const
  {
    AbelianGroupRep::write(ostr);
    ostr < theParent;
    ostr < theSGGens;
    ostr < theSGPGens;
  }

  inline void read( istream& istr )
  {
    AbelianGroupRep::read(istr);
    istr > theParent;
    istr > theSGGens;
    istr > theSGPGens;
 }

// Data members:
private:
  VectorOf<Word>  theSGGens;
  // The generators of subgroup i terms of parent group
  DArray<Integer> theSGPGens;
  // Generators of presentation, given in generators of
  // canonical decomposition of parent group
  AbelianGroup    theParent;
  // Parent group

// Private methods

  void makeFile( );
  // Creates the file containing the expression of the  generators
  // of canonical decomposition in terms of the old ones.

  void makeFileOfPDGens( );
  // Creates the file containing the expression of the  generators
  // of primary decomposition in terms of the old ones.

  bool powerOfNewGenInTorsionPart (const Integer& inv,const Integer& b,
                                   const Integer& a,Integer& x)const;
  //gives the power of new generator when expressing old generators
  //in generators of presentation, when solve this problem in torsion
  //part of new generators presentation. It return true if there is
  //exist this power, and put it in x.
  bool powerOfNewGenInFreePart (const Integer& b,const Integer& a,Integer& x)const;
  //gives the power of new generator when expressing old generators
  //in generators of presentation, when solve this problem in torsion
  //free part of new generators presentation. It return true if there is
  //exist this power, and put it in x.
};

@
\section{class AbelianSGPresentation}
<<class AbelianSGPresentation>>=
class AbelianSGPresentation : 
  public DerivedObjectOf<AbelianGroup,AbelianSGPresentationRep> {

public:
  // Copy constructor provided by compiler

  AbelianSGPresentation( ):
    DerivedObjectOf<AbelianGroup,AbelianSGPresentationRep>( new AbelianSGPresentationRep
                                  (AbelianGroup(FPGroup()),VectorOf<Word>(), FPGroup(),
                                   DArray<Integer>(),false) ) { }

  // Inherited from AbelianGroup:

  Word fromSGPGensToSGGens(const Word& w)const{
      return look()->fromSGPGensToSGGens(w);
  }
   // Makes the map from presentation generators to
   // generators of parent group

  bool fromSGGensToSGPGens(const Word& w,Word& wInNew)const{
      return look()->fromSGGensToSGPGens(w,wInNew);
  }
   // Makes the map from  generators of parent group to
   // presentation generators, if word w is in the subgroup it
   // returns true, and put the reflection in wInNew.
   // If word w does not belong to the subgroup, it returns false.

  // Operators inhereted from AbelianGroup

private:
  friend  AbelianSGPresentation AbelianGroup::makeSubgroupPresentation
                                          (const VectorOf<Word>& vG) const;

  //Constructor is private because it have sence only for AbelianGroup
  // It accepts the following parameters:
  // parent - parent group of a subgroup, 
  // sgGens - generators od SG in terms of parent
  // thePresentation - the presentation for a subgroup as a group
  // sgPGens - generators of presentation epressed in generators of canonical 
  // decomposition of a parent group , 
  // makeF - true if you whant to make a files with 
  // generators, the same as for AbelianGroup
  AbelianSGPresentation(const AbelianGroup& parent,
                        const VectorOf<Word>& sgGens,
                        const FPGroup& thePresentation,
                        const DArray<Integer>& sgPGens,
                        bool makeF = false):
  DerivedObjectOf<AbelianGroup,AbelianSGPresentationRep>
   ( new AbelianSGPresentationRep(parent,sgGens,thePresentation,sgPGens, 
                                                   makeF) ) { }
  // Special wrapping constructor to wrap new representations (returned
  // by eg. delegated methods) and for base initialisation by derived
  // classes:
 
  AbelianSGPresentation( AbelianSGPresentationRep* newrep ) : 
    DerivedObjectOf<AbelianGroup,AbelianSGPresentationRep>(newrep) { } 

 
#ifdef DEBUG
// friend int main(... );
#endif

};

@
\section{license}
<<license>>=
// Copyright (C) 1994 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.
@
<<*>>=
// src/backend/Group/include/AbelianSGPresentation.h
#ifndef _ABELIAN_SG_PRESENTATION_H_
#define _ABELIAN_SG_PRESENTATION_H_

<<license>>
<<include>>
<<struct AbelianSGPresentationRep>>
<<class AbelianSGPresentation>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}

