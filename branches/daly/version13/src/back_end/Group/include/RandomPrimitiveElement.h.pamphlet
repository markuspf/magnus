\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/Group/include/RandomPrimitiveElement.h}
\author{Sergei Lioutikov}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "RandomNumbers.h"
#include "FreeGroup.h"

@
\section{class RandomPrimitiveElement}
generates random primitive elements for a free group ( those which can be 
extended to a basis. )

copy constructor does logical copy.
<<class RandomPrimitiveElement>>=
class RandomPrimitiveElement
{
public:
  RandomPrimitiveElement( const FreeGroup& F, int seed );
  // Giving the same `seed' you obtain the same sequence of automorphisms.

  ~RandomPrimitiveElement( );

  Word getElement( int avgNumGens );
  // `avgNumGens' gives the average number of Whitehead automorphisms to apply.

private:
  FreeGroup theGroup;
  int numberOfGroupGens;
  NormalRandom numGensPicker;
  UniformRandom typeGenPicker;

};

@
\section{license}
<<license>>=
// Copyright (C) 1994 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.
@
<<*>>=
// src/backend/Group/include/RandomPrimitiveElement.h
#ifndef _RANDOMPRIMITIVEELEMENT_H_
#define _RANDOMPRIMITIVEELEMENT_H_

<<license>>
<<include>>
<<class RandomPrimitiveElement>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}

