\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/global/GenericObject.h}
\author{Stephane Collart}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "PureRep.h"
#include "BaseObjectOf.h"
#include "Type.h"

@
\section{struct GenericRep}
a common root class for all object-level (see PureObject.h) classes
with a coherent type scheme.

See PureObject

In addition, this class provides explicit type query handles; classes
derived from this class will normally derive *publicly*, to permit
assignment by non-friend
<<struct GenericRep>>=
struct GenericRep : public PureRep
{
	// default constructor provided by compiler
	// copy constructor provided by compiler
	// assignment operator disabled

	static const Type theGenericObjectType;
	// every representation class derived from this 
        // should carry a similarly defined type field

	static Type type() { return theGenericObjectType; }
	// every representation class derived from this 
        // should carry a similarly defined type member

	virtual Type actualType() const { return type(); }
	// this member serves as the root of all type querying members in this
	// type scheme
	// every representation class derived from this should override this
	// member similarly to return the actual type of the class

	PureRep* clone( ) const { return new GenericRep(*this); }

};

@
\section{class GenericObject}
<<class GenericObject>>=
class GenericObject : protected BaseObjectOf<GenericRep>
{
public:
	GenericObject( ) : BaseObjectOf<GenericRep>( new GenericRep ) { }

	// copy constructor provided by compiler
	// destructor provided by compiler
	// both of the preceding ref-counting compatible
	// assignment operator provided by compiler
	// ref-counting compatible

	static Type type() { return GenericRep::type(); }
	// this `type querying' member is provided solely as an example, 
        // since this class is pseudo-abstract (ie. its representation 
        // class is abstract) and no actual objects of this type will 
        // ever be created

	Type actualType() const { return look()->actualType(); }

protected:
	// look(), change() and enhance() inherited

	// Special wrapping constructor to wrap new representations (returned
	// by eg. delegated methods) and for base initialisation by derived
	// classes:

	GenericObject( GenericRep* newrep ) : BaseObjectOf<GenericRep>(newrep) { }

};

@
\section{license}
<<license>>=
// Copyright (C) 1994-2004 The New York Group Theory Cooperative
// See license/NYGTC for the full notice
@
<<*>>=
// src/backend/global/GenericObject.h
#ifndef _GENERIC_OBJECT_H_
#define _GENERIC_OBJECT_H_


<<include>>
<<license>>
<<struct GenericRep>>
<<class GenericObject>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
