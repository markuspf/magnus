\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/Subgroup/include/GraphConjugacyProblem.h}
\author{Dmitry Bormotov}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "DoubleCosetGraph.h"
#include "FPGroup.h"
#include "Timer.h"

@
\section{struct DoubleWayElt}
<<struct DoubleWayElt>>=
struct DoubleWayElt {
  void assign( const DCGState& state1, const DCGState& state2,
	       DCGLabelType label ) 
  {
    leftState = state1;
    rightState = state2;
    currentLabel = label;
  }

  void take( DCGState& state1, DCGState& state2, DCGLabelType& label) 
  {
    state1 = leftState;
    state2 = rightState;
    label = currentLabel;
  }

  DCGState leftState, rightState;
  DCGLabelType currentLabel;
};

@
\section{class GraphConjugacyProblem}
<<class GraphConjugacyProblem>>=
class GraphConjugacyProblem 
{
public:
  GraphConjugacyProblem( const FPGroup&, const Word& u, const Word& v );

  ~GraphConjugacyProblem( ) 
  {
    if( !done() )
      finishComputation();
  }

  void startComputation( )
  {
  #if SAFETY > 0   
    if ( bStart )
      error("void GraphConjugacyProblem::startComputation( ) : "
	    "the computation has been already started.");
  #endif

    Word t = U.cyclicallyReduce();
    UConjugator = U.terminalSegment( (U.length() - t.length()) / 2 );
    U = t;

    t = V.cyclicallyReduce();
    VConjugator = V.terminalSegment( (V.length() - t.length()) / 2 );
    V = t;

    bStart = true;
    bDone = false;
    isInterrupted = false;
  }  
  // Start the problem: are u and v conjugate ?      
  // You shouldn't call this more than one time.
         
  void continueComputation( const SubgroupGraph& theGraph );
  // Advance the computation of conjugacy problem.

  void continueComputation( );
  // Advance the computation of conjugacy problem.

  bool done( ) const { return bDone; }
  // Is the conjugacy problem done ?
  // If it is done then u and v are conjugate.

  bool theNewGraphIsNeeded( ) const { return I == NULL; }

  // You can call all these functions iff the computation is finished
  // ( when the done() functions returns true ).

  Word getConjugator( ) 
  {
  #if SAFETY > 0
    if ( !bDone )
      error("Word GraphConjugacyProblem::getConjugator( ) : "
	    "tried to get result before the computation is finished.");
  #endif

    return theConjugator;
  }

private:
  int numberOfGenerators;
  int maxGeneratorLength;
  Word theConjugator;
  const FPGroup theGroup;
  Word UConjugator;
  Word VConjugator;
  Word U;                  // fisrt argument for conjugacy problem
  Word V;                  // second argument for conjugacy problem
  bool bStart;             // TRUE if the computation is started
  bool bDone;              // TRUE if the computation is finished
  DoubleCosetGraph *DCG;
  DCGVertexIterator *I;
  Timer *timer;
  static const int timerValue = 1000;
  bool isInterrupted; 
  DoubleWayElt *way;
  int saveWayIndex;
  int saveLabel;
  DCGState saveLeftState;
  DCGState saveRightState;
  int *leftMarks;
  int *rightMarks;

  GraphConjugacyProblem( const GraphConjugacyProblem& );
  // It is hidden, not implemented.

  GraphConjugacyProblem& operator = ( const GraphConjugacyProblem& );
  // It is hidden, not implemented.

  void finishComputation( )
  {
    bDone = true;
    // bStart = false;
    theConjugator = theGroup.shortenByRelators(theConjugator);
    theConjugator = VConjugator.inverse() * theConjugator * UConjugator;
    theConjugator = theConjugator.inverse();
    if( isInterrupted )
      finishInterruption();
  }

  bool findConjugator( const DCGState& state1, DCGLabelType label1,
		       const DCGState& state2, DCGLabelType label2, 
		       int length, Word& conjugator);

  bool theConjugatorIsFound( const DCGState& state1, 
                             const DCGState& state2 ) const;

  void mark( int *, const DCGState&, int *, const DCGState&, int );

  void clear( int *, const DCGState&, int *, const DCGState& );

  void getMarks( const int *, const DCGState&, const int *, const DCGState&,
		int&, int& ) const;

  bool weHaveTheSameCycles( int *, const DCGState&, 
			    int *, const DCGState& ) const;

  void finishInterruption( );

#ifdef DEBUG
  friend int main(...);
#endif

};

@
\section{license}
<<license>>=
// Copyright (C) 1998 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.

@
<<*>>=
// src/backend/Subgroup/include/GraphConjugacyProblem.h
#ifndef _GRAPH_CONJUGACY_PROBLEM_H_
#define _GRAPH_CONJUGACY_PROBLEM_H_

<<license>>
<<include>>
<<struct DoubleWayElt>>
<<class GraphConjugacyProblem>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
