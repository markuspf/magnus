\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/AProducts/include/SubgroupOfOneRelatorGroup.h}
\author{Dmitry Pechkin}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "OneRelatorGroup.h"
#include "OneRelatorGroupWithTorsion.h"

@
\section{class ORGSubgroup}
<<class ORGSubgroup>>=
class ORGSubgroup {
public:
  ORGSubgroup( const VectorOf<Word>& gens );

  virtual ~ORGSubgroup( ) { }

  virtual ORGSubgroup *copy( ) const = 0;

  virtual const OneRelatorGroup& parentGroup( ) const = 0;

  const VectorOf<Word>& generators() const { return theGenerators; }

  bool isMagnusSubgroup( ) const;

  virtual bool contains( const Word& w ) const = 0;

  virtual Word rewriteFromGroupToSubgroupGenerators( const Word& w ) const = 0 ;

  Word rewriteFromSubgroupToGroupGenerators( const Word& w ) const;

  bool lexicallyContains( const Word& w ) const;
  bool lexicallyContains( const Word& w, Word& wInBasis ) const;

  virtual bool operator == ( const ORGSubgroup& S ) const {
    return ( theGenerators == S.theGenerators ? true : false );
  }

  friend ostream& operator << ( ostream& ostr, const ORGSubgroup& S ) {
    S.printOn( ostr );
    return ostr;
  }

  friend ostream& operator < ( ostream& ostr, const ORGSubgroup& S ) {
    S.write( ostr );
    return ostr;
  }

  friend istream& operator > ( istream& istr, ORGSubgroup& S ) {
    S.read( istr );
    return istr;
  }

protected:
  virtual void write( ostream& ostr ) const;
  virtual void read( istream& istr );

private:
  virtual void printOn( ostream& ostr ) const;

  VectorOf<Word> theGenerators;
};

@
\section{class SubgroupOfOneRelatorGroup}
<<class SubgroupOfOneRelatorGroup>>=
class SubgroupOfOneRelatorGroup : public ORGSubgroup
{
public:
  SubgroupOfOneRelatorGroup( const OneRelatorGroup& G,
			     const VectorOf<Word>& gens );

  ORGSubgroup *copy( ) const { return new SubgroupOfOneRelatorGroup( *this ); }

  const OneRelatorGroup& parentGroup() const { return theParentGroup; }

  bool contains( const Word& w ) const;
  // Overrides pure-virtual ORGSubgroup::contains().

  bool contains( const Word& w, bool keepDetails ) const;

  Word rewriteFromGroupToSubgroupGenerators( const Word& w ) const;
  // Overrides pure-virtual ORGSubgroup::rewriteFromGroupToSubgroupGenerators()

  ProductOfRelatorConjugates 
    getIdentityProductDecomposition( const Word& w ) const;

  SubgroupOfOneRelatorGroup join( const SubgroupOfOneRelatorGroup& sg ) const;
  
  // Inherited from ORGSubgroup: 
  //   bool lexicallyContains( const Word& w ) const;
  //   bool lexicallyContains( const Word& w, Word& wInBasis ) const;

  
  bool operator == ( const SubgroupOfOneRelatorGroup& S ) const {
    if( theParentGroup == S.theParentGroup )
      return true;
    return ORGSubgroup::operator==(S);
  }
  // Overrides virtual ORGSubgroup::operator==().

private:
  void write( ostream& ostr ) const;
  // Overrides virtual ORGSubgroup::write().
  void read( istream& istr ); 
  // Overrides virtual ORGSubgroup::read().
 
  OneRelatorGroup theParentGroup;
  
<<struct ContainmentProblemData>>

  ContainmentProblemData containsResult;

  void setContainmentProblemData( const Word& w, bool in_subgroup, 
			  const Word& wInBasis, bool keepDetails, 
			  const ProductOfRelatorConjugates& product ) const;

  bool subgroupsDecomposition(const Word& w, 
			      const SubgroupOfOneRelatorGroup& T,
			      const SubgroupOfOneRelatorGroup& A,
			      Word& t_part, Word& a_part,
			      const bool keepDetails, 
			      ProductOfRelatorConjugates& prodDeco ) const;
  
  // define theParentGroup as HNN-extension of G_0 group.
  // define subgroup T (theGenerators) in G as HNN-extension of T_0 in G_0 

  bool pureContainmentProblem( const Word& u, bool keepDetails = false ) const;

  class MagnusBreakdown buildMagnusBreakdown( const Word& w, 
    SetOf<Generator>& subGens ) const;
};

@
\subsection{struct ContainmentProblemData}
<<struct ContainmentProblemData>>=
  struct ContainmentProblemData 
  {
    Word wordInParentGroupGenerators;
    bool inSubgroup;
    Word wordInSubgroupGenerators;
    ProductOfRelatorConjugates idProductDeco;
    bool keepDetails;
    
    ContainmentProblemData() 
      : wordInParentGroupGenerators( ), inSubgroup( true ),
	wordInSubgroupGenerators( ), idProductDeco( ),
	keepDetails( false ) { }
    
    ContainmentProblemData( const Word& w, bool f, 
                            const Word& u, bool keep_details,
			    const ProductOfRelatorConjugates& prodDeco ) 
      : wordInParentGroupGenerators(w),	inSubgroup(f),
	wordInSubgroupGenerators(u), idProductDeco( prodDeco ),
	keepDetails( keep_details ) { }
  };
  
@
\section{class SubgroupOfORGroupWithTorsion}
<<class SubgroupOfORGroupWithTorsion>>=
class SubgroupOfORGroupWithTorsion : public ORGSubgroup
{
public:
  SubgroupOfORGroupWithTorsion( const OneRelatorGroupWithTorsion& G,
				const VectorOf<Word>& gens );

  ORGSubgroup *copy( ) const { return new SubgroupOfORGroupWithTorsion( *this ); }

  const OneRelatorGroup& parentGroup() const { return theParentGroup; }
  // Overrides pure-virtual ORGSUbgroup::parentGroup().

  bool contains( const Word& w ) const;
  // Overrides virtual ORGSubgroup::contains().

  Word rewriteFromGroupToSubgroupGenerators( const Word& w ) const;
  // Overrides pure-virtual ORGSubgroup::rewriteFromGroupToSubgroupGenerators()

  bool operator == ( const SubgroupOfORGroupWithTorsion& S ) const {
    if( theParentGroup == S.theParentGroup )
      return true;
    return ORGSubgroup::operator==(S);
  }
  // Overrides virtual ORGSubgroup::operator==().

private:
  void write( ostream& ostr ) const;
  void read( istream& istr );
  bool contains( const Word& w, Word& wInBasis ) const;
  OneRelatorGroupWithTorsion theParentGroup;
};

@
\section{license}
<<license>>=
// Copyright (C) 1994 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.
@
<<*>>=
// src/backend/AProducts/include/SubgroupOfOneRelatorGroup.h
#ifndef __SUBGROUP_ONE_RELATOR_GROUP_H__
#define __SUBGROUP_ONE_RELATOR_GROUP_H__

<<license>>
<<include>>
<<class ORGSubgroup>>
<<class SubgroupOfOneRelatorGroup>>
<<class SubgroupOfORGroupWithTorsion>>
#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
