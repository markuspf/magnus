\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{src/backend/NilpotentGroup/include/Presentation.h}
\author{Eugene Paderin}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{include}
<<include>>=
#include "MalcevSet.h"
#include <iostream.h>

@
\section{struct NilpotentRelator}
This is a structure to store relators.

The relator looks like $[left1, left2] = right$.

If $left1 == left2 == 0$ then the relator is: $right = 1$.
<<struct NilpotentRelator>>=
struct NilpotentRelator {

  void setLeft( int s1, int s2 ) {
    left1 = s1;
    left2 = s2;
  }
  // sets the left side of relator

  bool isCommutation() const {
    return left1 != 0 && left2 != 0;
  }
  // returns true iff this is a commutation relator

  int left1, left2;
  PolyWord right;
};

@
\section{class NilpotentPresentation}
The abstract class NilpotentPresentation presents certain nilpotent group
or a subgroup of a nilpotent group. There are two main components of the 
structure: theGenerators and theRelators. The former can be just one-letter
words or words in terms of the group's initial basis. The latter are words
int terms of presentation generators.

The relator looks like
\begin{verbatim}
   [hi, hj] = h1^p1 h2^p2 ...., 
\end{verbatim}
or:  
\begin{verbatim}
   h1^p1 h2^p2 ... = 1.
\end{verbatim}
<<class NilpotentPresentation>>=
class NilpotentPresentation {
public:
  NilpotentPresentation() : built( false ), theCollector(1,1) { }
  // default constructor creates empty presentation.
  // The only purpose of this constructor is to allocate space for the
  // object. The object must be initialized by assignment.

  NilpotentPresentation(const NGCollector& coll,
			const VectorOf<Word>& rels)
    : built(false), theGroupRelators(rels), theCollector(coll)
  { }

  // copy constructor, destructor and assignment operator provided by compiler

  bool isBuilt() const { return built; }
  // returns true iff the presentation is built

  void build();
  // to build the presentation completely

  void print( ostream& s ) const;
  // output presentation to the stream s

  class FPGroup makeGroup() const;
  // produces a group using the presentation

  virtual ostream& write(ostream& s) const;

  virtual istream& read(istream& s);

protected:
  SetOf<Word> convertRelators() const;
  // converts the presentation relators to Words

  Chars printRelator(int i) const;
  // outputs the ith relator in terms of theGenerators

  void buildKernelRelators();
  // builds relators di = 1.

  void improvePresentation();
  // extract identity generators from presentation

  virtual PolyWord decompose( const PolyWord& pw ) const = 0;
  // decomposes the word given in terms of the group generators
  // the result is the word in terms of theGenerators.

  virtual void printGenerators( ostream& s ) const = 0;
  // outputs the generators as a word s in terms of the group's generators

protected:
  VectorOf<PolyWord> theGenerators;
  //theGenerators are words in terms of the group generators
  //They are set within constructor

  VectorOf<Chars> theNames;
  // the names for the words from theGenerators
  //They are set within constructor

  VectorOf<NilpotentRelator> theRelators;
  // The nilpotent relators form presentation.
  //They are set within build() method.

  bool built;
  // Indicates whether the presentation is built.

  VectorOf<Word> theGroupRelators;
  // The relators of the nilpotent group
  
  NGCollector theCollector;
  //the group collector
};

@
\section{class PresentationForNG}
The presentation for nilpotent group
\begin{verbatim}
theGenerators are just 1,2, ....
theNames are c1,c2, ....
theRelators are all commutation relators plus
    di = 1 where di are words of Malcev basis for the relation subgroup
    (in FPNilpotentGroup case)
\end{verbatim}
<<class PresentationForNG>>=
class PresentationForNG : public NilpotentPresentation {
public:
  PresentationForNG(const NGCollector& coll, const VectorOf<Word>& rels);

protected:

  virtual PolyWord decompose( const PolyWord& pw ) const;
  // decomposes the word given in terms of the group generators
  // the result is the word in terms of theGenerators.

  void printGenerators( ostream& s ) const { }
  // nothing to print (now)

};

@
\section{class PresentationForSNG}
The presentation for subgroup of nilpotent group
theGenerators are the words of Malcev basis for the full preimage
theRelators are all commutation relators plus
\begin{verbatim}
    di = 1 where di are words of Malcev basis for the relation subgroup
    (in SGOfFPNilpotentGroup case)
\end{verbatim}
<<class PresentationForSNG>>=
class PresentationForSNG : public NilpotentPresentation {
public:
  PresentationForSNG(const MalcevSet& preimage, const VectorOf<Word>& rels,
		     const NGCollector& coll);
  
protected:
  virtual PolyWord decompose( const PolyWord& pw ) const;
  // decomposes the word given in terms of the group generators
  // the result is the word in terms of theGenerators.

  virtual void printGenerators( ostream& s ) const;

private:
  MalcevSet thePreimageBasis;
};

@
\section{license}
<<license>>=
// Copyright (C) 1994 The New York Group Theory Cooperative
// See magnus/doc/COPYRIGHT for the full notice.
@
<<*>>=
// src/backend/NilpotentGroup/include/Presentation.h
#ifndef _PRESENTATION_H_
#define _PRESENTATION_H_

<<license>>
<<include>>
<<struct NilpotentRelator>>

inline ostream& operator < ( ostream& s, const NilpotentRelator& rel ) {
  return s < rel.left1 < rel.left2 < rel.right;
}
// IPC output

inline istream& operator > ( istream& s, NilpotentRelator& rel ) {
  return s > rel.left1 > rel.left2 > rel.right;
}
// IPC input

ostream& operator << ( ostream& s, const NilpotentRelator& rel );

inline bool operator == (const NilpotentRelator& r1, const NilpotentRelator& r2) {
  return r1.left1 == r2.left1 && r1.left2 == r2.left2 
  && (Word)r1.right == (Word)r2.right;
}

<<class NilpotentPresentation>>
<<class PresentationForNG>>
<<class PresentationForSNG>>

inline ostream& operator < ( ostream& s, const NilpotentPresentation& pres ) {
  return pres.write(s);
}
// IPC output

inline istream& operator > ( istream& s, NilpotentPresentation& pres ) {
  return pres.read(s);
}
// IPC input

#endif
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
