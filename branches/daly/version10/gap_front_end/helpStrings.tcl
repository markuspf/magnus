## Copyright (C) 1995 The New York Group Theory Cooperative
## See magnus/doc/COPYRIGHT for the full notice.

## Contents: Definitions of all help strings.
##
## Principal Author: Roger Needham
##
## Status: In progress.
##
## Revision History:
##
## Revised by GB, 11/29/96  
##
#@rn  These should be replaced with regular manual pages.


set helpStrings(fpGroupDialog) {
We use customary notation in describing a group
by means of a presentation. Thus 
[x,y]=x^-1 y^-1 x y, x^y = y^-1 x y 
and y^n is the n-th power of y. We also 
sometimes use upper case letters to denote the
inverses of the corresponding lower case letters,
e.g., A, B, X, Y are the respective inverses of 
a, b, x, y.

Here are some examples of how to enter a 
presentation:

< x, y; x^2  y^3, (x y)^3 >

<a,b:[a,b]>

< b, t | b^2^t = b b b >


< a, b, c ; [a,b]^C = 
            [a,c] = [b,c] = 1 >

}


set helpStrings(freeGroupDialog) {
Here are examples of how to define a free group:

<x,y>, <a,b,c;>, <x,y,z|> 

Generators can also be listed on different lines
and spaces can be inserted anywhere. It is 
important here to notice that in defining a 
free group, the set of defining relators (or 
relations) is always empty.
}


set helpStrings(nilpGroupDialog) {
In describing a nilpotent group we work in the 
appropriate category. So, in order to present a
nilpotent group of class at most c we describe it
as a quotient of a free nilpotent group of class
c by the normal closure of a finite set of relators
(or relations) by first specifying its class (i.e.,
the class of the ambient free nilpotent group), its
generators and defining relators. Thus, for example:

2
< a, b, c; [a,b] c^-1, [a,c], [b,c] >

describes the quotient of the free nilpotent group
of class 2 on a, b and c by the normal subgroup
generated by [a,b] c^-1, [a,c] and [b,c].

Similarly

1
< x, y; x^2, y^3 >

is the quotient of the free abelian group on x and y
factored by the subgroup generated by x^2 and y^3, 
i.e., the group of order 6.
}
set helpStrings(freeNilpGroupDialog) {
In describing a free nilpotent group we work in
the appropriate category. So, we specify its
class and its generators. Thus, for example:

2
< a, b, c >

describes a free nilpotent group
of class 2 on a, b and c.

Similarly

1
< x, y >

is just the free abelian group on x and y.
}

set helpStrings(permutationConventions) {

We represent permutation by it's bottom row, i.e., { 3 1 2 } means 1\
-> 3, 2 -> 1, 3 -> 2. It should be a list of integers separated by\
spaces and enclosed in braces. The list must define a permutation,\
i.e., it must be a list of integers without holes, contain no integer\
twice, contain no integer not in the range from 1 to the length of the\
list. Also, we assume that i -> i for all i greater than the length of\
the list.

}

set helpStrings(wordConventions) {
Conventions on word notation:

Generator names can be any letter, such as a, b,
..., x, y, ...  or any letter followed by a
sequence of digits such as a1, b23 and so on. In
putting generators together to form words, there
must be white space between them unless other
punctuation is used. For example we allow a (b c)
in place of a b c. We sometimes use capital
letters to denote inverses of generators. So the
inverses of a, b, c11, .. are denoted by A, B,
C11,... and also by a^-1, b^-1, c11^-1 and so
on. The ^ is used to denote exponentiation. The
exponents are allowed to be group elements as
well as integers, with a^b defined to be the
conjugate B a b of a by b. Thus a^b = B a b =
b^-1 a b .

Our convention is that ^ is left-associative. So

a^b^2 = (a^b)^2.

We use square brackets to denote commutators:

[a,b]= a^-1 b^-1 a b ( = A B a b ).

We then define, for n > 2, 

[a1,a2,...,an]= [[a1,a2],a3,...,an].

Thus multiple commutators are "left-normed".
}


set helpStrings(equationConventions) {
An equation over a group G is an expression 
of the form 
w=1
where w is an element in the free product of 
G and the free group freely generated by the 
unknowns or variables, usually denoted by x, 
y, z, ... and so on. A solution of such an 
equation w=1 is then a tuple f,g,h, ,.. of 
elements of G such that on setting x=f, y=g, 
z=h, ... in w the resultant element takes on
the value 1 in G.

In order to check in an equation, one needs
first to check in the group G and then the 
element w. As of now we have only implemented 
an algorithm in Magnus for solving equations 
when G is a free group and w is a quadratic word, 
i.e., all of the variables that occur in w, occur 
exactly twice. So, having checked in a free group, 
here are some examples of how to check in an 
equation:

(a b^2)^x Y^2 A

[x,y]=a^2

x^2 y^2 z^2 = 1

The first two examples show that it suffices to 
simply check-in the left-hand-side of an equation.

}

set helpStrings(SystemOfEquationsConventions) {
Enter the tuple of equations i.e. the tuple of 
words in the generators of the free product of
G and the free group freely generated by the 
unknowns or variables, usually denoted by x, 
y, z, ... and so on, separating the words with
commas,enclosing them by {}'s. For example:

{ a x, a x^2 y, z y^2 a^2 x^-3 b, x^3 [b^3 , y] }

}

set helpStrings(subgroupConventions) {
Subgroups are described by listing its 
generators, each such generator given by
a word in the generators of the supergroup. 
We separate these words by commas, enclosing
them by {}'s. For example the subgroup of a
group with generators a and b generated by
a^2 b and [a,b] is described by

{ a^2 b, [a,b] }

We express the fact that H is the the subgroup 
generated by a^2 b and [a,b] by writing

H = gp( a^2 b,[a,b] )
}


set helpStrings(setOfRelatorsConventions) {
Enter the relators as words in the generators 
of the ambient free group. Separate the words 
with commas, and enclose the list in {}'s. 
For example:

{ a^2 b^2, [a^2,b^2] }
}


set helpStrings(setOfWordsConventions) {
Enter the set of words in the generators of 
the supergroup. Separate the words with commas, 
and enclose the list in {}'s. For example:

{ (a b)^3, a^5, b^7, [A^2 b^2, a^2 b^3] }
}


set helpStrings(vectorOfWordsConventions) {
Enter the tuple of words in the generators of
the ambient group, separating the words with
commas and enclosing the list in ()'s. For
example:

(a, a, a^2, b^a, a, b^2)

}


set helpStrings(mapConventions) {
To define a map from the generators 
{ x, y, ... } 
of a group G to a group H with generators 
{ a, b, ... }
assign to each of x,y, ... its image as a word 
in the generators of H, enclsoing the description
by {}'s. For example:

{
  x -> a^b,
  y -> b^-1
}

If you omit the image of a generator, Magnus
assigns its image to be the identity.
}


# -------------------------- STATISTICS --------------------------------- #


set helpStrings(DataSetConventions) {

      CAISS-Stat allows the user to check-in a data set in several different ways.  These include

   From the Screen - String or List Format
   From the Screen - Spreadsheet Format
   From an Existing File
   From the CAISS-Stat Database

  Below we give a description of each of these options. 

}

#  one-variable short state help

set helpStrings(OneVariableDataSetConventions) {

   CAISS-Stat allows the user to check-in a one variable data set in several different ways.  These include

   From the Screen - String or List Format
   From the Screen - Spreadsheet Format
   From an Existing File
   From the CAISS-Stat Database

   For more help, please refer to help menu. 
}

set helpStrings(TwoVariableDataSetConventions) {

   CAISS-Stat allows the user to check-in a two variable data set in several different ways.  These include

   From the Screen - String or List Format
   From the Screen - Spreadsheet Format
   From an Existing File
   From the CAISS-Stat Database
   For regression analysis the data sets should be the same size.
   For more help, please refer to help menu. 
}

set helpStrings(OneVariableDataSetSpreadsheetFormat) {
     A data set can also be inputted via a spreadsheet format. When the user chooses spreadsheet format a spreadsheet will appear.  For a one variable data set the user will input the data into the first column of the spreadsheet. For example 

 ________________________________
|8.6	|	|   	|   	|				
|_______|_______|_______|_______|
|9.8	|	|	    |   	|				
|_______|_______|_______|_______|
|10.3	|	|	    |   	|				
|_______|_______|_______|_______|
|10.7	|	|	    |   	|				
|_______|_______|_______|_______|
|9.6	|	|	    |   	|				
| ______|_______|_______|_______|

 For More Information Click on the Help Menu
   
}

set helpStrings(TwoVariableDataSetSpreadsheetFormat) {
     A two variable data set can also be inputted via a spreadsheet format. When the user chooses spreadsheet format a spreadsheet will appear.  For a two variable data set the user will input the data into the first column of the spreadsheet. For example 

 ________________________________
|8.6	|8.5    |	    |	    |				
|_______|_______|_______|_______|
|9.8	|4.3	|	    |   	|				
|_______|_______|_______|_______|
|10.3	|	|   	|   	|				
|_______|_______|_______|_______|
|10.7	|	|	    |   	|				
|_______|_______|_______|_______|
|9.6	|	|	    |   	|				
| ______|_______|_______|_______|

 For More Information Click on the Help Menu
   
}

set helpStrings(OneVariableDataSetStringFormat) {

A data set is a collection of numbers.  These numbers generally represent a set of measurements such as heights, weights, time, stress etc.  These will usually consist of a random sample from some continuous population.  In entering from the screen in string or list format  the user would enter the data one after another separated by commas.  For example

4.8, 8.9, 3.7, 6.6, 5.9

 For More Information Click on the Help Menu

}

set helpStrings(TwoVariableDataSetStringFormat) {

A data set is a collection of numbers.  These numbers generally represent a set of measurements such as heights, weights, time, stress etc.  These will usually consist of a random sample from some continuous population.  In entering from the screen in string or list format  the user would enter the data one after another separated by commas.  For example

4.8, 8.9, 3.7, 6.6, 5.9

Enter data from the first population in the first screen then data from the second population in the second screen.

 For More Information Click on the Help Menu

}

set helpStrings(OneVariableDataSetFromFile) {

  The user can also import an existing file to be checked in as a CAISS-Stat \
one variable data set.

 For More Information Click on the Help Menu

}

set helpStrings(TwoVariableDataSetFromFile) {

  The user can also import an existing file to be checked in as a CAISS-Stat \
two variable data set.

 For More Information Click on the Help Menu

}

set helpStrings(OneVariableDataSetFromDatabase) {

  CAISS-Stat contains a built-in database of one-variable data sets that can be \
used for exploration and analysis.

 For More Information Click on the Help Menu

}

set helpStrings(TwoVariableDataSetFromDatabase) {

  CAISS-Stat contains a built-in database of two-variable data sets that can be \
used for exploration and analysis.

 For More Information Click on the Help Menu

}

set helpStrings(AttributeDataSetConventions) {
An attribute data set can either handled for proportion testing or for contingency table analysis.  Further it can be checked-in from an existing file.  Please make a choice above.

 For More Information Click on the Help Menu
}

set helpStrings(AttributeDataSetSProportionFormat) {
The Proportion Testing Format for an attribute data set can handle data from one or two proportions.  The first row should be the number of successes for each proportion and the second row the number of failures. 

  For More Information Click on the Help Menu
}

set helpStrings(AttributeDataSetContingencyFormat) {
The Contingency Format for an attribute data set can handle data from a contingency table. Enter the contingency table in the above spreadsheet. 

     For More Information Click on the Help Menu
}

set helpStrings(AttributeDataSetFromFile) {
  The user can also import an existing file to be checked in as a CAISS-Stat \
attribute data set.

 For More Information Click on the Help Menu
}

set helpStrings(DataSetDataSummary) {
  Data Summary can either be in the form of a Frequency Distribution or a Percentage Distribution.

  Click on Recalculate and Summary Type to change between them. 

  You may also change the setting by using the boxes in this window followed by Recalculate. 

       For more information click on help.
}

set helpStrings(DataSetGraphicalAnalysis) {
  Graphical Analysis can be in the form of a Histogram, Frequency Polygon, Comparison with Normal.

  Click on Recalculate and Graph Type to change between them. 

  You may also change the setting by using the boxes in this window followed by Recalculate. 

       For more information click on help.
}

set helpStrings(DataSetMeanAnalysis) {
  The Analysis of the Mean Tool will perform two standard inference procedures \
for a population mean of the population from which the given one variable data \
set has been drawn.  The first procedure is to construct a  confidence interval \
for the population mean from the sample mean and standard deviation of the given \
one variable data set. The second procedure is to evaluate a hypothesis test testing \
a user supplied null hypothesis( given in the form of a target mean) against \
a user supplied alternative hypothesis.
 
Please choose a type of analysis from the menu above.

  For more information click on help.
}

set helpStrings(DataSetVarianceAnalysis) {
The  Analysis of the Variance Tool will perform two standard inference procedures \
for the population variance or population standard deviation of the population \
from which the given one variable data set has been drawn.  The first procedure \
is to construct a confidence interval for the population variance from the sample \ 
standard deviation of the given one variable data set. The second procedure is to \
evaluate a hypothesis test testing a user supplied null hypothesis (given in the \
form of a target variance or standard deviaiton) against a user supplied alternative \
hypothesis.
 
Pleasse choose an analysis type from the menu above.

For more information click on help.

}

set helpStrings(DataSetGoodnessFitAnalysis) {
The Goodness of Fit Tool will conduct a test to determine whether a one variable \
data set fits a given theoretical distribution with a prescribed level of significance. \
The level of significance must be a number between 0 and 1.  A common choice is .05. The \
user can test the one variable data set against a normal distirbution, an exponential \
distribution or a uniform distribution.

  For more information click on help.

}

set helpStrings(DataSetRandomSampleAnalysis) {
The Random Sample Tool will choose a random sample from the given one variable data set.\
The user must choose a sample size.  Further analysis can be done on this random sample \
using the one variable tools. 

  For more information click on help.
}

set helpStrings(DataSetVarianceConfidenceAnalysis) {
The  confidence interval for variances tool will calculate a confidence interval for \
a population variance and population standard deviation given a one variable data set.\
The user must supply the desired confidence level which must be a number between 0 and \
1.  .95 is a common choice.

  For more information click on help.
}

set helpStrings(DataSetVarianceHypothesisAnalysis) {
The hypothesis testing tool for variances for a one variable data set will conduct a \
hypothesis test for a single variance or single standard deviation against a given  value. \
Thus it will test a null hypothesis of the form 
                Ho: s = s0
The user must supply the desired significance level and the desired alternative. \
The significance level must be a number between 0 and 1.  A common choice is a 5% level or a choice of .05.
 

  For more information click on help.
}

set helpStrings(DataSetMeanConfidenceAnalysis) {
The  confidence interval for means tool will calculate a confidence interval \
for a population mean given a one variable data set.  The user must supply the \
desired confidence level which must be a number between 0 and 1.  .95 is a common choice.

  For more information click on help.
}

set helpStrings(DataSetMeanHypothesisAnalysis) {
The hypothesis testing tool for means for a one variable data set will conduct a \
hypothesis test for a single mean against a given  value.  Thus it will test a null \
hypothesis of the form
               Ho: m = m0
The user must supply the desired significance level and the desired alternative. \
The significance level must be a number between 0 and 1. A common choice is a 5% level \
or a choice of .05.
 

  For more information click on help.
}

set helpStrings(DataSetComparisonMeanAnalysis) {
  
  The Comparison of Means Tool will perform two standard inference procedure for the means from two independent populations.  The first is to construct a confidence interval for the difference of means. The second is to evaluate a hypothesis test concerning the difference of means.  Please choose an analysis type from above.

  For more information click on help.
}

set helpStrings(DataSetComparisonVarianceAnalysis) {
   The Comparison of Variances Tool will perform one standard inference procedure for the variances from two independent populations.  That is to evaluate a hypothesis test concerning the difference of variances.  Please choose an analysis type from above.

  For more information click on help.
}

set helpStrings(DataSetComparisonMeanConfidenceAnalysis) {

  The Comparison of  Means Confidence Interval Tool is to construct a confidence interval for the difference of means from two independent populations. Thhe user must supply a confidence level.  This must be a number between 0 and 1 with .95 a common choice.

 
   For more information click on help.

}

set helpStrings(DataSetComparisonMeanHypothesisAnalysis) {

  The Comparison of  Means Hypothesis Test Tool is to construct evaluate a hypothesis test for a user supplied null hypothesis and alternative for the difference of means from two independent populations. The user must supply a level of significance.  This must be a number between 0 and 1 with .05 a common choice.

 
   For more information click on help.

}

# useless
set helpStrings(DataSetComparisonVarianceConfidenceAnalysis) {
  Comparison Variance Analysis
  For more information click on help.
}

set helpStrings(DataSetComparisonVarianceHypothesisAnalysis) {
  The Comparison of Variance Tool will evaluate a hypothesis test for the difference of two variances from two independent populations.  A standard F-test will be used.  Thus user must supply a level of significance.  This must be a number between 0 and 1 with .05 a common choice.

}

set helpStrings(DataSetNonParametricAnalysis) {
  The Non-Parametric Testing Tool will evaluate a hypothesis test for the difference of two independent populations using the non-parametric Wilcoxon-Mann-Whitney U-test The user must supply a level of significance.  This must be a number between 0 and 1 with .05 a common choice. 

 For more information click on help.
}

set helpStrings(DataSetPredictionModelFitAnalysis) {
  The test of model fit tool will test the adequacy of a fitted regression model. The user must supply a level of significance.  This must be value between 0 and 1 with .05 as a common choice.
       For more information click on help.
}

set helpStrings(DataSetPredictionHypothesisSlopeAnalysis) {
  
    This tool allows the user to conduct a hypothesis test for a regression slope B against a user supplied null hypothesis and alternative.  The user must supply the value of the null hypothesis, the alternative and a level of significance.  This must be value between 0 and 1 with .05 as a common choice.

  For more information click on help.
}

set helpStrings(DataSetPredictionConfidenceSlopeAnalysis) {
  This tool allows the user to construct a confidence interval for a regression slope B. The user must supply the confidence level.  This must be value between 0 and 1 with .95 as a common choice. 

 For more information click on help.
}

set helpStrings(DataSetPredictionHypothesisInterceptAnalysis) {
  This tool allows the user to conduct a hypothesis test for a regression intercept A against a user supplied null hypothesis and alternative.  The user must supply the value of the null hypothesis, the alternative and a level of significance.  This must be value between 0 and 1 with .05 as a common choice.

  For more information click on help.
}

set helpStrings(DataSetPredictionConfidenceInterceptAnalysis) {
  This tool allows the user to construct a confidence interval for a regression intercept A. The user must supply the confidence level.  This must be value between 0 and 1 with .95 as a common choice.

  For more information click on help.
}

set helpStrings(DataSetPredictionIntervalAnalysis) {
  This tool allows the user to construct a confidence interval for mean response and a predicted future response for a fitted regression model at a given point. The user must supply the confidence level.  This must be value between 0 and 1 with .95 as a common choice.

  For more information click on help.
}

set helpStrings(DataSetPredictionAnalysis) {
  The Prediction and Parameter Testing Tool will perform various analysis concerning a fitted regression model. Choose an analysis type above.

  For more information click on help.
}
set helpStrings(DataSetPredictionTotalAnalysis) {
  DataSetPredictionTotalAnalysis
  For more information click on help.
}
set helpStrings(DataSetRegressionCorrelationAnalysis) {
  
The Correlation Analysis Tool will perform two standard inference procedures for the correlation coefficient from a correlated two variable data set.  The first is to construct a confidence interval for the correlation coeffcient. The second is to evaluate a hypothesis test concerning the correlation coefficient.  Please choose an analysis type from above. 

  For more information click on help.
}
set helpStrings(DataSetConfidenceCorrelationAnalysis) {
  The Confidence Interval Tool for Correlation will construct a confidence interval for the correlation coefficient. The user must supply the confidence level.  This must be value between 0 and 1 with .95 as a common choice.

  For more information click on help.
}
set helpStrings(DataSetHypothesisCorrelationAnalysis) {
  The Hypothesis Test Tool for Correlation Analysis will evaluate a hypothesis test concerning the correlation coefficient against a user supplied null hypothesis and alternative.  The user must supply the value of the null hypothesis, the alternative and a level of significance.  This must be value between 0 and 1 with .05 as a common choice.

  For more information click on help.
}
set helpStrings(DataSetAlternateModelAnalysis) {
  The Alternate Models Tool will fit the given two-variable data set to either an exponential model or a power model.  This model will then be compared to a fitted linear model.  Choose an alternate model above.  

  For more information click on help.
}

set helpStrings(DataSetPairedConfidenceAnalysis) {
  This tool will construct a confidence interval for the mean of the paired differences, sample 2 - sample1. The user must supply the confidence level. This must be value between 0 and 1 with .95 as a common choice.
  For more information click on help.
}

set helpStrings(DataSetPairedHypothsisAnalysis) {
  This will compute an appropriate test statistics value and P-value for testing the mean of paired differences, sample 2-sample1 for a given null hypothsis. The significance level must be a number between 0 and 1 with .05 being a common choice.
  For more information click on help.
}

#--------------------------------------------------- attribute data set

set helpStrings(AttributeDataSetConfidenceOne) {
The Confidence Interval Tool   for One Proportion will construct a confidence interval for the population proportion computed from the checked-in attribute data set.  If two proportions were entered the One Proportion Tool will handle the first. The user must supply a confidence level which must be a number between 0 and 1. .95 is a common choice.

  For more information click on help.

}

set helpStrings(AttributeDataSetHypothesisOne) {
The Hypothesis Testing Tool for One Proportion will conduct a hypothesis test for one proportion from the checked-in attribute data set. The user must supply a null hypothesis and alternative and a level of significance. The level of significance must be a number between 0 and 1 with .05 a common choice. 

  For more information click on help.

}

set helpStrings(AttributeDataSetConfidenceTwo) {
The Confidence Interval Tool for Two Proportions will construct confidence intervals for the two population proportions computed from the checked-in attribute data set. The user must supply a confidence level which must be a number between 0 and 1. .95 is a common choice.

  For more information click on help.

}

set helpStrings(AttributeDataSetHypothesisTwo) {
The Hypothesis Testing Tool for Two Proportions will conduct a difference of proportions test for the two population proportions computed from the checked-in attribute data set. The user must supply a null hypothesis and alternative and a level of significance. The level of significance must be a number between 0 and 1 with .05 a common choice. 

  For more information click on help.

}

set helpStrings(AttributeDataSetTableAnalysis) {

The Table Analysis Tool for an Attribute Data Set entered in contingency format will analyze the contingency table from the checked-in attribute data set. The outcome of the analysis will be whether the row factor and column factor are independent. The user must supply a level of significance. The level of significance must be a number between 0 and 1 with .05 a common choice. 


  For more information click on help.

}

set helpStrings(AttributeDataSetFollowupAnalysis) {
The Follow-up Analysis Tool for an Attribute Data Set entered in contingency format will construct and analyze various sub-tables from  the contingency table from the checked-in attribute data set.. The user must supply the desired starting row and column and terminal row and column and a level of significance. The level of significance must be a number between 0 and 1 with .05 a common choice. 

  For more information click on help.

}

#---------------------------------------------------probability data set

set helpStrings(DataSetProbabilityCheckIn) {
  CAISS_Stat allows the user to work and compute woth a collection of theoretical probability distributions. Please make a choice format listed above.

  For more information click on help.
}

set helpStrings(DataSetNormalDistributionCheckIn) {
  The Normal distribution depends on two parameters - its mean m and its standard deviation s.  Please enter these above:

  For more information click on help.
}
set helpStrings(DataSetExponentialDistributionCheckIn) {
  The Exponential distribution depends on one parameter l - this is the reciprocal of its mean. Please enter this above:

  For more information click on help.
}
set helpStrings(DataSetTDistributionCheckIn) {
  The t-distribution depends on one parameter called its degrees of freedom.  Please enter this above:

  For more information click on help.
}
set helpStrings(DataSetChiDistributionCheckIn) {
  The chi-square distribution depends on one parameter called its degrees of freedom.  Please enter this above:

  For more information click on help.
}
set helpStrings(DataSetFDistributionCheckIn) {
  The F distribution depends on two parameters called its numerator degrees of freedom n and its denominator degrees of freedom m.  Please enter these above:

  For more information click on help.
}
set helpStrings(DataSetGammaDistributionCheckIn) {
  The Gamma distribution depends on two positive parameters A and B.  Please enter these above:

  For more information click on help.
}
set helpStrings(DataSetBetaDistributionCheckIn) {
  The Beta distribution depends on two positive parameters A and B.  Please enter these above:

  For more information click on help.
}
set helpStrings(DataSetWeibullDistributionCheckIn) {
  The Weibull distribution depends on two parameters A and B.  Please enter these above:

  For more information click on help.
}
set helpStrings(DataSetUniformDistributionCheckIn) {
  The Uniform distribution depends on two parameters;  its upper limit b and its lower limit a.  Please enter these above:

  For more information click on help.
}
set helpStrings(DataSetBinomialDistributionCheckIn) {
  The Binomial distribution depends on two parameters: n, the number of independent Bernoulli trials observed and p, the success probability for each trial .  Please enter these above:

  For more information click on help.
}
set helpStrings(DataSetPoissonDistributionCheckIn) {
  The Poisson distribution depends on one parameter: it means lamda.  Please enter these above:

  For more information click on help.
}
set helpStrings(DataSetHyperDistributionCheckIn) {
  The Hypergeometric distribution depends on three parameters: M, the total number in the bin, R, the number of successes in the bin, and n the number sampled from the bin..  Please enter these above:

  For more information click on help.
}
set helpStrings(DataSetNegativeDistributionCheckIn) {
  The Negative Biniomial distribution depends on two parameters: p- the success probability for 
the Bernoulli trials observed and r,the number of successes waited for. Please enter these above:

  For more information click on help.
}
set helpStrings(DataSetGeometricDistributionCheckIn) {
  NormalDistributionCheckIn
  For more information click on help.
}

set helpStrings(PDDSCompProbAnalysis) {

This will compute a probability for this distribution. If you wish the probability within a range enter the upper and lower values.  If you wish a cumulative probability up to a given value enter the upper value.  If you wish a probability above a given value enter the lower value.

  For more information click on help.
}
set helpStrings(PDDSCompPercentileAnalysis) {
This will compute a percentile for this distribution.  Recall a percentile is a number below which lies the given percent of the distribution.

  For more information click on help.
}
set helpStrings(PDDSGraphAnalysis) {
This will present the graph of either the density function or the distribution function for the given distribution.  
  For more information click on help.
}
set helpStrings(PDDSTableAnalysis) {
This will construct a table of values for the  distribution function for the given distribution.  
  For more information click on help.
}
set helpStrings(PDDSSimulateAnalysis) {
This will simulate a random sample of a given size from the given distribution with the prescribed parameters.  
  For more information click on help.
}

# -------------------------- Multi Dataset --------------------------------- #
set helpStrings(MultiDataSetCheckIn) {
   A Multi Variable Data Set consists of data from several populations.  These can be analyzed either by comparison of the means of the populations which are Analysis of Variance or ANOVA Procedures or they can be analyzed via multiple regression models. Please choose one from the list above.

 

                 For more information click on help

}

set helpStrings(MultiDataAnovaCheckIn) {
  An Analysis of Variance or ANOVA Procedure will analyze and compare the means of several different populations.  In ANOVA analysis these populations are called treatments.   If these treatments depend on only one variable or factor it is a One-Way ANOVA.  If they depend on two factors it is a Two-Way ANOVA and on three factors a Three-Way ANOVA.   Please choose a format from the list above and then follow the directions to enter the data. 

 

                 For more information click here or on help

}

set helpStrings(MultiDataAnovaCheckIn1) {
 A One-Way ANOVA will compare the means of several different populations assuming the normal linear model. Please enter the number of treatments above.  Put the data from the first treatment in the first column, the data from the second treatment in the second column and so on.  If you wish to consider blocking the sample sizes must be the same and the data in each column must be in the same order relative to blocks.

 

                 For more information click here or on help


}

set helpStrings(MultiDataAnovaCheckIn2) {
  A Two-Way ANOVA will compare the means of several different populations assuming the normal linear model. We assume that there are two factors A with a levels and B with b levels and n replications of each factor-factor combination.  Enter all the data from factor A level 1 in the first column in the following order: First A level 1 with B level 1 replication 1, then A level 1,B level 1 replication 2 and so on until all replications of the 1,1 combination are finished.  Then do the same for A level 1, B  level 2.  In column 2 do the same for A level 2 and so on.  For an illustrative example click on the help menu or below.


                 For more information click here or on help

}

set helpStrings(MultiDataAnovaCheckIn3) {
  A Three-Way ANOVA will compare the means of several different populations assuming the normal linear model. We assume that there are three factors A with a levels, B with b levels and C with c levels and n replications of each factor-factor-factor combination.  Enter all the data from factor A level 1 in the first column in the following order: First A level 1 with B level 1 replication 1, then A level 1,B level 1 replication 2 and so on until all replications of the 1,1 combination are finished.  Then do the same for A level 1, C  level 1.  The do the same for A level 1, B level 2 and so on. In column 2 do the same for A level 2 and so on.  For an illustrative example click on the help menu or below.

 

                 For more information click here or on help

}

set helpStrings(MultiDataRegressionCheckIn) {
  CAISS_Stat will build a multiple regression model for a Multi Variable Data Set.  Each sample size must be the same.  In the first column enter the data from the response or dependent variable.  In each subsequent column enter the data for each independent variable.

 

                 For more information click here or on help

}

set helpStrings(MDOneWayAnovaAnalysis) {
    The ONE WAY ANOVA TOOL will construct an ANOVA table for a completely randomized one way design.
The user must supply a level of significance. This must be a number between 0 and 1 with .01 and 0.05 being
common choices. If the table is significant indicating a difference in sample means a followup procedure 
will be done using the Duncan Multiple Range Test to assess which means actually differ. If you wish to consider
blocking, the sample sizes must be the same and entered in the order in which they are to be blocked.
 
                 For more information click here or on help
}

set helpStrings(MDTwoWayAnovaAnalysis) {
 
                 For more information click here or on help
}

set helpStrings(MDThreeWayAnovaAnalysis) {
 
                 For more information click here or on help
}

set helpStrings(MDMultipleRegressionAnalysis) {
 
                 For more information click here or on help
}

set helpStrings(MDMultipleParameterAnalysis) {
 
                 For more information click here or on help
}

set helpStrings(MDMultiplePredictionAnalysis) {
 
                 For more information click here or on help
}

# -------------------------- CALCULUS --------------------------------- #


set helpStrings(PolynomialConventions) {

Example:

x1 + 2 x1 x2 - 5 x3^2 
}




