import Magnus
w1=Magnus.Word()
w2=Magnus.Word()
ws=[w1,w2]
fg=Magnus.FreeGroup(2)
####
a=Magnus.SGofFreeGroup( fg, ws) 
b=Magnus.SGofFreeGroup( fg, ws) 
x=a.parentGroup( )
x=a.generators( )
x=a.type( ) 
x=a.actualType( )  
x=a.order( )  
x=a.isTrivial( )  
x=a.isFinite( )  
x=a.isInfinite( ) 
x=a.isAbelian( )  
x=a.isMalnormal( w1)  
x=a.join(b)  
x=a.intersection(b)  
x=a.isNormal( )  
x=a.normalizer( )  
x=a.nielsenBasis( )  
x=a.nielsenWord(1)  
x=a.inNielsenWords(w1)  
x=a.rank()  
x=a.MHallCompletion( )  
x=a.eval( w1)
x=a.wordProblem( w1)  
x=a.conjugacyProblem( w1, w2 )  
x=a.contains(w1)  
x=a.containsFromSet(ws)  
x=a.containsFromVector(ws) 
x=a.containsFromSGofFreeGroup(b)  
x=a.equalTo(ws)  
x=a.conjugateInSubgroup(w1, w2) 
x=a.conjugateInSubgroupFromSet(ws, w2)  
x=a.conjugateTo(ws) 
x=a.powerInSubgroup( w1) 
x=a.findIndex()  
x=a.findWhiteheadBasis()  
x=a.isAFreeFactor()  
x=a.generatesTheFreeGroup()  
x=a.rightSchreierRepresentative(w1) 
a!=b
a.__hash__() 
a.printWord(w1) 
x=Magnus.expressWordInSubgroupGenerators( a,w1) 
