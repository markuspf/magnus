## Copyright (C) 1995 The New York Group Theory Cooperative
## See magnus/doc/COPYRIGHT for the full notice.

## Contents: Definitions of all help strings.
##
## Principal Author: Roger Needham
##
## Status: In progress.
##
## Revision History:
##
## Revised by GB, 11/29/96  
##
#@rn  These should be replaced with regular manual pages.


set helpStrings(fpGroupDialog) {
We use customary notation in describing a group
by means of a presentation. Thus 
[x,y]=x^-1 y^-1 x y, x^y = y^-1 x y 
and y^n is the n-th power of y. We also 
sometimes use upper case letters to denote the
inverses of the corresponding lower case letters,
e.g., A, B, X, Y are the respective inverses of 
a, b, x, y.

Here are some examples of how to enter a 
presentation:

< x, y; x^2  y^3, (x y)^3 >

<a,b:[a,b]>

< b, t | b^2^t = b b b >


< a, b, c ; [a,b]^C = 
            [a,c] = [b,c] = 1 >

}


set helpStrings(freeGroupDialog) {
Here are examples of how to define a free group:

<x,y>, <a,b,c;>, <x,y,z|> 

Generators can also be listed on different lines
and spaces can be inserted anywhere. It is 
important here to notice that in defining a 
free group, the set of defining relators (or 
relations) is always empty.
}


set helpStrings(abelGroupDialog) {
In working with abelian groups we work in the 
category of abelian groups. Thus presentations 
of abelian groups are all relative to a free 
abelian group, which means adding commutators 
to a presentation is redundant. 

So, for example,

< s, t >

describes the free abelian group on s and t,

< x, y; x^2  y^3 > 

is the factor group of the free abelian group 
on x and y by the subgroup generated by x^2 y^3 
and

< b, t,u | b^2 t = b b b, b^-2 t^4 u^8 >

is the quotient of the free abelian group on b,t 
and u by the subgroup generated by b^2 t B B B 
and B B t^4 u^8. Notice that we use upper case 
letters in place of the inverses of the 
corresponding lower case letters - thus B =b^-1 
and so on.
}


set helpStrings(nilpGroupDialog) {
In describing a nilpotent group we work in the 
appropriate category. So, in order to present a
nilpotent group of class at most c we describe it
as a quotient of a free nilpotent group of class
c by the normal closure of a finite set of relators
(or relations) by first specifying its class (i.e.,
the class of the ambient free nilpotent group), its
generators and defining relators. Thus, for example:

2
< a, b, c; [a,b] c^-1, [a,c], [b,c] >

describes the quotient of the free nilpotent group
of class 2 on a, b and c by the normal subgroup
generated by [a,b] c^-1, [a,c] and [b,c].

Similarly

1
< x, y; x^2, y^3 >

is the quotient of the free abelian group on x and y
factored by the subgroup generated by x^2 and y^3, 
i.e., the group of order 6.
}
set helpStrings(freeNilpGroupDialog) {
In describing a free nilpotent group we work in
the appropriate category. So, we specify its
class and its generators. Thus, for example:

2
< a, b, c >

describes a free nilpotent group
of class 2 on a, b and c.

Similarly

1
< x, y >

is just the free abelian group on x and y.
}

set helpStrings(permutationConventions) {

We represent permutation by it's bottom row, i.e., { 3 1 2 } means 1\
-> 3, 2 -> 1, 3 -> 2. It should be a list of integers separated by\
spaces and enclosed in braces. The list must define a permutation,\
i.e., it must be a list of integers without holes, contain no integer\
twice, contain no integer not in the range from 1 to the length of the\
list. Also, we assume that i -> i for all i greater than the length of\
the list.

}

set helpStrings(wordConventions) {
Conventions on word notation:

Generator names can be any letter, such as a, b,
..., x, y, ...  or any letter followed by a
sequence of digits such as a1, b23 and so on. In
putting generators together to form words, there
must be white space between them unless other
punctuation is used. For example we allow a (b c)
in place of a b c. We sometimes use capital
letters to denote inverses of generators. So the
inverses of a, b, c11, .. are denoted by A, B,
C11,... and also by a^-1, b^-1, c11^-1 and so
on. The ^ is used to denote exponentiation. The
exponents are allowed to be group elements as
well as integers, with a^b defined to be the
conjugate B a b of a by b. Thus a^b = B a b =
b^-1 a b .

Our convention is that ^ is left-associative. So

a^b^2 = (a^b)^2.

We use square brackets to denote commutators:

[a,b]= a^-1 b^-1 a b ( = A B a b ).

We then define, for n > 2, 

[a1,a2,...,an]= [[a1,a2],a3,...,an].

Thus multiple commutators are "left-normed".
}


set helpStrings(equationConventions) {
An equation over a group G is an expression 
of the form 
w=1
where w is an element in the free product of 
G and the free group freely generated by the 
unknowns or variables, usually denoted by x, 
y, z, ... and so on. A solution of such an 
equation w=1 is then a tuple f,g,h, ,.. of 
elements of G such that on setting x=f, y=g, 
z=h, ... in w the resultant element takes on
the value 1 in G.

In order to check in an equation, one needs
first to check in the group G and then the 
element w. As of now we have only implemented 
an algorithm in Magnus for solving equations 
when G is a free group and w is a quadratic word, 
i.e., all of the variables that occur in w, occur 
exactly twice. So, having checked in a free group, 
here are some examples of how to check in an 
equation:

(a b^2)^x Y^2 A

[x,y]=a^2

x^2 y^2 z^2 = 1

The first two examples show that it suffices to 
simply check-in the left-hand-side of an equation.

}

set helpStrings(SystemOfEquationsConventions) {
Enter the tuple of equations i.e. the tuple of 
words in the generators of the free product of
G and the free group freely generated by the 
unknowns or variables, usually denoted by x, 
y, z, ... and so on, separating the words with
commas,enclosing them by {}'s. For example:

{ a x, a x^2 y, z y^2 a^2 x^-3 b, x^3 [b^3 , y] }

}

set helpStrings(subgroupConventions) {
Subgroups are described by listing its 
generators, each such generator given by
a word in the generators of the supergroup. 
We separate these words by commas, enclosing
them by {}'s. For example the subgroup of a
group with generators a and b generated by
a^2 b and [a,b] is described by

{ a^2 b, [a,b] }

We express the fact that H is the the subgroup 
generated by a^2 b and [a,b] by writing

H = gp( a^2 b,[a,b] )
}


set helpStrings(setOfRelatorsConventions) {
Enter the relators as words in the generators 
of the ambient free group. Separate the words 
with commas, and enclose the list in {}'s. 
For example:

{ a^2 b^2, [a^2,b^2] }
}


set helpStrings(setOfWordsConventions) {
Enter the set of words in the generators of 
the supergroup. Separate the words with commas, 
and enclose the list in {}'s. For example:

{ (a b)^3, a^5, b^7, [A^2 b^2, a^2 b^3] }
}


set helpStrings(vectorOfWordsConventions) {
Enter the tuple of words in the generators of
the ambient group, separating the words with
commas and enclosing the list in ()'s. For
example:

(a, a, a^2, b^a, a, b^2)

}


set helpStrings(mapConventions) {
To define a map from the generators 
{ x, y, ... } 
of a group G to a group H with generators 
{ a, b, ... }
assign to each of x,y, ... its image as a word 
in the generators of H, enclsoing the description
by {}'s. For example:

{
  x -> a^b,
  y -> b^-1
}

If you omit the image of a generator, Magnus
assigns its image to be the identity.
}


# -------------------------- STATISTICS --------------------------------- #


set helpStrings(DataSetConventions) {

      CAISS-STAT allows the user to check-in a data set in several different ways.  These include

   From the Screen - String or List Format
   From the Screen - Spreadsheet Format
   From an Existing File
   From the CAISS-STAT Database

  Below we give a description of each of these options. 

}

#  one-variable short state help

set helpStrings(OneVariableDataSetConventions) {

   CAISS-STAT allows the user to check-in a one variable data set in several different ways.  These include

   From the Screen - String or List Format
   From the Screen - Spreadsheet Format
   From an Existing File
   From the CAISS-STAT Database

   For more help, please refer to help menu. 
}

set helpStrings(TwoVariableDataSetConventions) {

   CAISS-STAT allows the user to check-in a two variable data set in several different ways.  These include

   From the Screen - String or List Format
   From the Screen - Spreadsheet Format
   From an Existing File
   From the CAISS-STAT Database
   For regression analysis the data sets should be the same size.
   For more help, please refer to help menu. 
}

set helpStrings(OneVariableDataSetSpreadsheetFormat) {
     A data set can also be inputted via a spreadsheet format. When the user chooses spreadsheet format a spreadsheet will appear.  For a one variable data set the user will input the data into the first column of the spreadsheet. For example 

 ________________________________
|8.6	|	|	|	|				
|_______|_______|_______|_______|
|9.8	|	|	|	|				
|_______|_______|_______|_______|
|10.3	|	|	|	|				
|_______|_______|_______|_______|
|10.7	|	|	|	|				
|_______|_______|_______|_______|
|9.6	|	|	|	|				
| ______|_______|_______|_______|
   
}

set helpStrings(OneVariableDataSetStringFormat) {

A data set is a collection of numbers.  These numbers generally represent a set of measurements such as heights, weights, time, stress etc.  These will usually consist of a random sample from some continuous population.  In entering from the screen in string or list format  the user would enter the data one after another separated by commas.  For example

4.8, 8.9, 3.7, 6.6, 5.9

}

set helpStrings(TwoVariableDataSetStringFormat) {

   Enter data from the first population in the first screen then data from the second population in the second screen.
}

set helpStrings(OneVariableDataSetFromFile) {

  The user can also import an existing file to be checked in as a CAISS-STAT \
one variable data set.
}

set helpStrings(OneVariableDataSetFromDatabase) {

  CAISS-STAT contains a built-in database of one-variable data sets that can be \
used for exploration and analysis.
}

set helpStrings(DataSetDataSummary) {
  Data Summary can either be in the form of a Frequency Distribution or a Percentage Distribution.

  Click on Recalculate and Summary Type to change between them. 

  You may also change the setting by using the boxes in this window followed by Recalculate. 

       For more information click on help.
}

set helpStrings(DataSetGraphicalAnalysis) {
  Graphical Analysis can be in the form of a Histogram, Frequency Polygon, Comparison with Normal.

  Click on Recalculate and Graph Type to change between them. 

  You may also change the setting by using the boxes in this window followed by Recalculate. 

       For more information click on help.
}

set helpStrings(DataSetMeanAnalysis) {
  The Analysis of the Mean Tool will perform two standard inference procedures \
for a population mean of the population from which the given one variable data \
set has been drawn.  The first procedure is to construct a  confidence interval \
for the population mean from the sample mean and standard deviation of the given \
one variable data set. The second procedure is to evaluate a hypothesis test testing \
a user supplied null hypothesis( given in the form of a target mean) against \
a user supplied alternative hypothesis.
 
Please choose a type of analysis from the menu above.

  For more information click on help.
}

set helpStrings(DataSetVarianceAnalysis) {
The  Analysis of the Variance Tool will perform two standard inference procedures \
for the population variance or population standard deviation of the population \
from which the given one variable data set has been drawn.  The first procedure \
is to construct a confidence interval for the population variance from the sample \ 
standard deviation of the given one variable data set. The second procedure is to \
evaluate a hypothesis test testing a user supplied null hypothesis (given in the \
form of a target variance or standard deviaiton) against a user supplied alternative \
hypothesis.
 
Pleasse choose an analysis type from the menu above.

For more information click on help.

}

set helpStrings(DataSetGoodnessFitAnalysis) {
The Goodness of Fit Tool will conduct a test to determine whether a one variable \
data set fits a given theoretical distribution with a prescribed level of significance. \
The level of significance must be a number between 0 and 1.  A common choice is .05. The \
user can test the one variable data set against a normal distirbution, an exponential \
distribution or a uniform distribution.

  For more information click on help.

}

set helpStrings(DataSetRandomSampleAnalysis) {
The Random Sample Tool will choose a random sample from the given one variable data set.\
The user must choose a sample size.  Further analysis can be done on this random sample \
using the one variable tools. 

  For more information click on help.
}

set helpStrings(DataSetVarianceConfidenceAnalysis) {
The  confidence interval for variances tool will calculate a confidence interval for \
a population variance and population standard deviation given a one variable data set.\
The user must supply the desired confidence level which must be a number between 0 and \
1.  .95 is a common choice.

  For more information click on help.
}

set helpStrings(DataSetVarianceHypothesisAnalysis) {
The hypothesis testing tool for variances for a one variable data set will conduct a \
hypothesis test for a single variance or single standard deviation against a given  value. \
Thus it will test a null hypothesis of the form 
                Ho: s = s0
The user must supply the desired significance level and the desired alternative. \
The significance level must be a number between 0 and 1.  A common choice is a 5% level or a choice of .05.
 

  For more information click on help.
}

set helpStrings(DataSetMeanConfidenceAnalysis) {
The  confidence interval for means tool will calculate a confidence interval \
for a population mean given a one variable data set.  The user must supply the \ 
desired confidence level which must be a number between 0 and 1.  .95 is a common choice.

  For more information click on help.
}

set helpStrings(DataSetMeanHypothesisAnalysis) {
The hypothesis testing tool for means for a one variable data set will conduct a \
hypothesis test for a single mean against a given  value.  Thus it will test a null \
hypothesis of the form
               Ho: m = m0
The user must supply the desired significance level and the desired alternative. \
The significance level must be a number between 0 and 1. A common choice is a 5% level \
or a choice of .05.
 

  For more information click on help.
}

set helpStrings(DataSetComparisonMeanAnalysis) {
  Comparison Mean Analysis
  For more information click on help.
}

set helpStrings(DataSetComparisonVarianceAnalysis) {
  Comparison Variance Analysis
  For more information click on help.
}

set helpStrings(DataSetComparisonMeanConfidenceAnalysis) {
  DataSet Comparison Mean Confidence Analysis
  For more information click on help.
}

set helpStrings(DataSetComparisonMeanHypothesisAnalysis) {
  DataSet Comparison Mean Hypothesis Analysis
  For more information click on help.
}

# useless
set helpStrings(DataSetComparisonVarianceConfidenceAnalysis) {
  Comparison Variance Analysis
  For more information click on help.
}

set helpStrings(DataSetComparisonVarianceHypothesisAnalysis) {
  DataSet Comparison Variance Hypothesis Analysis
  For more information click on help.
}

set helpStrings(DataSetNonParametricAnalysis) {
  DataSet Non Parametric Analysis
  For more information click on help.
}

set helpStrings(DataSetPredictionModelFitAnalysis) {
  DataSetPredictionModelFitAnalysis
  For more information click on help.
}

set helpStrings(DataSetPredictionHypothesisSlopeAnalysis) {
  DataSetPredictionHypothesisSlopeAnalysis
  For more information click on help.
}

set helpStrings(DataSetPredictionConfidenceSlopeAnalysis) {
  DataSetPredictionConfidenceSlopeAnalysis
  For more information click on help.
}

set helpStrings(DataSetPredictionHypothesisInterceptAnalysis) {
  DataSetPredictionHypothesisInterceptAnalysis
  For more information click on help.
}

set helpStrings(DataSetPredictionConfidenceInterceptAnalysis) {
  DataSetPredictionConfidenceInterceptAnalysis
  For more information click on help.
}

set helpStrings(DataSetPredictionIntervalAnalysis) {
  DataSetPredictionIntervalAnalysis
  For more information click on help.
}

set helpStrings(DataSetPredictionAnalysis) {
  DataSetPredictionAnalysis
  For more information click on help.
}
set helpStrings(DataSetPredictionTotalAnalysis) {
  DataSetPredictionTotalAnalysis
  For more information click on help.
}
set helpStrings(DataSetRegressionCorrelationAnalysis) {
  DataSetRegressionCorrelationAnalysis
  For more information click on help.
}
set helpStrings(DataSetConfidenceCorrelationAnalysis) {
  DataSetConfidenceCorrelationAnalysis
  For more information click on help.
}
set helpStrings(DataSetHypothesisCorrelationAnalysis) {
  DataSetHypothesisCorrelationAnalysis
  For more information click on help.
}
set helpStrings(DataSetAlternateModelAnalysis) {
  DataSetAlternateModelAnalysis
  For more information click on help.
}


# -------------------------- CALCULUS --------------------------------- #


set helpStrings(PolynomialConventions) {

Example:

x1 + 2 x1 x2 - 5 x3^2 
}


